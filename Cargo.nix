# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.
{
  nixpkgs ? <nixpkgs>,
  pkgs ? import nixpkgs {config = {};},
  lib ? pkgs.lib,
  stdenv ? pkgs.stdenv,
  buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate,
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
  defaultCrateOverrides ? pkgs.defaultCrateOverrides,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures ? ["default"],
  # If true, throw errors instead of issueing deprecation warnings.
  strictDeprecation ? false,
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
  targetFeatures ? [],
  # Whether to perform release builds: longer compile times, faster binaries.
  release ? true,
  # Additional crate2nix configuration if it exists.
  crateConfig ?
    if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {},
  # My own custom passed in source filter
  # TODO: when this is regerated this will get lost...
  # ==================================================
  # Hopefully you see this in the diff
  # ==================================================
  sourceFilter,
}: rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "room_101";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate {inherit packageId;};
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "room_101" = rec {
      packageId = "room_101";
      build = internal.buildRustCrateWithFeatures {
        packageId = "room_101";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate {inherit packageId;};
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
    name = "all-workspace-members";
    paths = let
      members = builtins.attrValues workspaceMembers;
    in
      builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "Inflector" = rec {
        crateName = "Inflector";
        version = "0.11.4";
        edition = "2015";
        sha256 = "1lqmcni21ifzyq41fhz6k1j2b23cmsx469s4g4sf01l78miqqhzy";
        libName = "inflector";
        authors = [
          "Josh Teeter<joshteeter@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
        ];
        features = {
          "default" = ["heavyweight"];
          "heavyweight" = ["regex" "lazy_static"];
          "lazy_static" = ["dep:lazy_static"];
          "regex" = ["dep:regex"];
        };
        resolvedDefaultFeatures = ["default" "heavyweight" "lazy_static" "regex"];
      };
      "addr" = rec {
        crateName = "addr";
        version = "0.15.6";
        edition = "2018";
        sha256 = "1vrbnzv4r7sx65mmi011aiafc7b1866iywnchx8asc72vd0qlfx9";
        authors = [
          "rushmorem <rushmore@webenchanter.com>"
        ];
        dependencies = [
          {
            name = "psl-types";
            packageId = "psl-types";
          }
        ];
        features = {
          "default" = ["psl" "std"];
          "net" = ["no-std-net"];
          "no-std-net" = ["dep:no-std-net"];
          "psl" = ["dep:psl"];
          "publicsuffix" = ["dep:publicsuffix"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = ["read"];
          }
        ];
        features = {
          "all" = ["bin"];
          "alloc" = ["dep:alloc"];
          "bin" = ["loader" "rustc-demangle" "cpp_demangle" "fallible-iterator" "smallvec" "dep:clap"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "cpp_demangle" = ["dep:cpp_demangle"];
          "default" = ["rustc-demangle" "cpp_demangle" "loader" "fallible-iterator" "smallvec"];
          "fallible-iterator" = ["dep:fallible-iterator"];
          "loader" = ["std" "dep:object" "dep:memmap2" "dep:typed-arena"];
          "rustc-demangle" = ["dep:rustc-demangle"];
          "rustc-dep-of-std" = ["core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std"];
          "smallvec" = ["dep:smallvec"];
          "std" = ["gimli/std"];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.1";
        edition = "2021";
        sha256 = "1ymy18s9hs7ya1pjc9864l30wk8p2qfqdi7mhhcc5nfakxbij09j";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["core"];
        };
      };
      "aead" = rec {
        crateName = "aead";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1c32aviraqag7926xcb9sybdm36v5vh9gnxpn4pxdwjc50zl28ni";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arrayvec" = ["dep:arrayvec"];
          "blobby" = ["dep:blobby"];
          "bytes" = ["dep:bytes"];
          "default" = ["rand_core"];
          "dev" = ["blobby"];
          "getrandom" = ["crypto-common/getrandom" "rand_core"];
          "heapless" = ["dep:heapless"];
          "rand_core" = ["crypto-common/rand_core"];
          "std" = ["alloc" "crypto-common/std"];
        };
        resolvedDefaultFeatures = ["alloc" "bytes" "default" "getrandom" "rand_core" "std"];
      };
      "affinitypool" = rec {
        crateName = "affinitypool";
        version = "0.3.1";
        edition = "2021";
        sha256 = "1xjliy72rnnhl1ynxdgrjv2m34406w679v5fkdajn8w2bcw2mpid";
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "age" = rec {
        crateName = "age";
        version = "0.11.1";
        edition = "2021";
        sha256 = "12k0rkmsy31p5gn33ai1sh607kszln0qy227gs411ykl90gigz2p";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "age-core";
            packageId = "age-core";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bech32";
            packageId = "bech32";
          }
          {
            name = "chacha20poly1305";
            packageId = "chacha20poly1305";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "cookie-factory";
            packageId = "cookie-factory";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "i18n-embed";
            packageId = "i18n-embed";
            features = ["fluent-system"];
          }
          {
            name = "i18n-embed-fl";
            packageId = "i18n-embed-fl";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "pin-project";
            packageId = "pin-project 1.1.10";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rust-embed";
            packageId = "rust-embed";
          }
          {
            name = "scrypt";
            packageId = "scrypt";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
            features = ["static_secrets"];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "i18n-embed";
            packageId = "i18n-embed";
            features = ["fluent-system" "desktop-requester"];
          }
        ];
        features = {
          "aes" = ["dep:aes"];
          "aes-gcm" = ["dep:aes-gcm"];
          "async" = ["futures" "memchr"];
          "bcrypt-pbkdf" = ["dep:bcrypt-pbkdf"];
          "cbc" = ["dep:cbc"];
          "cipher" = ["dep:cipher"];
          "cli-common" = ["console" "is-terminal" "pinentry" "rpassword"];
          "console" = ["dep:console"];
          "ctr" = ["dep:ctr"];
          "curve25519-dalek" = ["dep:curve25519-dalek"];
          "futures" = ["dep:futures"];
          "is-terminal" = ["dep:is-terminal"];
          "memchr" = ["dep:memchr"];
          "num-traits" = ["dep:num-traits"];
          "pinentry" = ["dep:pinentry"];
          "plugin" = ["age-core/plugin" "which" "wsl"];
          "rpassword" = ["dep:rpassword"];
          "rsa" = ["dep:rsa"];
          "ssh" = ["aes" "aes-gcm" "bcrypt-pbkdf" "cbc" "cipher" "ctr" "curve25519-dalek" "num-traits" "rsa"];
          "unstable" = ["age-core/unstable"];
          "web-sys" = ["dep:web-sys"];
          "which" = ["dep:which"];
          "wsl" = ["dep:wsl"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "age-core" = rec {
        crateName = "age-core";
        version = "0.11.0";
        edition = "2021";
        sha256 = "16fgb96fxgjkn81b150a7db01lp177df5v0k162rvjl4r64nmgz2";
        libName = "age_core";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "chacha20poly1305";
            packageId = "chacha20poly1305";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "cookie-factory";
            packageId = "cookie-factory";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "io_tee";
            packageId = "io_tee";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "secrecy";
            packageId = "secrecy";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
        ];
        features = {
          "plugin" = ["tempfile"];
          "tempfile" = ["dep:tempfile"];
        };
      };
      "ahash 0.7.8" = rec {
        crateName = "ahash";
        version = "0.7.8";
        edition = "2018";
        sha256 = "1y9014qsy6gs9xld4ch7a6xi9bpki8vaciawxq4p75d8qvh7f549";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = {
              target,
              features,
            }: (("linux" == target."os" or null) || ("android" == target."os" or null) || ("windows" == target."os" or null) || ("macos" == target."os" or null) || ("ios" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonfly" == target."os" or null) || ("solaris" == target."os" or null) || ("illumos" == target."os" or null) || ("fuchsia" == target."os" or null) || ("redox" == target."os" or null) || ("cloudabi" == target."os" or null) || ("haiku" == target."os" or null) || ("vxworks" == target."os" or null) || ("emscripten" == target."os" or null) || ("wasi" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = ["alloc"];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = ["dep:atomic-polyfill" "once_cell/atomic-polyfill"];
          "compile-time-rng" = ["const-random"];
          "const-random" = ["dep:const-random"];
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
      };
      "ahash 0.8.12" = rec {
        crateName = "ahash";
        version = "0.8.12";
        edition = "2018";
        sha256 = "0xbsp9rlm5ki017c0w6ay8kjwinwm8knjncci95mii30rmwz25as";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = ["alloc"];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = ["simd"];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = ["dep:portable-atomic" "once_cell/critical-section"];
          "compile-time-rng" = ["const-random"];
          "const-random" = ["dep:const-random"];
          "default" = ["std" "runtime-rng"];
          "getrandom" = ["dep:getrandom"];
          "runtime-rng" = ["getrandom"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "getrandom" "runtime-rng" "std"];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "perf-literal"];
          "logging" = ["dep:log"];
          "perf-literal" = ["dep:memchr"];
          "std" = ["memchr?/std"];
        };
        resolvedDefaultFeatures = ["perf-literal" "std"];
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.21";
        edition = "2018";
        sha256 = "08zrzs022xwndihvzdn78yqarv2b9696y67i6h78nla3ww87jgb8";
        libName = "allocator_api2";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "ammonia" = rec {
        crateName = "ammonia";
        version = "4.1.1";
        edition = "2021";
        sha256 = "13wpycwpx0c5qxqlf6mvd7pbqr9hw2gqkgwavq2li0fh9mv4dcyn";
        authors = [
          "Michael Howell <michael@notriddle.com>"
        ];
        dependencies = [
          {
            name = "cssparser";
            packageId = "cssparser";
          }
          {
            name = "html5ever";
            packageId = "html5ever";
          }
          {
            name = "maplit";
            packageId = "maplit";
          }
          {
            name = "tendril";
            packageId = "tendril";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        libName = "android_tzdata";
        authors = [
          "RumovZ"
        ];
      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.20";
        edition = "2021";
        sha256 = "14k1iqdf3dx7hdjllmql0j9sjxkwr1lfdddi3adzff0r7mjn7r9s";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = ["dep:anstyle-query"];
          "default" = ["auto" "wincon"];
          "wincon" = ["dep:anstyle-wincon"];
        };
        resolvedDefaultFeatures = ["auto" "default" "wincon"];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.11";
        edition = "2021";
        sha256 = "1gbbzi0zbgff405q14v8hhpi1kz2drzl9a75r3qhks47lindjbl6";
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.7";
        edition = "2021";
        sha256 = "1hhmkkfr95d462b3zf6yl2vfzdqfy5726ya572wwg8ha9y148xjf";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = ["dep:arrayvec"];
          "default" = ["utf8"];
          "utf8" = ["dep:utf8parse"];
        };
        resolvedDefaultFeatures = ["default" "utf8"];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.4";
        edition = "2021";
        sha256 = "1qir6d6fl5a4y2gmmw9a5w93ckwx6xn51aryd83p26zn6ihiy8wy";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_System_Console" "Win32_Foundation"];
          }
        ];
      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.10";
        edition = "2021";
        sha256 = "0ajz9wsf46a2l3pds7v62xbhq2cffj7wrilamkx2z8r28m0k61iy";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "once_cell_polyfill";
            packageId = "once_cell_polyfill";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_System_Console" "Win32_Foundation"];
          }
        ];
      };
      "any_ascii" = rec {
        crateName = "any_ascii";
        version = "0.3.3";
        edition = "2018";
        crateBin = [];
        sha256 = "0r7aayajhzlic9jc75zx4xwk470gy5d3xdbabdbkawms04z37ilh";
        authors = [
          "Hunter WB <hunter@hunterwb.com>"
        ];
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.99";
        edition = "2018";
        sha256 = "001icqvkfl28rxxmk99rm4gvdzxqngj5v50yg2bh3dzcvqfllrxh";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["backtrace" "default" "std"];
      };
      "approx 0.4.0" = rec {
        crateName = "approx";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0y52dg58lapl4pp1kqlznfw1blbki0nx6b0aw8kja2yi3gyhaaiz";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "num-complex" = ["dep:num-complex"];
        };
      };
      "approx 0.5.1" = rec {
        crateName = "approx";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1ilpv3dgd58rasslss0labarq7jawxmivk17wsh8wmkdm3q15cfa";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "num-complex" = ["dep:num-complex"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "arc-swap" = rec {
        crateName = "arc-swap";
        version = "1.7.1";
        edition = "2018";
        sha256 = "0mrl9a9r9p9bln74q6aszvf22q1ijiw089jkrmabfqkbj31zixv9";
        libName = "arc_swap";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "argon2" = rec {
        crateName = "argon2";
        version = "0.5.3";
        edition = "2021";
        sha256 = "0wn0kk97k49wxidfigmz1pdqmygqzi4h6w72ib7cpq765s4i0diw";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
          {
            name = "blake2";
            packageId = "blake2";
            usesDefaultFeatures = false;
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "password-hash";
            packageId = "password-hash";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "password-hash";
            packageId = "password-hash";
            features = ["rand_core"];
          }
        ];
        features = {
          "alloc" = ["password-hash/alloc"];
          "default" = ["alloc" "password-hash" "rand"];
          "password-hash" = ["dep:password-hash"];
          "rand" = ["password-hash/rand_core"];
          "simple" = ["password-hash"];
          "std" = ["alloc" "password-hash/std"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "password-hash" "rand"];
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];
      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        features = {
          "borsh" = ["dep:borsh"];
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "ascii-canvas" = rec {
        crateName = "ascii-canvas";
        version = "3.0.0";
        edition = "2018";
        sha256 = "1in38ziqn4kh9sw89ys4naaqzvvjscfs0m4djqbfq7455v5fq948";
        libName = "ascii_canvas";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "term";
            packageId = "term";
          }
        ];
      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1ljq24ig8lgs2555myrrjighycpx2mbjgrm3q7lpa6rdsmnxjklj";
        libName = "async_channel";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = ["std"];
          "portable-atomic" = ["concurrent-queue/portable-atomic" "event-listener-strategy/portable-atomic" "dep:portable-atomic-util" "dep:portable-atomic"];
          "std" = ["concurrent-queue/std" "event-listener-strategy/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "async-compat" = rec {
        crateName = "async-compat";
        version = "0.2.4";
        edition = "2018";
        sha256 = "1h4gqla7s8wczivqskbxg7nl3qj0svd6yf9fjssgg8wnwfyr9avv";
        libName = "async_compat";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["rt"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["rt-multi-thread" "io-std" "io-util" "macros" "net" "time"];
          }
        ];
      };
      "async-executor" = rec {
        crateName = "async-executor";
        version = "1.13.3";
        edition = "2021";
        sha256 = "1f3za9v8wkqzv6rz69g0qzvdcmghwbixijwzldwjm9w3zph00z29";
        libName = "async_executor";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["std"];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        devDependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
        ];
        features = {
        };
      };
      "async-graphql" = rec {
        crateName = "async-graphql";
        version = "7.0.17";
        edition = "2024";
        sha256 = "1029swgzd9zwaqxv4g3ykyj1cz3cz4jy9zsjjswa16r28bw1hrh3";
        libName = "async_graphql";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "async-graphql-derive";
            packageId = "async-graphql-derive";
          }
          {
            name = "async-graphql-parser";
            packageId = "async-graphql-parser";
          }
          {
            name = "async-graphql-value";
            packageId = "async-graphql-value";
          }
          {
            name = "async-stream";
            packageId = "async-stream";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            features = ["serde"];
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["std" "io" "sink" "async-await" "async-await-macro"];
          }
          {
            name = "http";
            packageId = "http";
            rename = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = ["serde"];
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "multer";
            packageId = "multer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "static_assertions_next";
            packageId = "static_assertions_next";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "altair" = ["handlebars" "schemars"];
          "apollo_persisted_queries" = ["lru" "sha2"];
          "apollo_tracing" = ["chrono"];
          "bigdecimal" = ["dep:bigdecimal"];
          "blocking" = ["dep:blocking"];
          "boxed-trait" = ["async-graphql-derive/boxed-trait"];
          "bson" = ["dep:bson"];
          "cbor" = ["serde_cbor"];
          "chrono" = ["dep:chrono"];
          "chrono-duration" = ["chrono" "iso8601"];
          "chrono-tz" = ["dep:chrono-tz"];
          "dataloader" = ["futures-channel" "lru"];
          "decimal" = ["rust_decimal"];
          "default" = ["email-validator" "tempfile" "playground" "graphiql"];
          "email-validator" = ["fast_chemail"];
          "fast_chemail" = ["dep:fast_chemail"];
          "futures-channel" = ["dep:futures-channel"];
          "graphiql" = ["handlebars"];
          "handlebars" = ["dep:handlebars"];
          "hashbrown" = ["dep:hashbrown"];
          "iso8601" = ["dep:iso8601"];
          "log" = ["dep:log"];
          "lru" = ["dep:lru"];
          "opentelemetry" = ["dep:opentelemetry"];
          "password-strength-validator" = ["zxcvbn"];
          "raw_value" = ["async-graphql-value/raw_value"];
          "rust_decimal" = ["dep:rust_decimal"];
          "schemars" = ["dep:schemars"];
          "secrecy" = ["dep:secrecy"];
          "serde_cbor" = ["dep:serde_cbor"];
          "sha2" = ["dep:sha2"];
          "smol_str" = ["dep:smol_str"];
          "tempfile" = ["dep:tempfile"];
          "time" = ["dep:time"];
          "tokio" = ["dep:tokio"];
          "tokio-sync" = ["tokio"];
          "tracing" = ["tracinglib" "tracing-futures"];
          "tracing-futures" = ["dep:tracing-futures"];
          "tracinglib" = ["dep:tracinglib"];
          "unblock" = ["blocking"];
          "url" = ["dep:url"];
          "uuid" = ["dep:uuid"];
          "uuid-validator" = ["uuid"];
          "zxcvbn" = ["dep:zxcvbn"];
        };
        resolvedDefaultFeatures = ["dynamic-schema"];
      };
      "async-graphql-derive" = rec {
        crateName = "async-graphql-derive";
        version = "7.0.17";
        edition = "2024";
        sha256 = "0gbsf89v3prny9088cjmnijvldfp6rvhlrvaipdmrnp5vfrxwigx";
        procMacro = true;
        libName = "async_graphql_derive";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "async-graphql-parser";
            packageId = "async-graphql-parser";
          }
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = ["derive"];
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["extra-traits" "visit-mut" "visit"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
        };
      };
      "async-graphql-parser" = rec {
        crateName = "async-graphql-parser";
        version = "7.0.17";
        edition = "2024";
        sha256 = "1lv6p9766fzcg77l1rhf2qlfqm5a2gav11f0vgd3ajj2b5z61dv0";
        libName = "async_graphql_parser";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "async-graphql-value";
            packageId = "async-graphql-value";
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
      };
      "async-graphql-value" = rec {
        crateName = "async-graphql-value";
        version = "7.0.17";
        edition = "2024";
        sha256 = "1ppjxdpvadhp2rp6lkffwf7hghz4kszrk6cz99hs7zwwgkzxmv1l";
        libName = "async_graphql_value";
        authors = [
          "sunli <scott_s829@163.com>"
          "Koxiaet"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            features = ["serde"];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = ["serde"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "raw_value" = ["serde_json/raw_value"];
        };
      };
      "async-stream" = rec {
        crateName = "async-stream";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0xl4zqncrdmw2g6241wgr11dxdg4h7byy6bz3l6si03qyfk72nhb";
        libName = "async_stream";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "async-stream-impl";
            packageId = "async-stream-impl";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
      };
      "async-stream-impl" = rec {
        crateName = "async-stream-impl";
        version = "0.3.6";
        edition = "2021";
        sha256 = "0kaplfb5axsvf1gfs2gk6c4zx6zcsns0yf3ssk7iwni7bphlvhn7";
        procMacro = true;
        libName = "async_stream_impl";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "visit-mut"];
          }
        ];
      };
      "async-task" = rec {
        crateName = "async-task";
        version = "4.7.1";
        edition = "2021";
        sha256 = "1pp3avr4ri2nbh7s6y9ws0397nkx1zymmcr14sq761ljarh3axcb";
        libName = "async_task";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = ["std"];
          "portable-atomic" = ["dep:portable-atomic"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.88";
        edition = "2021";
        sha256 = "1dgxvz7g75cmz6vqqz0mri4xazc6a8xfj1db6r9fxz29lzyd6fg5";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["clone-impls" "full" "parsing" "printing" "proc-macro" "visit-mut"];
          }
        ];
      };
      "async_io_stream" = rec {
        crateName = "async_io_stream";
        version = "0.3.3";
        edition = "2021";
        sha256 = "0k5rv51935p3il74q59hwaaid6sy9kv05vz3lw48jpgkrpgbkmxn";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "pharos";
            packageId = "pharos";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "map_pharos" = ["pharos"];
          "pharos" = ["dep:pharos"];
          "tokio" = ["dep:tokio"];
          "tokio_io" = ["tokio"];
        };
        resolvedDefaultFeatures = ["map_pharos" "pharos"];
      };
      "atoi" = rec {
        crateName = "atoi";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0a05h42fggmy7h0ajjv6m7z72l924i7igbx13hk9d8pyign9k3gj";
        authors = [
          "Markus Klein"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["num-traits/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "atomic-polyfill" = rec {
        crateName = "atomic-polyfill";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1x00ndablb89zvbr8m03cgjzgajg86fqn8pgz85yy2gy1pivrwlc";
        libName = "atomic_polyfill";
        authors = [
          "Dario Nieuwenhuis <dirbaio@dirbaio.net>"
        ];
        dependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
          }
        ];
      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = ["dep:portable-atomic"];
        };
      };
      "attohttpc" = rec {
        crateName = "attohttpc";
        version = "0.30.1";
        edition = "2021";
        sha256 = "1sg2cwd9qhw04mrn2p4rzvpjdmgdnfw2pfab92cm30zdsnvcvqhn";
        authors = [
          "Simon Bernier St-Pierre <git.sbstp.ca@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "__rustls" = ["dep:rustls" "rustls/default"];
          "__rustls-ring" = ["rustls/ring" "rustls/std" "rustls/tls12"];
          "charsets" = ["encoding_rs" "encoding_rs_io"];
          "compress" = ["flate2/default"];
          "compress-zlib" = ["flate2/zlib"];
          "compress-zlib-ng" = ["flate2/zlib-ng"];
          "default" = ["compress" "tls-native"];
          "encoding_rs" = ["dep:encoding_rs"];
          "encoding_rs_io" = ["dep:encoding_rs_io"];
          "flate2" = ["dep:flate2"];
          "form" = ["serde" "serde_urlencoded"];
          "json" = ["serde" "serde_json"];
          "mime" = ["dep:mime"];
          "mime_guess" = ["dep:mime_guess"];
          "multipart-form" = ["mime" "mime_guess" "rand"];
          "native-tls" = ["dep:native-tls"];
          "rand" = ["dep:rand"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "serde_urlencoded" = ["dep:serde_urlencoded"];
          "tls" = ["tls-native"];
          "tls-native" = ["native-tls"];
          "tls-native-vendored" = ["native-tls/vendored"];
          "tls-rustls" = ["tls-rustls-webpki-roots"];
          "tls-rustls-native-roots" = ["__rustls" "rustls-native-certs"];
          "tls-rustls-native-roots-ring" = ["__rustls-ring" "rustls-native-certs"];
          "tls-rustls-webpki-roots" = ["__rustls" "webpki-roots"];
          "tls-rustls-webpki-roots-ring" = ["__rustls-ring" "webpki-roots"];
          "tls-vendored" = ["tls-native-vendored"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1s77f98id9l4af4alklmzq46f21c980v13z2r1pcxx6bqgw0d1n0";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];
      };
      "backon" = rec {
        crateName = "backon";
        version = "1.5.2";
        edition = "2021";
        sha256 = "139s5dfvlxycp8xmb21aack9sc8zg2lafax0m76wxyqlhxhpf8jr";
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
            usesDefaultFeatures = false;
          }
          {
            name = "gloo-timers";
            packageId = "gloo-timers";
            optional = true;
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["time" "rt" "macros" "sync" "rt-multi-thread"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["macros" "rt" "sync"];
          }
        ];
        features = {
          "default" = ["std" "std-blocking-sleep" "tokio-sleep" "gloo-timers-sleep"];
          "embassy-sleep" = ["embassy-time"];
          "embassy-time" = ["dep:embassy-time"];
          "futures-timer" = ["dep:futures-timer"];
          "futures-timer-sleep" = ["futures-timer"];
          "gloo-timers" = ["dep:gloo-timers"];
          "gloo-timers-sleep" = ["gloo-timers/futures"];
          "std" = ["fastrand/std"];
          "tokio" = ["dep:tokio"];
          "tokio-sleep" = ["tokio/time"];
        };
        resolvedDefaultFeatures = ["default" "gloo-timers" "gloo-timers-sleep" "std" "std-blocking-sleep" "tokio" "tokio-sleep"];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.75";
        edition = "2021";
        sha256 = "00hhizz29mvd7cdqyz5wrj98vqkihgcxmv2vl7z0d0f53qrac1k8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = ["read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive"];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = {
              target,
              features,
            }: ((target."windows" or false) || ("cygwin" == target."os" or null));
          }
        ];
        features = {
          "cpp_demangle" = ["dep:cpp_demangle"];
          "default" = ["std"];
          "ruzstd" = ["dep:ruzstd"];
          "serde" = ["dep:serde"];
          "serialize-serde" = ["serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "base16ct" = rec {
        crateName = "base16ct";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1kylrjhdzk7qpknrvlphw8ywdnvvg39dizw9622w3wk5xba04zsc";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = ["alloc"];
        };
      };
      "base32" = rec {
        crateName = "base32";
        version = "0.5.1";
        edition = "2015";
        sha256 = "0xp0a3xml25xw2bp5pyac2nld7vmmfjl02qynnyfn6aznfggwb82";
        authors = [
          "Andreas Ots <qrpth@qrpth.eu>"
          "Tim Dumol <tim@timdumol.com>"
          "Dave Grantham <dwg@linuxprogrammer.org>"
        ];
      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "base64ct" = rec {
        crateName = "base64ct";
        version = "1.8.0";
        edition = "2024";
        sha256 = "1fj4vc6ghy3j1120r7dwn4xw90crfy46b448g5pm9w6an13qn92m";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "basic-toml" = rec {
        crateName = "basic-toml";
        version = "0.1.10";
        edition = "2021";
        sha256 = "12hp59jl28kk229q4sqx6v4fc9p66v8i2byi0vlc9922h9g6fqms";
        libName = "basic_toml";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
      };
      "bcrypt" = rec {
        crateName = "bcrypt";
        version = "0.15.1";
        edition = "2021";
        sha256 = "1iv2fvy5yywkx4kijqyy59bq92gldv3nqd4bry97vx4f0pnkhng6";
        authors = [
          "Vincent Prouillet <hello@prouilletvincent.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
          }
          {
            name = "blowfish";
            packageId = "blowfish";
            features = ["bcrypt"];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["base64/alloc" "getrandom"];
          "default" = ["std" "zeroize"];
          "getrandom" = ["dep:getrandom"];
          "js" = ["getrandom/js"];
          "std" = ["getrandom/std" "base64/std"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["default" "getrandom" "std" "zeroize"];
      };
      "bech32" = rec {
        crateName = "bech32";
        version = "0.9.1";
        edition = "2018";
        sha256 = "0igl565rfpxwbh0g36cb7469sjkiap8yd21kcr0ppi2jfbwr6syq";
        authors = [
          "Clark Moody"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1wcm9vxi00ma4rcxkl3pzzjli6ihrpn9cfdi0c5b4cvga2mxs007";
        libName = "bit_set";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["bit-vec/std"];
        };
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.6.3";
        edition = "2015";
        sha256 = "1ywqjnv60cdh1slhz67psnp422md6jdliji6alq0gmly2xm9p7rl";
        libName = "bit_vec";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "serde_no_std" = ["serde/alloc"];
          "serde_std" = ["std" "serde/std"];
        };
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "2.9.1";
        edition = "2021";
        sha256 = "0rz9rpp5wywwqb3mxfkywh4drmzci2fch780q7lifbf6bsc5d3hv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "bytemuck" = ["dep:bytemuck"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "compiler_builtins"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["serde" "std"];
      };
      "bitvec" = rec {
        crateName = "bitvec";
        version = "1.0.1";
        edition = "2021";
        sha256 = "173ydyj2q5vwj88k6xgjnfsshs4x9wbvjjv7sm0h36r34hn87hhv";
        dependencies = [
          {
            name = "funty";
            packageId = "funty";
            usesDefaultFeatures = false;
          }
          {
            name = "radium";
            packageId = "radium";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "wyz";
            packageId = "wyz";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["atomic" "std"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "blake2" = rec {
        crateName = "blake2";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1zlf7w7gql12v61d9jcbbswa3dw8qxsjglylsiljp9f9b3a2ll26";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["mac"];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["dev"];
          }
        ];
        features = {
          "default" = ["std"];
          "simd_asm" = ["simd_opt"];
          "simd_opt" = ["simd"];
          "std" = ["digest/std"];
        };
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.8.2";
        edition = "2021";
        sha256 = "1854x65zmjh9w9cfhyyyg0wmm2k5d87l13l4m7y40ajbkslam21q";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = ["std"];
          "digest" = ["dep:digest"];
          "mmap" = ["std" "dep:memmap2"];
          "rayon" = ["dep:rayon-core"];
          "serde" = ["dep:serde"];
          "traits-preview" = ["dep:digest"];
          "zeroize" = ["dep:zeroize" "arrayvec/zeroize"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
      };
      "blowfish" = rec {
        crateName = "blowfish";
        version = "0.9.1";
        edition = "2021";
        sha256 = "1mw7bvj3bg5w8vh9xw9xawqh7ixk2xwsxkj34ph96b9b1z6y44p4";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = ["dev"];
          }
        ];
        features = {
          "zeroize" = ["cipher/zeroize"];
        };
        resolvedDefaultFeatures = ["bcrypt"];
      };
      "bon" = rec {
        crateName = "bon";
        version = "2.3.0";
        edition = "2021";
        sha256 = "0sf8k4jcxs04z9mb8n0w684zsiinwmiqdyvmhs8yw62b3cwkljcp";
        dependencies = [
          {
            name = "bon-macros";
            packageId = "bon-macros";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "bon-macros" = rec {
        crateName = "bon-macros";
        version = "2.3.0";
        edition = "2021";
        sha256 = "0qqnmvvy79f0jaqzy60shpjsi80d646vgsi38kgjrha4r7mg6aia";
        procMacro = true;
        libName = "bon_macros";
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "visit-mut" "visit"];
          }
        ];
      };
      "borsh" = rec {
        crateName = "borsh";
        version = "1.5.7";
        edition = "2018";
        crateBin = [];
        sha256 = "1kikljm5yr3l9qsw5xvdccragxj4445s4s3fqsgy6hmmipwld1md";
        authors = [
          "Near Inc <hello@near.org>"
        ];
        dependencies = [
          {
            name = "borsh-derive";
            packageId = "borsh-derive";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "ascii" = ["dep:ascii"];
          "borsh-derive" = ["dep:borsh-derive"];
          "bson" = ["dep:bson"];
          "bytes" = ["dep:bytes"];
          "default" = ["std"];
          "derive" = ["borsh-derive"];
          "hashbrown" = ["dep:hashbrown"];
          "indexmap" = ["dep:indexmap"];
          "unstable__schema" = ["derive" "borsh-derive/schema"];
        };
        resolvedDefaultFeatures = ["borsh-derive" "derive" "std" "unstable__schema"];
      };
      "borsh-derive" = rec {
        crateName = "borsh-derive";
        version = "1.5.7";
        edition = "2018";
        sha256 = "1hwsznww7d01bh1fzpndzmcpyp00xpl2y9bg70i3z0zmqb0d7lgx";
        procMacro = true;
        libName = "borsh_derive";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "fold"];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "fold" "parsing"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default" "schema"];
      };
      "bounded-integer" = rec {
        crateName = "bounded-integer";
        version = "0.5.8";
        edition = "2021";
        sha256 = "12qqr199zx4gkj3zc57j95gjclpxg577fnp0vzk9663v33qvwb8h";
        libName = "bounded_integer";
        features = {
          "__examples" = ["macro" "bounded-integer-macro/generate_tests"];
          "arbitrary1" = ["dep:arbitrary1"];
          "bounded-integer-macro" = ["dep:bounded-integer-macro"];
          "bytemuck1" = ["dep:bytemuck1"];
          "macro" = ["bounded-integer-macro"];
          "num-traits02" = ["dep:num-traits02"];
          "serde" = ["serde1"];
          "serde1" = ["dep:serde1"];
          "std" = ["alloc"];
          "zerocopy" = ["dep:zerocopy"];
        };
        resolvedDefaultFeatures = ["types"];
      };
      "btparse" = rec {
        crateName = "btparse";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0cczirrmif0364vlxxz9zwiajvv2pyvgvg64nni1b23r5fb80ziq";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.19.0";
        edition = "2021";
        sha256 = "0hsdndvcpqbjb85ghrhska2qxvp9i75q2vb70hma9fxqawdy9ia6";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = ["dep:allocator-api2"];
          "bench_allocator_api" = ["allocator_api" "blink-alloc/nightly"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "bytecheck" = rec {
        crateName = "bytecheck";
        version = "0.6.12";
        edition = "2021";
        sha256 = "1hmipv4yyxgbamcbw5r65wagv9khs033v9483s9kri9sw9ycbk93";
        authors = [
          "David Koloski <djkoloski@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytecheck_derive";
            packageId = "bytecheck_derive";
            usesDefaultFeatures = false;
          }
          {
            name = "ptr_meta";
            packageId = "ptr_meta";
            usesDefaultFeatures = false;
          }
          {
            name = "simdutf8";
            packageId = "simdutf8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["simdutf8" "std"];
          "simdutf8" = ["dep:simdutf8"];
          "std" = ["ptr_meta/std" "bytecheck_derive/std" "simdutf8/std"];
          "uuid" = ["dep:uuid"];
        };
        resolvedDefaultFeatures = ["simdutf8" "std"];
      };
      "bytecheck_derive" = rec {
        crateName = "bytecheck_derive";
        version = "0.6.12";
        edition = "2021";
        sha256 = "0ng6230brd0hvqpbgcx83inn74mdv3abwn95x515bndwkz90dd1x";
        procMacro = true;
        authors = [
          "David Koloski <djkoloski@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.23.2";
        edition = "2018";
        sha256 = "0xs637lsr9p73ackjkmbjw80dp1dfdw0ydhdk0gzjcnzpkpfm59r";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        features = {
          "bytemuck_derive" = ["dep:bytemuck_derive"];
          "derive" = ["bytemuck_derive"];
          "extern_crate_std" = ["extern_crate_alloc"];
          "latest_stable_rust" = ["aarch64_simd" "avx512_simd" "align_offset" "alloc_uninit" "const_zeroed" "derive" "impl_core_error" "min_const_generics" "must_cast" "must_cast_extra" "pod_saturating" "track_caller" "transparentwrapper_extra" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit" "zeroable_unwind_fn"];
          "must_cast_extra" = ["must_cast"];
        };
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "bytes 0.5.6" = rec {
        crateName = "bytes";
        version = "0.5.6";
        edition = "2018";
        sha256 = "0f5s7xq6qzmdh22ygsy8v0sp02m51y0radvq4i4y8cizy1lfqk0f";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "bytes 1.10.1" = rec {
        crateName = "bytes";
        version = "1.10.1";
        edition = "2018";
        sha256 = "0smd4wi2yrhp5pmq571yiaqx84bjqlm1ixqhnvfwzzc6pqkn26yp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
        ];
        features = {
          "default" = ["std"];
          "extra-platforms" = ["dep:extra-platforms"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std"];
      };
      "castaway" = rec {
        crateName = "castaway";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0nn5his5f8q20nkyg1nwb40xc19a08yaj4y76a8q2y3mdsmm3ify";
        authors = [
          "Stephen M. Coakley <me@stephencoakley.com>"
        ];
        dependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.2.31";
        edition = "2018";
        sha256 = "1ljzmb5djr6gnq9d06jyd4lik7hpizcg1b7anfld6sbbpf22v963";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = ["dep:libc" "dep:jobserver"];
        };
      };
      "cedar-policy" = rec {
        crateName = "cedar-policy";
        version = "2.4.2";
        edition = "2021";
        sha256 = "0my85n57yqpcs8f1vqgrcqs7a9ad7iqljpjdfw8jjzqg1aqy749x";
        libName = "cedar_policy";
        type = ["rlib"];
        dependencies = [
          {
            name = "cedar-policy-core";
            packageId = "cedar-policy-core";
          }
          {
            name = "cedar-policy-validator";
            packageId = "cedar-policy-validator";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
            features = ["lexer"];
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "smol_str";
            packageId = "smol_str";
            features = ["serde"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "decimal" = ["cedar-policy-core/decimal" "cedar-policy-validator/decimal"];
          "default" = ["ipaddr" "decimal"];
          "experimental" = ["partial-eval"];
          "heap-profiling" = ["dep:dhat"];
          "ipaddr" = ["cedar-policy-core/ipaddr" "cedar-policy-validator/ipaddr"];
          "partial-eval" = ["cedar-policy-core/partial-eval"];
        };
        resolvedDefaultFeatures = ["decimal" "default" "ipaddr"];
      };
      "cedar-policy-core" = rec {
        crateName = "cedar-policy-core";
        version = "2.4.2";
        edition = "2021";
        sha256 = "15cr1ndlbwh4pjm1ghmn0bcmy8sly8lha2lg0gw1hzkb3icia8yd";
        libName = "cedar_policy_core";
        dependencies = [
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            optional = true;
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
            features = ["lexer"];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "miette";
            packageId = "miette";
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            features = ["unicode"];
          }
          {
            name = "rustc_lexer";
            packageId = "rustc_lexer";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            features = ["json"];
          }
          {
            name = "smol_str";
            packageId = "smol_str";
            features = ["serde"];
          }
          {
            name = "stacker";
            packageId = "stacker";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        buildDependencies = [
          {
            name = "lalrpop";
            packageId = "lalrpop";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "decimal" = ["dep:regex"];
          "default" = ["ipaddr" "decimal"];
          "ipaddr" = ["dep:ipnet"];
        };
        resolvedDefaultFeatures = ["decimal" "default" "ipaddr"];
      };
      "cedar-policy-validator" = rec {
        crateName = "cedar-policy-validator";
        version = "2.4.2";
        edition = "2021";
        sha256 = "1py7mpkd22z7x4fvwd3bpnj9lgl9s3b9l6b5gvcjwx6slnrf2mp7";
        libName = "cedar_policy_validator";
        dependencies = [
          {
            name = "cedar-policy-core";
            packageId = "cedar-policy-core";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = ["preserve_order"];
          }
          {
            name = "serde_with";
            packageId = "serde_with";
          }
          {
            name = "smol_str";
            packageId = "smol_str";
            features = ["serde"];
          }
          {
            name = "stacker";
            packageId = "stacker";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "unicode-security";
            packageId = "unicode-security";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "decimal" = ["cedar-policy-core/decimal"];
          "default" = ["ipaddr" "decimal"];
          "ipaddr" = ["cedar-policy-core/ipaddr"];
        };
        resolvedDefaultFeatures = ["decimal" "default" "ipaddr"];
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.1";
        edition = "2018";
        sha256 = "0s0jr5j797q1vqjcd41l0v5izlmlqm7lxy512b418xz5r65mfmcm";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core"];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];
      };
      "chacha20" = rec {
        crateName = "chacha20";
        version = "0.9.1";
        edition = "2021";
        sha256 = "0678wipx6kghp71hpzhl2qvx80q7caz3vm8vsvd07b1fpms3yqf3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = ["dev"];
          }
        ];
        features = {
          "std" = ["cipher/std"];
          "zeroize" = ["cipher/zeroize"];
        };
        resolvedDefaultFeatures = ["zeroize"];
      };
      "chacha20poly1305" = rec {
        crateName = "chacha20poly1305";
        version = "0.10.1";
        edition = "2021";
        sha256 = "0dfwq9ag7x7lnd0znafpcn8h7k4nfr9gkzm0w7sc1lcj451pkk8h";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "chacha20";
            packageId = "chacha20";
            features = ["zeroize"];
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "poly1305";
            packageId = "poly1305";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
            features = ["dev"];
          }
        ];
        features = {
          "alloc" = ["aead/alloc"];
          "default" = ["alloc" "getrandom"];
          "getrandom" = ["aead/getrandom" "rand_core"];
          "heapless" = ["aead/heapless"];
          "rand_core" = ["aead/rand_core"];
          "std" = ["aead/std" "alloc"];
          "stream" = ["aead/stream"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.41";
        edition = "2021";
        sha256 = "0k8wy2mph0mgipq28vv3wirivhb31pqs7jyid0dzjivz0i9djsf4";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = {
              target,
              features,
            }: (target."unix" or false);
            features = ["fallback"];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = ["dep:android-tzdata"];
          "arbitrary" = ["dep:arbitrary"];
          "clock" = ["winapi" "iana-time-zone" "android-tzdata" "now"];
          "default" = ["clock" "std" "oldtime" "wasmbind"];
          "iana-time-zone" = ["dep:iana-time-zone"];
          "js-sys" = ["dep:js-sys"];
          "now" = ["std"];
          "pure-rust-locales" = ["dep:pure-rust-locales"];
          "rkyv" = ["dep:rkyv" "rkyv/size_32"];
          "rkyv-16" = ["dep:rkyv" "rkyv?/size_16"];
          "rkyv-32" = ["dep:rkyv" "rkyv?/size_32"];
          "rkyv-64" = ["dep:rkyv" "rkyv?/size_64"];
          "rkyv-validation" = ["rkyv?/validation"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
          "unstable-locales" = ["pure-rust-locales"];
          "wasm-bindgen" = ["dep:wasm-bindgen"];
          "wasmbind" = ["wasm-bindgen" "js-sys"];
          "winapi" = ["windows-link"];
          "windows-link" = ["dep:windows-link"];
        };
        resolvedDefaultFeatures = ["alloc" "android-tzdata" "clock" "default" "iana-time-zone" "js-sys" "now" "oldtime" "serde" "std" "wasm-bindgen" "wasmbind" "winapi" "windows-link"];
      };
      "chrono-humanize" = rec {
        crateName = "chrono-humanize";
        version = "0.2.3";
        edition = "2018";
        sha256 = "0fq25fcdqd7s39dx81hq123210q4lpcbjdz82jl2fy6jnkk2g5kr";
        libName = "chrono_humanize";
        authors = [
          "Cyril Plisko <cyril.plisko@mountall.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = ["clock" "std"];
          }
        ];
        features = {
          "wasmbind" = ["chrono/wasmbind"];
        };
      };
      "ciborium" = rec {
        crateName = "ciborium";
        version = "0.2.2";
        edition = "2021";
        sha256 = "03hgfw4674im1pdqblcp77m7rc8x2v828si5570ga5q9dzyrzrj2";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
            features = ["alloc"];
          }
          {
            name = "ciborium-ll";
            packageId = "ciborium-ll";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["alloc" "derive"];
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["ciborium-io/std" "serde/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "ciborium-io" = rec {
        crateName = "ciborium-io";
        version = "0.2.2";
        edition = "2021";
        sha256 = "0my7s5g24hvp1rs1zd1cxapz94inrvqpdf1rslrvxj8618gfmbq5";
        libName = "ciborium_io";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        features = {
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "ciborium-ll" = rec {
        crateName = "ciborium-ll";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1n8g4j5rwkfs3rzfi6g1p7ngmz6m5yxsksryzf5k72ll7mjknrjp";
        libName = "ciborium_ll";
        authors = [
          "Nathaniel McCallum <npmccallum@profian.com>"
        ];
        dependencies = [
          {
            name = "ciborium-io";
            packageId = "ciborium-io";
          }
          {
            name = "half";
            packageId = "half";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = ["alloc" "half/std"];
        };
      };
      "cipher" = rec {
        crateName = "cipher";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1b9x9agg67xq5nq879z66ni4l08m6m3hqcshk37d4is4ysd3ngvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "inout";
            packageId = "inout";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = ["dep:blobby"];
          "block-padding" = ["inout/block-padding"];
          "dev" = ["blobby"];
          "rand_core" = ["crypto-common/rand_core"];
          "std" = ["alloc" "crypto-common/std" "inout/std"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["zeroize"];
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.44";
        edition = "2021";
        crateBin = [];
        sha256 = "1y2gv8zxil1bf4w78zd1c0sd3p8rjvvizi3m6d6fbqspmrmha7qw";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = ["clap_builder/cargo"];
          "color" = ["clap_builder/color"];
          "debug" = ["clap_builder/debug" "clap_derive?/debug"];
          "default" = ["std" "color" "help" "usage" "error-context" "suggestions"];
          "deprecated" = ["clap_builder/deprecated" "clap_derive?/deprecated"];
          "derive" = ["dep:clap_derive"];
          "env" = ["clap_builder/env"];
          "error-context" = ["clap_builder/error-context"];
          "help" = ["clap_builder/help"];
          "std" = ["clap_builder/std"];
          "string" = ["clap_builder/string"];
          "suggestions" = ["clap_builder/suggestions"];
          "unicode" = ["clap_builder/unicode"];
          "unstable-doc" = ["clap_builder/unstable-doc" "derive"];
          "unstable-ext" = ["clap_builder/unstable-ext"];
          "unstable-markdown" = ["clap_derive/unstable-markdown"];
          "unstable-styles" = ["clap_builder/unstable-styles"];
          "unstable-v5" = ["clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated"];
          "usage" = ["clap_builder/usage"];
          "wrap_help" = ["clap_builder/wrap_help"];
        };
        resolvedDefaultFeatures = ["color" "default" "derive" "error-context" "help" "std" "suggestions" "usage"];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.44";
        edition = "2021";
        sha256 = "1a48x3c9q1l7r6wbgy71mq6kfsihpqzxsnbaaamcgwvp88hz9rxk";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
        ];
        features = {
          "color" = ["dep:anstream"];
          "debug" = ["dep:backtrace"];
          "default" = ["std" "color" "help" "usage" "error-context" "suggestions"];
          "std" = ["anstyle/std"];
          "suggestions" = ["dep:strsim" "error-context"];
          "unicode" = ["dep:unicode-width" "dep:unicase"];
          "unstable-doc" = ["cargo" "wrap_help" "env" "unicode" "string" "unstable-ext"];
          "unstable-styles" = ["color"];
          "unstable-v5" = ["deprecated"];
          "wrap_help" = ["help" "dep:terminal_size"];
        };
        resolvedDefaultFeatures = ["color" "error-context" "help" "std" "suggestions" "usage"];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.41";
        edition = "2021";
        sha256 = "14glxqpfjs7z6m37f3ycrhgdkpyqmgwbr4vk1y34rjjrd8w54kzg";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
        features = {
          "raw-deprecated" = ["deprecated"];
          "unstable-markdown" = ["dep:pulldown-cmark" "dep:anstyle"];
          "unstable-v5" = ["deprecated"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0xb6pjza43irrl99axbhs12pxq4sr8x7xd36p703j57f5i3n2kxr";
      };
      "cobs" = rec {
        crateName = "cobs";
        version = "0.3.0";
        edition = "2021";
        sha256 = "18f0kxxa1fqb8pz2dxwssnhsrvhrs5j4p8xllgin5d7h36sn3a8g";
        authors = [
          "Allen Welkie <>"
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "defmt" = ["dep:defmt"];
          "serde" = ["dep:serde"];
          "std" = ["alloc" "thiserror/std"];
          "use_std" = ["std"];
        };
      };
      "color-backtrace" = rec {
        crateName = "color-backtrace";
        version = "0.7.0";
        edition = "2021";
        sha256 = "03wznr7aihhvdkw03y07qqap3cl3k2msjrkgqrhshb6m9fcaa8r1";
        libName = "color_backtrace";
        authors = [
          "Joel Höner <athre0z@zyantific.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "btparse";
            packageId = "btparse";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
        ];
        features = {
          "default" = ["use-backtrace-crate"];
          "resolve-modules" = ["dep:regex" "use-backtrace-crate"];
          "use-backtrace-crate" = ["dep:backtrace"];
          "use-btparse-crate" = ["dep:btparse"];
        };
        resolvedDefaultFeatures = ["default" "use-backtrace-crate" "use-btparse-crate"];
      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.4";
        edition = "2021";
        sha256 = "0x8ymkz1xr77rcj1cfanhf416pc4v681gmkc9dzb3jqja7f62nxh";
      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.5.0";
        edition = "2021";
        sha256 = "0wrr3mzq2ijdkxwndhf79k952cp4zkz35ray8hvsxl96xrx1k82c";
        libName = "concurrent_queue";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "loom" = ["dep:loom"];
          "portable-atomic" = ["dep:portable-atomic"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "const-oid" = rec {
        crateName = "const-oid";
        version = "0.9.6";
        edition = "2021";
        sha256 = "1y0jnqaq7p2wvspnx7qj76m7hjcqpz73qzvr9l2p9n2s51vr6if2";
        libName = "const_oid";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
        };
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "cookie-factory" = rec {
        crateName = "cookie-factory";
        version = "0.3.3";
        edition = "2018";
        sha256 = "18mka6fk3843qq3jw1fdfvzyv05kx7kcmirfbs2vg2kbw9qzm1cq";
        libName = "cookie_factory";
        authors = [
          "Geoffroy Couprie <geo.couprie@gmail.com>"
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
        ];
        features = {
          "async" = ["futures"];
          "default" = ["std" "async"];
          "futures" = ["dep:futures"];
        };
        resolvedDefaultFeatures = ["async" "default" "futures" "std"];
      };
      "cordyceps" = rec {
        crateName = "cordyceps";
        version = "0.3.4";
        edition = "2021";
        sha256 = "0aharq07vlfjia6jxkkf0322n7y3r0v6ylzjbrvxxf4jh2xpz3b8";
        authors = [
          "Eliza Weisman <eliza@elizas.website>"
        ];
        dependencies = [
          {
            name = "loom";
            packageId = "loom";
            target = {
              target,
              features,
            }: (target."loom" or false);
          }
          {
            name = "tracing";
            packageId = "tracing";
            target = {
              target,
              features,
            }: (target."loom" or false);
          }
        ];
        devDependencies = [
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "default" = ["link"];
          "link" = ["core-foundation-sys/link"];
          "mac_os_10_7_support" = ["core-foundation-sys/mac_os_10_7_support"];
          "mac_os_10_8_features" = ["core-foundation-sys/mac_os_10_8_features"];
          "uuid" = ["dep:uuid"];
          "with-chrono" = ["chrono"];
          "with-uuid" = ["uuid"];
        };
        resolvedDefaultFeatures = ["default" "link"];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = ["link"];
        };
        resolvedDefaultFeatures = ["default" "link"];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.17";
        edition = "2018";
        sha256 = "10023dnnaghhdl70xcds12fsx2b966sxbxjq5sxs49mvxqw5ivar";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];
      };
      "crc" = rec {
        crateName = "crc";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0xg6yg57lbyzf69y8znq5gjb333w1fnlis2gnjg38blwffrx644p";
        authors = [
          "Rui Hu <code@mrhooray.com>"
          "Akhil Velagapudi <4@4khil.com>"
        ];
        dependencies = [
          {
            name = "crc-catalog";
            packageId = "crc-catalog";
          }
        ];
      };
      "crc-catalog" = rec {
        crateName = "crc-catalog";
        version = "2.4.0";
        edition = "2018";
        sha256 = "1xg7sz82w3nxp1jfn425fvn1clvbzb3zgblmxsyqpys0dckp9lqr";
        libName = "crc_catalog";
        authors = [
          "Akhil Velagapudi <akhilvelagapudi@gmail.com>"
        ];
      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.5.0";
        edition = "2021";
        sha256 = "04d51liy8rbssra92p0qnwjw8i9rm9c4m3bwy19wjamz1k4w30cl";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "critical-section" = rec {
        crateName = "critical-section";
        version = "1.2.0";
        edition = "2018";
        sha256 = "02ylhcykxjc40xrfhk1lwc21jqgz4dbwv3jr49ymw733c51yl3kr";
        libName = "critical_section";
        features = {
          "std" = ["restore-state-bool"];
        };
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.15";
        edition = "2021";
        sha256 = "1cicd9ins0fkpfgvz9vhz3m9rpkh6n8d3437c3wnfsdkd3wgif42";
        libName = "crossbeam_channel";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0l9f1saqp1gn5qy0rxvkmz4m6n7fc0b3dbm6q1r5pmgpnyvi3lcx";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["crossbeam-epoch/std" "crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "loom" = ["loom-crate" "crossbeam-utils/loom"];
          "loom-crate" = ["dep:loom-crate"];
          "nightly" = ["crossbeam-utils/nightly"];
          "std" = ["alloc" "crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "crossbeam-queue" = rec {
        crateName = "crossbeam-queue";
        version = "0.3.12";
        edition = "2021";
        sha256 = "059igaxckccj6ndmg45d5yf7cm4ps46c18m21afq3pwiiz1bnn0g";
        libName = "crossbeam_queue";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "nightly" = ["crossbeam-utils/nightly"];
          "std" = ["alloc" "crossbeam-utils/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.21";
        edition = "2021";
        sha256 = "0a3aa2bmc8q35fb67432w16wvi54sfmb69rk9h5bhd18vw0c99fh";
        libName = "crossbeam_utils";
        features = {
          "default" = ["std"];
          "loom" = ["dep:loom"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.4";
        edition = "2021";
        sha256 = "1mbp5navim2qr3x48lyvadqblcxc1dm0lqr0swrkkwy2qblvw3s6";
        authors = [
          "Eira Fransham <jackefransham@gmail.com>"
        ];
        features = {
          "default" = ["limit_128"];
        };
        resolvedDefaultFeatures = ["default" "limit_128"];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = ["more_lengths"];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = ["rand_core/getrandom"];
          "rand_core" = ["dep:rand_core"];
        };
        resolvedDefaultFeatures = ["getrandom" "rand_core" "std"];
      };
      "crypto_box" = rec {
        crateName = "crypto_box";
        version = "0.9.1";
        edition = "2021";
        sha256 = "02ghw0frbq99d9r52dmk3nxnac6s1i6cqm8ihnkchbm8757jn60n";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "chacha20";
            packageId = "chacha20";
            optional = true;
          }
          {
            name = "crypto_secretbox";
            packageId = "crypto_secretbox";
            usesDefaultFeatures = false;
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = ["zeroize"];
          }
          {
            name = "salsa20";
            packageId = "salsa20";
            optional = true;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["aead/alloc"];
          "chacha20" = ["dep:chacha20" "crypto_secretbox/chacha20"];
          "default" = ["alloc" "getrandom" "salsa20"];
          "getrandom" = ["aead/getrandom" "rand_core"];
          "heapless" = ["aead/heapless"];
          "rand_core" = ["aead/rand_core"];
          "salsa20" = ["dep:salsa20" "crypto_secretbox/salsa20"];
          "seal" = ["dep:blake2" "alloc"];
          "serde" = ["dep:serdect"];
          "std" = ["aead/std"];
        };
        resolvedDefaultFeatures = ["alloc" "chacha20" "default" "getrandom" "rand_core" "salsa20" "serde"];
      };
      "crypto_secretbox" = rec {
        crateName = "crypto_secretbox";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1qa1w5s8dbyb88269zrmvbnillqahz394pl07bsds6gpmn3wzmmr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "chacha20";
            packageId = "chacha20";
            optional = true;
            features = ["zeroize"];
          }
          {
            name = "cipher";
            packageId = "cipher";
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
            features = ["zeroize"];
          }
          {
            name = "poly1305";
            packageId = "poly1305";
          }
          {
            name = "salsa20";
            packageId = "salsa20";
            optional = true;
            features = ["zeroize"];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["aead/alloc"];
          "chacha20" = ["dep:chacha20"];
          "default" = ["alloc" "getrandom" "salsa20"];
          "getrandom" = ["aead/getrandom" "rand_core"];
          "heapless" = ["aead/heapless"];
          "rand_core" = ["aead/rand_core"];
          "salsa20" = ["dep:salsa20"];
          "std" = ["aead/std" "alloc"];
          "stream" = ["aead/stream"];
        };
        resolvedDefaultFeatures = ["chacha20" "salsa20"];
      };
      "cssparser" = rec {
        crateName = "cssparser";
        version = "0.35.0";
        edition = "2018";
        sha256 = "1am2mj4rddlbmi08drk7gv9m8vw47zgicld48kwp451sfgfix42f";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "cssparser-macros";
            packageId = "cssparser-macros";
          }
          {
            name = "dtoa-short";
            packageId = "dtoa-short";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "phf";
            packageId = "phf";
            features = ["macros"];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "malloc_size_of" = ["dep:malloc_size_of"];
          "serde" = ["dep:serde"];
        };
      };
      "cssparser-macros" = rec {
        crateName = "cssparser-macros";
        version = "0.6.1";
        edition = "2018";
        sha256 = "0cfkzj60avrnskdmaf7f8zw6pp3di4ylplk455zrzaf19ax8id8k";
        procMacro = true;
        libName = "cssparser_macros";
        libPath = "lib.rs";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "extra-traits"];
          }
        ];
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "4.1.3";
        edition = "2021";
        sha256 = "1gmjb9dsknrr8lypmhkyjd67p1arb8mbfamlwxm7vph38my8pywp";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: ("x86_64" == target."arch" or null);
          }
          {
            name = "curve25519-dalek-derive";
            packageId = "curve25519-dalek-derive";
            target = {
              target,
              features,
            }: ((!("fiat" == target."curve25519_dalek_backend" or null)) && (!("serial" == target."curve25519_dalek_backend" or null)) && ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fiat-crypto";
            packageId = "fiat-crypto";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("fiat" == target."curve25519_dalek_backend" or null);
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = ["getrandom"];
          }
        ];
        features = {
          "alloc" = ["zeroize?/alloc"];
          "default" = ["alloc" "precomputed-tables" "zeroize"];
          "digest" = ["dep:digest"];
          "ff" = ["dep:ff"];
          "group" = ["dep:group" "rand_core"];
          "group-bits" = ["group" "ff/bits"];
          "rand_core" = ["dep:rand_core"];
          "serde" = ["dep:serde"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "digest" "precomputed-tables" "rand_core" "serde" "zeroize"];
      };
      "curve25519-dalek-derive" = rec {
        crateName = "curve25519-dalek-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1cry71xxrr0mcy5my3fb502cwfxy6822k4pm19cwrilrg7hq4s7l";
        procMacro = true;
        libName = "curve25519_dalek_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1vmlphlrlw4f50z16p4bc9p5qwdni1ba95qmxfrrmzs6dh8lczzw";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = ["suggestions"];
          "diagnostics" = ["darling_core/diagnostics"];
          "suggestions" = ["darling_core/suggestions"];
        };
        resolvedDefaultFeatures = ["default" "suggestions"];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.11";
        edition = "2021";
        sha256 = "0bj1af6xl4ablnqbgn827m43b8fiicgv180749f5cphqdmcvj00d";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "extra-traits"];
          }
        ];
        features = {
          "strsim" = ["dep:strsim"];
          "suggestions" = ["strsim"];
        };
        resolvedDefaultFeatures = ["strsim" "suggestions"];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1bbfbc2px6sj1pqqq97bgqn6c8xdnb2fmz66f7f40nrqrcybjd7w";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "dashmap 5.5.3" = rec {
        crateName = "dashmap";
        version = "5.5.3";
        edition = "2018";
        sha256 = "0miqnlxi501vfbv6mw5jbmzgnj0wjrch3p4abvpd59s9v30lg1wp";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "inline" = ["hashbrown/inline-more"];
          "rayon" = ["dep:rayon"];
          "serde" = ["dep:serde"];
        };
      };
      "dashmap 6.1.0" = rec {
        crateName = "dashmap";
        version = "6.1.0";
        edition = "2018";
        sha256 = "1kvnw859xvrqyd1lk89na6797yvl5bri4wi9j0viz2a4j54wqhah";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = ["raw"];
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "inline" = ["hashbrown/inline-more"];
          "rayon" = ["dep:rayon"];
          "serde" = ["dep:serde"];
          "typesize" = ["dep:typesize"];
        };
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.9.0";
        edition = "2018";
        sha256 = "0xm46371aw613ghc12ay4vsnn49hpcmcwlijnqy8lbp2bpd308ra";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "der" = rec {
        crateName = "der";
        version = "0.7.10";
        edition = "2021";
        sha256 = "1jyxacyxdx6mxbkfw99jz59dzvcd9k17rq01a7xvn1dr6wl87hg7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "der_derive";
            packageId = "der_derive";
            optional = true;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468";
            optional = true;
            features = ["alloc"];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["zeroize?/alloc"];
          "arbitrary" = ["dep:arbitrary" "const-oid?/arbitrary" "std"];
          "bytes" = ["dep:bytes" "alloc"];
          "derive" = ["dep:der_derive"];
          "flagset" = ["dep:flagset"];
          "oid" = ["dep:const-oid"];
          "pem" = ["dep:pem-rfc7468" "alloc" "zeroize"];
          "std" = ["alloc"];
          "time" = ["dep:time"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["alloc" "derive" "oid" "pem" "std" "zeroize"];
      };
      "der_derive" = rec {
        crateName = "der_derive";
        version = "0.7.3";
        edition = "2021";
        sha256 = "065d2wy7zd0dank99hh58l5x7lv50hxnr7j6f3sphlb7i4ihjd40";
        procMacro = true;
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["extra-traits"];
          }
        ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.4.0";
        edition = "2021";
        sha256 = "13h6skwk411wzhf1l9l7d3yz5y6vg9d7s3dwhhb4a942r88nm7lw";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "macros" = ["dep:deranged-macros"];
          "num" = ["dep:num-traits"];
          "powerfmt" = ["dep:powerfmt"];
          "quickcheck" = ["dep:quickcheck" "alloc"];
          "rand" = ["rand08" "rand09"];
          "rand08" = ["dep:rand08"];
          "rand09" = ["dep:rand09"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "powerfmt" "serde" "std"];
      };
      "derive_more 1.0.0" = rec {
        crateName = "derive_more";
        version = "1.0.0";
        edition = "2021";
        sha256 = "01cd8pskdjg10dvfchi6b8a9pa1ja1ic0kbn45dl8jdyrfwrk6sa";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 1.0.0";
          }
        ];
        features = {
          "add" = ["derive_more-impl/add"];
          "add_assign" = ["derive_more-impl/add_assign"];
          "as_ref" = ["derive_more-impl/as_ref"];
          "constructor" = ["derive_more-impl/constructor"];
          "debug" = ["derive_more-impl/debug"];
          "default" = ["std"];
          "deref" = ["derive_more-impl/deref"];
          "deref_mut" = ["derive_more-impl/deref_mut"];
          "display" = ["derive_more-impl/display"];
          "error" = ["derive_more-impl/error"];
          "from" = ["derive_more-impl/from"];
          "from_str" = ["derive_more-impl/from_str"];
          "full" = ["add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap"];
          "index" = ["derive_more-impl/index"];
          "index_mut" = ["derive_more-impl/index_mut"];
          "into" = ["derive_more-impl/into"];
          "into_iterator" = ["derive_more-impl/into_iterator"];
          "is_variant" = ["derive_more-impl/is_variant"];
          "mul" = ["derive_more-impl/mul"];
          "mul_assign" = ["derive_more-impl/mul_assign"];
          "not" = ["derive_more-impl/not"];
          "sum" = ["derive_more-impl/sum"];
          "testing-helpers" = ["derive_more-impl/testing-helpers" "dep:rustc_version"];
          "try_from" = ["derive_more-impl/try_from"];
          "try_into" = ["derive_more-impl/try_into"];
          "try_unwrap" = ["derive_more-impl/try_unwrap"];
          "unwrap" = ["derive_more-impl/unwrap"];
        };
        resolvedDefaultFeatures = ["add" "debug" "default" "deref" "display" "from" "into" "std" "try_into"];
      };
      "derive_more 2.0.1" = rec {
        crateName = "derive_more";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0y3n97cc7rsvgnj211p92y1ppzh6jzvq5kvk6340ghkhfp7l4ch9";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 2.0.1";
          }
        ];
        features = {
          "add" = ["derive_more-impl/add"];
          "add_assign" = ["derive_more-impl/add_assign"];
          "as_ref" = ["derive_more-impl/as_ref"];
          "constructor" = ["derive_more-impl/constructor"];
          "debug" = ["derive_more-impl/debug"];
          "default" = ["std"];
          "deref" = ["derive_more-impl/deref"];
          "deref_mut" = ["derive_more-impl/deref_mut"];
          "display" = ["derive_more-impl/display"];
          "error" = ["derive_more-impl/error"];
          "from" = ["derive_more-impl/from"];
          "from_str" = ["derive_more-impl/from_str"];
          "full" = ["add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap"];
          "index" = ["derive_more-impl/index"];
          "index_mut" = ["derive_more-impl/index_mut"];
          "into" = ["derive_more-impl/into"];
          "into_iterator" = ["derive_more-impl/into_iterator"];
          "is_variant" = ["derive_more-impl/is_variant"];
          "mul" = ["derive_more-impl/mul"];
          "mul_assign" = ["derive_more-impl/mul_assign"];
          "not" = ["derive_more-impl/not"];
          "sum" = ["derive_more-impl/sum"];
          "testing-helpers" = ["derive_more-impl/testing-helpers" "dep:rustc_version"];
          "try_from" = ["derive_more-impl/try_from"];
          "try_into" = ["derive_more-impl/try_into"];
          "try_unwrap" = ["derive_more-impl/try_unwrap"];
          "unwrap" = ["derive_more-impl/unwrap"];
        };
        resolvedDefaultFeatures = ["debug" "default" "deref" "display" "from" "from_str" "std" "try_into"];
      };
      "derive_more-impl 1.0.0" = rec {
        crateName = "derive_more-impl";
        version = "1.0.0";
        edition = "2021";
        sha256 = "08mxyd456ygk68v5nfn4dyisn82k647w9ri2jl19dqpvmnp30wyb";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            optional = true;
          }
        ];
        features = {
          "as_ref" = ["syn/extra-traits" "syn/visit"];
          "debug" = ["syn/extra-traits" "dep:unicode-xid"];
          "display" = ["syn/extra-traits" "dep:unicode-xid"];
          "error" = ["syn/extra-traits"];
          "from" = ["syn/extra-traits"];
          "full" = ["add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap"];
          "into" = ["syn/extra-traits"];
          "is_variant" = ["dep:convert_case"];
          "mul" = ["syn/extra-traits"];
          "mul_assign" = ["syn/extra-traits"];
          "not" = ["syn/extra-traits"];
          "testing-helpers" = ["dep:rustc_version"];
          "try_into" = ["syn/extra-traits"];
          "try_unwrap" = ["dep:convert_case"];
          "unwrap" = ["dep:convert_case"];
        };
        resolvedDefaultFeatures = ["add" "debug" "default" "deref" "display" "from" "into" "try_into"];
      };
      "derive_more-impl 2.0.1" = rec {
        crateName = "derive_more-impl";
        version = "2.0.1";
        edition = "2021";
        sha256 = "1wqxcb7d5lzvpplz9szp4rwy1r23f5wmixz0zd2vcjscqknji9mx";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            optional = true;
          }
        ];
        features = {
          "as_ref" = ["syn/extra-traits" "syn/visit"];
          "debug" = ["syn/extra-traits" "dep:unicode-xid"];
          "display" = ["syn/extra-traits" "dep:unicode-xid"];
          "error" = ["syn/extra-traits"];
          "from" = ["syn/extra-traits"];
          "full" = ["add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap"];
          "into" = ["syn/extra-traits"];
          "is_variant" = ["dep:convert_case"];
          "mul" = ["syn/extra-traits"];
          "mul_assign" = ["syn/extra-traits"];
          "not" = ["syn/extra-traits"];
          "testing-helpers" = ["dep:rustc_version"];
          "try_into" = ["syn/extra-traits"];
          "try_unwrap" = ["dep:convert_case"];
          "unwrap" = ["dep:convert_case"];
        };
        resolvedDefaultFeatures = ["debug" "default" "deref" "display" "from" "from_str" "try_into"];
      };
      "deunicode" = rec {
        crateName = "deunicode";
        version = "1.6.2";
        edition = "2021";
        sha256 = "013biy7hhy59jcbry4dqn2pf4qhaw083ksn8xxiw373wjc37imdb";
        authors = [
          "Kornel Lesinski <kornel@geekhood.net>"
          "Amit Chowdhury <amitc97@gmail.com>"
        ];
        features = {
          "default" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default"];
      };
      "diatomic-waker" = rec {
        crateName = "diatomic-waker";
        version = "0.2.3";
        edition = "2021";
        sha256 = "0k7hkhb4pdjw6qmhvfrajgipdg3kgaxnss15b6gyxczyz83w20xb";
        libName = "diatomic_waker";
        authors = [
          "Asynchronics and contributors"
        ];
        features = {
          "default" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default"];
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = ["dep:blobby"];
          "block-buffer" = ["dep:block-buffer"];
          "const-oid" = ["dep:const-oid"];
          "core-api" = ["block-buffer"];
          "default" = ["core-api"];
          "dev" = ["blobby"];
          "mac" = ["subtle"];
          "oid" = ["const-oid"];
          "rand_core" = ["crypto-common/rand_core"];
          "std" = ["alloc" "crypto-common/std"];
          "subtle" = ["dep:subtle"];
        };
        resolvedDefaultFeatures = ["alloc" "block-buffer" "const-oid" "core-api" "default" "mac" "oid" "std" "subtle"];
      };
      "dirs-next" = rec {
        crateName = "dirs-next";
        version = "2.0.0";
        edition = "2018";
        sha256 = "1q9kr151h9681wwp6is18750ssghz6j9j7qm7qi1ngcwy7mzi35r";
        libName = "dirs_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs-sys-next";
            packageId = "dirs-sys-next";
          }
        ];
      };
      "dirs-sys-next" = rec {
        crateName = "dirs-sys-next";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0kavhavdxv4phzj4l0psvh55hszwnr0rcz8sxbvx20pyqi2a3gaf";
        libName = "dirs_sys_next";
        authors = [
          "The @xdg-rs members"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("redox" == target."os" or null);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["knownfolders" "objbase" "shlobj" "winbase" "winerror"];
          }
        ];
      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1q0alair462j21iiqwrr21iabkfnb13d6x5w95lkdg21q2xrqdlp";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        features = {
          "default" = ["std"];
        };
      };
      "dlopen2" = rec {
        crateName = "dlopen2";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1yjg27x20d0v65lji6l18amah5nlx8gciv64iqdz0zqp07qzbd09";
        authors = [
          "Szymon Wieloch <szymon.wieloch@gmail.com>"
          "Ahmed Masud <ahmed.masud@saf.ai>"
          "OpenByte <development.openbyte@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["winnt" "minwindef" "winerror" "libloaderapi" "errhandlingapi" "dbghelp" "processthreadsapi" "basetsd"];
          }
        ];
        features = {
          "default" = ["wrapper" "symbor" "derive"];
          "derive" = ["dlopen2_derive"];
          "dlopen2_derive" = ["dep:dlopen2_derive"];
        };
      };
      "dmp" = rec {
        crateName = "dmp";
        version = "0.2.3";
        edition = "2021";
        sha256 = "1ha3v8b9j16iqj7hyqhlv5biavqj4yl74as41bv3xzfz31xgqbdv";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "trice";
            packageId = "trice";
          }
          {
            name = "urlencoding";
            packageId = "urlencoding";
          }
        ];
      };
      "document-features" = rec {
        crateName = "document-features";
        version = "0.2.11";
        edition = "2018";
        sha256 = "0pdhpbz687fk2rkgz45yy3gvbhlxliwb7g1lj3jbx1f1qr89n94m";
        procMacro = true;
        libName = "document_features";
        libPath = "lib.rs";
        authors = [
          "Slint Developers <info@slint.dev>"
        ];
        dependencies = [
          {
            name = "litrs";
            packageId = "litrs";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "dotenvy" = rec {
        crateName = "dotenvy";
        version = "0.15.7";
        edition = "2018";
        crateBin = [];
        sha256 = "16s3n973n5aqym02692i1npb079n5mb0fwql42ikmwn8wnrrbbqs";
        authors = [
          "Noemi Lapresta <noemi.lapresta@gmail.com>"
          "Craig Hills <chills@gmail.com>"
          "Mike Piccolo <mfpiccolo@gmail.com>"
          "Alice Maz <alice@alicemaz.com>"
          "Sean Griffin <sean@seantheprogrammer.com>"
          "Adam Sharp <adam@sharplet.me>"
          "Arpad Borsos <arpad.borsos@googlemail.com>"
          "Allan Zhang <al@ayz.ai>"
        ];
        features = {
          "clap" = ["dep:clap"];
          "cli" = ["clap"];
        };
      };
      "double-ended-peekable" = rec {
        crateName = "double-ended-peekable";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0mvg19iw9a16hzzaq15g5gy9w6znxvf7mnlbqd91pmds1lf5xl60";
        libName = "double_ended_peekable";
      };
      "dtoa" = rec {
        crateName = "dtoa";
        version = "1.0.10";
        edition = "2018";
        sha256 = "016gid01rarcdv57h049d7nr9daxc2hc2gqzx0mji57krywd7bfn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = ["dep:no-panic"];
        };
      };
      "dtoa-short" = rec {
        crateName = "dtoa-short";
        version = "0.3.5";
        edition = "2015";
        sha256 = "11rwnkgql5jilsmwxpx6hjzkgyrbdmx1d71s0jyrjqm5nski25fd";
        libName = "dtoa_short";
        authors = [
          "Xidorn Quan <me@upsuper.org>"
        ];
        dependencies = [
          {
            name = "dtoa";
            packageId = "dtoa";
          }
        ];
      };
      "dyn-clone" = rec {
        crateName = "dyn-clone";
        version = "1.0.20";
        edition = "2018";
        sha256 = "0m956cxcg8v2n8kmz6xs5zl13k2fak3zkapzfzzp7pxih6hix26h";
        libName = "dyn_clone";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "earcutr" = rec {
        crateName = "earcutr";
        version = "0.4.3";
        edition = "2021";
        sha256 = "00dddrgzsrkbv8ifsmakcxwxrdzzgia7i6cy81y6imw5kbapw4kr";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
      };
      "ed25519" = rec {
        crateName = "ed25519";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0lydzdf26zbn82g7xfczcac9d7mzm3qgx934ijjrd5hjpjx32m8i";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["pkcs8?/alloc"];
          "default" = ["std"];
          "pem" = ["alloc" "pkcs8/pem"];
          "pkcs8" = ["dep:pkcs8"];
          "serde" = ["dep:serde"];
          "serde_bytes" = ["serde" "dep:serde_bytes"];
          "std" = ["pkcs8?/std" "signature/std"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["alloc" "pem" "pkcs8" "serde" "std"];
      };
      "ed25519-dalek" = rec {
        crateName = "ed25519-dalek";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1agcwij1z687hg26ngzwhnmpz29b2w56m8z1ap3pvrnfh709drvh";
        libName = "ed25519_dalek";
        authors = [
          "isis lovecruft <isis@patternsinthevoid.net>"
          "Tony Arcieri <bascule@gmail.com>"
          "Michael Rosenberg <michael@mrosenberg.pub>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = ["digest"];
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
            features = ["digest" "rand_core"];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "alloc" = ["curve25519-dalek/alloc" "ed25519/alloc" "serde?/alloc" "zeroize/alloc"];
          "asm" = ["sha2/asm"];
          "batch" = ["alloc" "merlin" "rand_core"];
          "default" = ["fast" "std" "zeroize"];
          "digest" = ["signature/digest"];
          "fast" = ["curve25519-dalek/precomputed-tables"];
          "legacy_compatibility" = ["curve25519-dalek/legacy_compatibility"];
          "merlin" = ["dep:merlin"];
          "pem" = ["alloc" "ed25519/pem" "pkcs8"];
          "pkcs8" = ["ed25519/pkcs8"];
          "rand_core" = ["dep:rand_core"];
          "serde" = ["dep:serde" "ed25519/serde"];
          "signature" = ["dep:signature"];
          "std" = ["alloc" "ed25519/std" "serde?/std" "sha2/std"];
          "zeroize" = ["dep:zeroize" "curve25519-dalek/zeroize"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "fast" "pem" "pkcs8" "rand_core" "serde" "std" "zeroize"];
      };
      "either" = rec {
        crateName = "either";
        version = "1.15.0";
        edition = "2021";
        sha256 = "069p1fknsmzn9llaizh77kip0pqmcwpdsykv2x30xpjyija5gis8";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc" "derive"];
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std" "use_std"];
      };
      "embedded-io 0.4.0" = rec {
        crateName = "embedded-io";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1v9wrc5nsgaaady7i3ya394sik5251j0iq5rls7mrx7fv696h6pg";
        libName = "embedded_io";
        features = {
          "defmt" = ["dep:defmt"];
          "futures" = ["std" "async" "dep:futures"];
          "log" = ["dep:log"];
          "std" = ["alloc" "futures?/std"];
          "tokio" = ["std" "async" "dep:tokio"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "embedded-io 0.6.1" = rec {
        crateName = "embedded-io";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0v901xykajh3zffn6x4cnn4fhgfw3c8qpjwbsk6gai3gaccg3l7d";
        libName = "embedded_io";
        features = {
          "defmt-03" = ["dep:defmt-03"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "ena" = rec {
        crateName = "ena";
        version = "0.14.3";
        edition = "2015";
        sha256 = "1m9a5hqk6qn5sqnrc40b55yr97drkfdzd0jj863ksqff8gfqn91x";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "dogged" = ["dep:dogged"];
          "persistent" = ["dogged"];
        };
      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.35";
        edition = "2018";
        sha256 = "1wv64xdrr9v37rqqdjsyb8l8wzlcbab80ryxhrszvnj59wy0y0vm";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "any_all_workaround" = ["dep:any_all_workaround"];
          "default" = ["alloc"];
          "fast-legacy-encode" = ["fast-hangul-encode" "fast-hanja-encode" "fast-kanji-encode" "fast-gb-hanzi-encode" "fast-big5-hanzi-encode"];
          "serde" = ["dep:serde"];
          "simd-accel" = ["any_all_workaround"];
        };
        resolvedDefaultFeatures = ["alloc" "default"];
      };
      "endian-type" = rec {
        crateName = "endian-type";
        version = "0.1.2";
        edition = "2015";
        sha256 = "0bbh88zaig1jfqrm7w3gx0pz81kw2jakk3055vbgapw3dmk08ky3";
        libName = "endian_type";
        authors = [
          "Lolirofle <lolipopple@hotmail.com>"
        ];
      };
      "enum-as-inner" = rec {
        crateName = "enum-as-inner";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1g3cywc65d9w974l2xy86ij13njss3qjc7b0kfbzbws9qrjs5rm1";
        procMacro = true;
        libName = "enum_as_inner";
        authors = [
          "Benjamin Fry <benjaminfry@me.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "enumflags2" = rec {
        crateName = "enumflags2";
        version = "0.7.12";
        edition = "2018";
        sha256 = "1vzcskg4dca2jiflsfx1p9yw1fvgzcakcs7cpip0agl51ilgf9qh";
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "enumflags2_derive";
            packageId = "enumflags2_derive";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "enumflags2_derive" = rec {
        crateName = "enumflags2_derive";
        version = "0.7.12";
        edition = "2018";
        sha256 = "09rqffacafl1b83ir55hrah9gza0x7pzjn6lr6jm76fzix6qmiv7";
        procMacro = true;
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["parsing" "printing" "derive" "proc-macro"];
          }
        ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.2";
        edition = "2015";
        sha256 = "03swzqznragy8n0x31lqc78g2af054jwivp7lkrbrc0khz74lyl7";
      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.13";
        edition = "2018";
        sha256 = "1bd5g3srn66zr3bspac0150bvpg1s7zi6zwhwhlayivciz12m3kp";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_System_Diagnostics_Debug"];
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["libc/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "etcetera" = rec {
        crateName = "etcetera";
        version = "0.8.0";
        edition = "2018";
        sha256 = "0hxrsn75dirbjhwgkdkh0pnpqrnq17ypyhjpjaypgax1hd91nv8k";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "home";
            packageId = "home";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_UI_Shell"];
          }
        ];
      };
      "event-listener" = rec {
        crateName = "event-listener";
        version = "5.4.1";
        edition = "2021";
        sha256 = "1asnp3agbr8shcl001yd935m167ammyi8hnvl0q1ycajryn6cfz1";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "critical-section" = ["dep:critical-section"];
          "default" = ["std"];
          "loom" = ["concurrent-queue/loom" "parking?/loom" "dep:loom"];
          "parking" = ["dep:parking"];
          "portable-atomic" = ["portable-atomic-util" "portable_atomic_crate" "concurrent-queue/portable-atomic"];
          "portable-atomic-util" = ["dep:portable-atomic-util"];
          "portable_atomic_crate" = ["dep:portable_atomic_crate"];
          "std" = ["concurrent-queue/std" "parking"];
        };
        resolvedDefaultFeatures = ["default" "parking" "std"];
      };
      "event-listener-strategy" = rec {
        crateName = "event-listener-strategy";
        version = "0.5.4";
        edition = "2021";
        sha256 = "14rv18av8s7n8yixg38bxp5vg2qs394rl1w052by5npzmbgz7scb";
        libName = "event_listener_strategy";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = ["std"];
          "loom" = ["event-listener/loom"];
          "portable-atomic" = ["event-listener/portable-atomic"];
          "std" = ["event-listener/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "ext-sort" = rec {
        crateName = "ext-sort";
        version = "0.1.5";
        edition = "2021";
        crateBin = [];
        sha256 = "0s9mi0s0ir0iqjrijhnlgwrgfw36rcx4b31b10w1siycdc2knpfg";
        libName = "ext_sort";
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "rmp-serde";
            packageId = "rmp-serde";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "bytesize" = ["dep:bytesize"];
          "clap" = ["dep:clap"];
          "deepsize" = ["dep:deepsize"];
          "env_logger" = ["dep:env_logger"];
          "memory-limit" = ["deepsize"];
        };
      };
      "fallible-iterator" = rec {
        crateName = "fallible-iterator";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0ja6l56yka5vn4y4pk6hn88z0bpny7a8k1919aqjzp0j1yhy9k1a";
        libName = "fallible_iterator";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        features = {
          "default" = ["alloc"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default"];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.3.0";
        edition = "2018";
        sha256 = "1ghiahsw1jd68df895cy5h3gzwk30hndidn3b682zmshpgmrx41p";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = ["std"];
          "getrandom" = ["dep:getrandom"];
          "js" = ["std" "getrandom"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "fiat-crypto" = rec {
        crateName = "fiat-crypto";
        version = "0.2.9";
        edition = "2018";
        sha256 = "07c1vknddv3ak7w89n85ik0g34nzzpms6yb845vrjnv9m4csbpi8";
        libName = "fiat_crypto";
        authors = [
          "Fiat Crypto library authors <jgross@mit.edu>"
        ];
        features = {
          "default" = ["std"];
        };
      };
      "find-crate" = rec {
        crateName = "find-crate";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1ljpkh11gj7940xwz47xjhsvfbl93c2q0ql7l2v0w77amjx8paar";
        libName = "find_crate";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "toml";
            packageId = "toml";
          }
        ];
      };
      "fixedbitset 0.4.2" = rec {
        crateName = "fixedbitset";
        version = "0.4.2";
        edition = "2015";
        sha256 = "101v41amgv5n9h4hcghvrbfk5vrncx1jwm35rn5szv4rk55i7rqc";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
      };
      "fixedbitset 0.5.7" = rec {
        crateName = "fixedbitset";
        version = "0.5.7";
        edition = "2021";
        sha256 = "16fd3v9d2cms2vddf9xhlm56sz4j0zgrk3d2h6v1l7hx760lwrqx";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
      };
      "float_next_after" = rec {
        crateName = "float_next_after";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1s7ikn69b394frihag05b0qcw9i9y04qanlhp5c8sjrw70bcrxwb";
        authors = [
          "Bronson Brown-deVost <bronsonbdevost@gmail.com>"
        ];
      };
      "fluent" = rec {
        crateName = "fluent";
        version = "0.16.1";
        edition = "2021";
        sha256 = "0njmdpwz52yjzyp55iik9k6vrixqiy7190d98pk0rgdy0x3n6x5v";
        authors = [
          "Zibi Braniecki <zibi@unicode.org>"
          "Staś Małolepszy <stas@mozilla.com>"
        ];
        dependencies = [
          {
            name = "fluent-bundle";
            packageId = "fluent-bundle";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        features = {
          "fluent-pseudo" = ["dep:fluent-pseudo"];
        };
      };
      "fluent-bundle" = rec {
        crateName = "fluent-bundle";
        version = "0.15.3";
        edition = "2021";
        sha256 = "14zl0cjn361is69pb1zry4k2zzh5nzsfv0iz05wccl00x0ga5q3z";
        libName = "fluent_bundle";
        authors = [
          "Zibi Braniecki <zibi@unicode.org>"
          "Staś Małolepszy <stas@mozilla.com>"
        ];
        dependencies = [
          {
            name = "fluent-langneg";
            packageId = "fluent-langneg";
          }
          {
            name = "fluent-syntax";
            packageId = "fluent-syntax";
          }
          {
            name = "intl-memoizer";
            packageId = "intl-memoizer";
          }
          {
            name = "intl_pluralrules";
            packageId = "intl_pluralrules";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "self_cell";
            packageId = "self_cell 0.10.3";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        devDependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = ["macros"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "fluent-langneg" = rec {
        crateName = "fluent-langneg";
        version = "0.13.0";
        edition = "2018";
        sha256 = "152yxplc11vmxkslvmaqak9x86xnavnhdqyhrh38ym37jscd0jic";
        libName = "fluent_langneg";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        devDependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = ["macros"];
          }
        ];
        features = {
          "cldr" = ["unic-langid/likelysubtags"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "fluent-syntax" = rec {
        crateName = "fluent-syntax";
        version = "0.11.1";
        edition = "2021";
        crateBin = [];
        sha256 = "0gd3cdvsx9ymbb8hijcsc9wyf8h1pbcbpsafg4ldba56ji30qlra";
        libName = "fluent_syntax";
        authors = [
          "Zibi Braniecki <zibi@unicode.org>"
          "Staś Małolepszy <stas@mozilla.com>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "json" = ["serde" "serde_json"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "flume" = rec {
        crateName = "flume";
        version = "0.11.1";
        edition = "2018";
        sha256 = "15ch0slxa8sqsi6c73a0ky6vdnh48q8cxjf7rksa3243m394s3ns";
        authors = [
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            rename = "spin1";
            features = ["mutex"];
          }
        ];
        features = {
          "async" = ["futures-sink" "futures-core"];
          "default" = ["async" "select" "eventual-fairness"];
          "eventual-fairness" = ["select" "nanorand"];
          "futures-core" = ["dep:futures-core"];
          "futures-sink" = ["dep:futures-sink"];
          "nanorand" = ["dep:nanorand"];
        };
        resolvedDefaultFeatures = ["async" "futures-core" "futures-sink"];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "foldhash" = rec {
        crateName = "foldhash";
        version = "0.1.5";
        edition = "2021";
        sha256 = "1wisr1xlc2bj7hk4rgkcjkz3j2x4dhd1h9lwk7mj8p71qpdgbi6r";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["percent-encoding/alloc"];
          "default" = ["std"];
          "std" = ["alloc" "percent-encoding/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "fst" = rec {
        crateName = "fst";
        version = "0.4.7";
        edition = "2018";
        sha256 = "06mnksicgv9rp8b7w0ykkshf355l05zym3ygm74qr5z30ndmpf3s";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "levenshtein" = ["utf8-ranges"];
          "utf8-ranges" = ["dep:utf8-ranges"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "funty" = rec {
        crateName = "funty";
        version = "2.0.0";
        edition = "2018";
        sha256 = "177w048bm0046qlzvp33ag3ghqkqw4ncpzcm5lq36gxf2lla7mg6";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = ["std"];
        };
      };
      "futf" = rec {
        crateName = "futf";
        version = "0.1.5";
        edition = "2015";
        sha256 = "0hvqk2r7v4fnc34hvc3vkri89gn52d5m9ihygmwn75l1hhp0whnz";
        authors = [
          "Keegan McAllister <kmcallister@mozilla.com>"
        ];
        dependencies = [
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
        ];
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0xh8ddbkm9jy8kc5gbvjp9a4b6rqqxvc8471yb2qaz5wm2qhgg35";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = ["sink"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["sink"];
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc"];
          "async-await" = ["futures-util/async-await" "futures-util/async-await-macro"];
          "bilock" = ["futures-util/bilock"];
          "compat" = ["std" "futures-util/compat"];
          "default" = ["std" "async-await" "executor"];
          "executor" = ["std" "futures-executor/std"];
          "futures-executor" = ["dep:futures-executor"];
          "io-compat" = ["compat" "futures-util/io-compat"];
          "std" = ["alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel"];
          "thread-pool" = ["executor" "futures-executor/thread-pool"];
          "unstable" = ["futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable"];
          "write-all-vectored" = ["futures-util/write-all-vectored"];
        };
        resolvedDefaultFeatures = ["alloc" "async-await" "default" "executor" "futures-executor" "std"];
      };
      "futures-buffered" = rec {
        crateName = "futures-buffered";
        version = "0.2.12";
        edition = "2021";
        sha256 = "1z8qq6plpgxdln4dkscbk35prwc2f0vys7p2pnms8yy0ivry3q58";
        libName = "futures_buffered";
        authors = [
          "Conrad Ludgate <conradludgate@gmail.com"
        ];
        dependencies = [
          {
            name = "cordyceps";
            packageId = "cordyceps";
          }
          {
            name = "diatomic-waker";
            packageId = "diatomic-waker";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "spin";
            packageId = "spin 0.10.0";
            usesDefaultFeatures = false;
            features = ["spin_mutex"];
          }
        ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc"];
          "default" = ["std"];
          "futures-sink" = ["dep:futures-sink"];
          "sink" = ["futures-sink"];
          "std" = ["alloc" "futures-core/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "futures-sink" "sink" "std"];
      };
      "futures-concurrency" = rec {
        crateName = "futures-concurrency";
        version = "7.6.3";
        edition = "2021";
        sha256 = "1licaxi1xqj40h6pfnl8xm3smv7ab5n5isjbxmvy9wlivwbq1dhf";
        libName = "futures_concurrency";
        authors = [
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.5.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-buffered";
            packageId = "futures-buffered";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project";
            packageId = "pin-project 1.1.10";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["dep:fixedbitset" "dep:slab" "dep:smallvec" "futures-lite/alloc"];
          "default" = ["std"];
          "std" = ["alloc" "futures-lite/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = ["std"];
          "portable-atomic" = ["dep:portable-atomic"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.31";
        edition = "2018";
        sha256 = "17vcci6mdfzx4gbk0wx64chr2f13wwwpvyf3xd5fb1gmjzcx2a0y";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "num_cpus" = ["dep:num_cpus"];
          "std" = ["futures-core/std" "futures-task/std" "futures-util/std"];
          "thread-pool" = ["std" "num_cpus"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "futures-intrusive" = rec {
        crateName = "futures-intrusive";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0vwm08d1pli6bdaj0i7xhk3476qlx4pll6i0w03gzdnh7lh0r4qx";
        libName = "futures_intrusive";
        authors = [
          "Matthias Einwag <matthias.einwag@live.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc"];
          "default" = ["std"];
          "parking_lot" = ["dep:parking_lot"];
          "std" = ["alloc" "parking_lot"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "parking_lot" "std"];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "futures-lite" = rec {
        crateName = "futures-lite";
        version = "2.6.1";
        edition = "2021";
        sha256 = "1ba4dg26sc168vf60b1a23dv1d8rcf3v3ykz2psb7q70kxh113pp";
        libName = "futures_lite";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = ["race" "std"];
          "fastrand" = ["dep:fastrand"];
          "futures-io" = ["dep:futures-io"];
          "memchr" = ["dep:memchr"];
          "parking" = ["dep:parking"];
          "race" = ["fastrand"];
          "std" = ["alloc" "fastrand/std" "futures-io" "parking"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "fastrand" "futures-io" "parking" "race" "std"];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "futures-timer" = rec {
        crateName = "futures-timer";
        version = "3.0.3";
        edition = "2018";
        sha256 = "094vw8k37djpbwv74bwf2qb7n6v6ghif4myss6smd6hgyajb127j";
        libName = "futures_timer";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "gloo-timers" = ["dep:gloo-timers"];
          "send_wrapper" = ["dep:send_wrapper"];
          "wasm-bindgen" = ["gloo-timers" "send_wrapper"];
        };
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["futures-core/alloc" "futures-task/alloc"];
          "async-await-macro" = ["async-await" "futures-macro"];
          "channel" = ["std" "futures-channel"];
          "compat" = ["std" "futures_01"];
          "default" = ["std" "async-await" "async-await-macro"];
          "futures-channel" = ["dep:futures-channel"];
          "futures-io" = ["dep:futures-io"];
          "futures-macro" = ["dep:futures-macro"];
          "futures-sink" = ["dep:futures-sink"];
          "futures_01" = ["dep:futures_01"];
          "io" = ["std" "futures-io" "memchr"];
          "io-compat" = ["io" "compat" "tokio-io"];
          "memchr" = ["dep:memchr"];
          "portable-atomic" = ["futures-core/portable-atomic"];
          "sink" = ["futures-sink"];
          "slab" = ["dep:slab"];
          "std" = ["alloc" "futures-core/std" "futures-task/std" "slab"];
          "tokio-io" = ["dep:tokio-io"];
          "unstable" = ["futures-core/unstable" "futures-task/unstable"];
          "write-all-vectored" = ["io"];
        };
        resolvedDefaultFeatures = ["alloc" "async-await" "async-await-macro" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std"];
      };
      "futures_codec" = rec {
        crateName = "futures_codec";
        version = "0.4.1";
        edition = "2018";
        sha256 = "0nzadpxhdxdlnlk2f0gfn0qbifqc3pbnzm10v4z04x8ciczxcm6f";
        authors = [
          "Matt Hunzinger <matthunz2@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pin-project";
            packageId = "pin-project 0.4.30";
          }
        ];
        features = {
          "cbor" = ["serde" "serde_cbor"];
          "json" = ["serde" "serde_json"];
          "serde" = ["dep:serde"];
          "serde_cbor" = ["dep:serde_cbor"];
          "serde_json" = ["dep:serde_json"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "fuzzy-matcher" = rec {
        crateName = "fuzzy-matcher";
        version = "0.3.7";
        edition = "2018";
        sha256 = "153csv8rsk2vxagb68kpmiknvdd3bzqj03x805khckck28rllqal";
        libName = "fuzzy_matcher";
        authors = [
          "Jinzhou Zhang <lotabout@gmail.com>"
        ];
        dependencies = [
          {
            name = "thread_local";
            packageId = "thread_local";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "generator" = rec {
        crateName = "generator";
        version = "0.8.5";
        edition = "2021";
        sha256 = "09v88ic14jypd6sl1g3bqcp2a07r2h4lgxzidisgzy5pdjkp116i";
        authors = [
          "Xudong Huang <huangxu008@hotmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "windows";
            packageId = "windows 0.61.3";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_System_Memory" "Win32_System_Kernel" "Win32_Foundation" "Win32_System_SystemInformation" "Win32_System_Diagnostics_Debug"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["more_lengths" "zeroize"];
      };
      "geo" = rec {
        crateName = "geo";
        version = "0.28.0";
        edition = "2021";
        sha256 = "00a5113izs2276ra1n52km958wnv0nhd5p10lsgj8s9aj5izc4gq";
        dependencies = [
          {
            name = "earcutr";
            packageId = "earcutr";
            optional = true;
          }
          {
            name = "float_next_after";
            packageId = "float_next_after";
          }
          {
            name = "geo-types";
            packageId = "geo-types";
            features = ["approx" "use-rstar_0_12"];
          }
          {
            name = "geographiclib-rs";
            packageId = "geographiclib-rs";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "robust";
            packageId = "robust";
          }
          {
            name = "rstar";
            packageId = "rstar";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = ["derive"];
          }
          {
            name = "spade";
            packageId = "spade";
            optional = true;
          }
        ];
        features = {
          "default" = ["earcutr" "spade"];
          "earcutr" = ["dep:earcutr"];
          "proj" = ["dep:proj"];
          "proj-network" = ["use-proj" "proj/network"];
          "serde" = ["dep:serde"];
          "spade" = ["dep:spade"];
          "use-proj" = ["proj"];
          "use-serde" = ["serde" "geo-types/serde"];
        };
        resolvedDefaultFeatures = ["default" "earcutr" "serde" "spade" "use-serde"];
      };
      "geo-types" = rec {
        crateName = "geo-types";
        version = "0.7.17";
        edition = "2021";
        sha256 = "16gwycl3k638spga0crqipbcjrgxd6pykg43gixcicimkpbdr93m";
        libName = "geo_types";
        dependencies = [
          {
            name = "approx";
            packageId = "approx 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["libm"];
          }
          {
            name = "rstar";
            packageId = "rstar";
            rename = "rstar_0_12";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc" "derive"];
          }
        ];
        devDependencies = [
          {
            name = "approx";
            packageId = "approx 0.5.1";
          }
        ];
        features = {
          "approx" = ["dep:approx"];
          "arbitrary" = ["dep:arbitrary"];
          "default" = ["std"];
          "multithreading" = ["rayon"];
          "rayon" = ["dep:rayon"];
          "rstar" = ["rstar_0_8"];
          "rstar_0_10" = ["dep:rstar_0_10"];
          "rstar_0_11" = ["dep:rstar_0_11"];
          "rstar_0_12" = ["dep:rstar_0_12"];
          "rstar_0_8" = ["dep:rstar_0_8"];
          "rstar_0_9" = ["dep:rstar_0_9"];
          "serde" = ["dep:serde"];
          "std" = ["approx?/std" "num-traits/std" "serde?/std"];
          "use-rstar" = ["use-rstar_0_8"];
          "use-rstar_0_10" = ["rstar_0_10" "approx"];
          "use-rstar_0_11" = ["rstar_0_11" "approx"];
          "use-rstar_0_12" = ["rstar_0_12" "approx"];
          "use-rstar_0_8" = ["rstar_0_8" "approx"];
          "use-rstar_0_9" = ["rstar_0_9" "approx"];
        };
        resolvedDefaultFeatures = ["approx" "default" "rstar_0_12" "serde" "std" "use-rstar_0_12"];
      };
      "geographiclib-rs" = rec {
        crateName = "geographiclib-rs";
        version = "0.2.5";
        edition = "2018";
        crateBin = [];
        sha256 = "0hbqkaxb2hld74kswrkf1cza0y53j8g8s4lalwlslzmk5c5084gn";
        libName = "geographiclib_rs";
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "accurate" = ["dep:accurate"];
          "default" = ["accurate"];
        };
      };
      "getrandom 0.2.16" = rec {
        crateName = "getrandom";
        version = "0.2.16";
        edition = "2018";
        sha256 = "14l5aaia20cc6cc08xdlhrzmfcylmrnprwnna20lqf746pqzjprk";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.1+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "js" = ["wasm-bindgen" "js-sys"];
          "js-sys" = ["dep:js-sys"];
          "rustc-dep-of-std" = ["compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std"];
          "wasm-bindgen" = ["dep:wasm-bindgen"];
        };
        resolvedDefaultFeatures = ["js" "js-sys" "std" "wasm-bindgen"];
      };
      "getrandom 0.3.3" = rec {
        crateName = "getrandom";
        version = "0.3.3";
        edition = "2021";
        sha256 = "1x6jl875zp6b2b6qp9ghc84b0l76bvng2lvm8zfcmwjl7rb5w516";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)) && (builtins.elem "atomics" targetFeatures));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((("linux" == target."os" or null) || ("android" == target."os" or null)) && (!((("linux" == target."os" or null) && ("" == target."env" or null)) || ("custom" == target."getrandom_backend" or null) || ("linux_raw" == target."getrandom_backend" or null) || ("rdrand" == target."getrandom_backend" or null) || ("rndr" == target."getrandom_backend" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("hurd" == target."os" or null) || ("illumos" == target."os" or null) || ("cygwin" == target."os" or null) || (("horizon" == target."os" or null) && ("arm" == target."arch" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("haiku" == target."os" or null) || ("redox" == target."os" or null) || ("nto" == target."os" or null) || ("aix" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("ios" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("macos" == target."os" or null) || ("openbsd" == target."os" or null) || ("vita" == target."os" or null) || ("emscripten" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("netbsd" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("solaris" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("vxworks" == target."os" or null);
          }
          {
            name = "r-efi";
            packageId = "r-efi";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("uefi" == target."os" or null) && ("efi_rng" == target."getrandom_backend" or null));
          }
          {
            name = "wasi";
            packageId = "wasi 0.14.2+wasi-0.2.4";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null) && ("p2" == target."env" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
          }
        ];
        features = {
          "rustc-dep-of-std" = ["dep:compiler_builtins" "dep:core"];
          "wasm_js" = ["dep:wasm-bindgen" "dep:js-sys"];
        };
        resolvedDefaultFeatures = ["std" "wasm_js"];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        features = {
          "default" = ["read-all" "write"];
          "endian-reader" = ["read" "dep:stable_deref_trait"];
          "fallible-iterator" = ["dep:fallible-iterator"];
          "read" = ["read-core"];
          "read-all" = ["read" "std" "fallible-iterator" "endian-reader"];
          "rustc-dep-of-std" = ["dep:core" "dep:alloc" "dep:compiler_builtins"];
          "std" = ["fallible-iterator?/std" "stable_deref_trait?/std"];
          "write" = ["dep:indexmap"];
        };
        resolvedDefaultFeatures = ["read" "read-core"];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cm2w34b5w45fxr522h5b0fv1bxchfswcj560m3pnjbia7asvld8";
        authors = [
          "The Rust Project Developers"
        ];
      };
      "gloo-timers" = rec {
        crateName = "gloo-timers";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1519157n7xppkk6pdw5w52vy1llzn5iljkqd7q1h5609jv7l7cdv";
        libName = "gloo_timers";
        authors = [
          "Rust and WebAssembly Working Group"
        ];
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "futures" = ["futures-core" "futures-channel"];
          "futures-channel" = ["dep:futures-channel"];
          "futures-core" = ["dep:futures-core"];
        };
        resolvedDefaultFeatures = ["default" "futures" "futures-channel" "futures-core"];
      };
      "h2" = rec {
        crateName = "h2";
        version = "0.4.11";
        edition = "2021";
        sha256 = "118771sqbsa6cn48y9waxq24jx80f5xy8af0lq5ixq7ifsi51nhp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = ["std"];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["codec" "io"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["rt-multi-thread" "macros" "sync" "net"];
          }
        ];
        features = {
        };
      };
      "half" = rec {
        crateName = "half";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1j83v0xaqvrw50ppn0g33zig0zsbdi7xiqbzgn7sd5al57nrd4a5";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = {
              target,
              features,
            }: ("spirv" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "bytemuck" = ["dep:bytemuck"];
          "default" = ["std"];
          "num-traits" = ["dep:num-traits"];
          "rand_distr" = ["dep:rand" "dep:rand_distr"];
          "rkyv" = ["dep:rkyv"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
          "zerocopy" = ["dep:zerocopy"];
        };
      };
      "hash32 0.2.1" = rec {
        crateName = "hash32";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0rrbv5pc5b1vax6j6hk7zvlrpw0h6aybshxy9vbpgsrgfrc5zhxh";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];
      };
      "hash32 0.3.1" = rec {
        crateName = "hash32";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01h68z8qi5gl9lnr17nz10lay8wjiidyjdyd60kqx8ibj090pmj7";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];
      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.7.8";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "ahash-compile-time-rng" = ["ahash/compile-time-rng"];
          "alloc" = ["dep:alloc"];
          "bumpalo" = ["dep:bumpalo"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["ahash" "inline-more"];
          "rayon" = ["dep:rayon"];
          "rustc-dep-of-std" = ["nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["ahash" "default" "inline-more" "raw"];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "alloc" = ["dep:alloc"];
          "allocator-api2" = ["dep:allocator-api2"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["ahash" "inline-more" "allocator-api2"];
          "equivalent" = ["dep:equivalent"];
          "nightly" = ["allocator-api2?/nightly" "bumpalo/allocator_api"];
          "rayon" = ["dep:rayon"];
          "rkyv" = ["dep:rkyv"];
          "rustc-dep-of-std" = ["nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["inline-more" "raw"];
      };
      "hashbrown 0.15.4" = rec {
        crateName = "hashbrown";
        version = "0.15.4";
        edition = "2021";
        sha256 = "1mg045sm1nm00cwjm7ndi80hcmmv1v3z7gnapxyhd9qxc62sqwar";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "equivalent";
            packageId = "equivalent";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "foldhash";
            packageId = "foldhash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "allocator-api2" = ["dep:allocator-api2"];
          "core" = ["dep:core"];
          "default" = ["default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry"];
          "default-hasher" = ["dep:foldhash"];
          "equivalent" = ["dep:equivalent"];
          "nightly" = ["bumpalo/allocator_api"];
          "rayon" = ["dep:rayon"];
          "rustc-dep-of-std" = ["nightly" "core" "alloc" "rustc-internal-api"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["allocator-api2" "default" "default-hasher" "equivalent" "inline-more" "raw-entry"];
      };
      "hashlink" = rec {
        crateName = "hashlink";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1h8lzvnl9qxi3zyagivzz2p1hp6shgddfmccyf6jv7s1cdicz0kk";
        authors = [
          "kyren <kerriganw@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
            features = ["default-hasher" "inline-more"];
          }
        ];
        features = {
          "serde" = ["dep:serde"];
          "serde_impl" = ["serde"];
        };
      };
      "headers" = rec {
        crateName = "headers";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1sr4zygaq1b2f0k7b5l8vx5vp05wvd82w7vpavgvr52xvdd4scdk";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "headers-core";
            packageId = "headers-core";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
        ];
        features = {
        };
      };
      "headers-core" = rec {
        crateName = "headers-core";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1r1w80i2bhmyh8s5mjr2dz6baqlrm6cak6yvzm4jq96lacjs5d2l";
        libName = "headers_core";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http";
          }
        ];
      };
      "heapless 0.7.17" = rec {
        crateName = "heapless";
        version = "0.7.17";
        edition = "2018";
        sha256 = "0kwn2wzk9fnsqnwp6rqjqhvh6hfq4rh225xwqjm72b5n1ry4bind";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Per Lindgren <per.lindgren@ltu.se>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            optional = true;
            target = {
              target,
              features,
            }: ("avr" == target."arch" or null);
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "riscv32i-unknown-none-elf");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "riscv32imc-unknown-none-elf");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "thumbv6m-none-eabi");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "xtensa-esp32s2-none-elf");
          }
          {
            name = "hash32";
            packageId = "hash32 0.2.1";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            target = {
              target,
              features,
            }: ("x86_64" == target."arch" or null);
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "atomic-polyfill" = ["dep:atomic-polyfill"];
          "cas" = ["atomic-polyfill"];
          "default" = ["cas"];
          "defmt" = ["dep:defmt"];
          "defmt-impl" = ["defmt"];
          "serde" = ["dep:serde"];
          "ufmt-impl" = ["ufmt-write"];
          "ufmt-write" = ["dep:ufmt-write"];
        };
        resolvedDefaultFeatures = ["atomic-polyfill" "cas" "serde"];
      };
      "heapless 0.8.0" = rec {
        crateName = "heapless";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1b9zpdjv4qkl2511s2c80fz16fx9in4m9qkhbaa8j73032v9xyqb";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Per Lindgren <per.lindgren@ltu.se>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "hash32";
            packageId = "hash32 0.3.1";
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "defmt-03" = ["dep:defmt"];
          "portable-atomic" = ["dep:portable-atomic"];
          "portable-atomic-critical-section" = ["dep:portable-atomic" "portable-atomic" "portable-atomic?/critical-section"];
          "portable-atomic-unsafe-assume-single-core" = ["dep:portable-atomic" "portable-atomic" "portable-atomic?/unsafe-assume-single-core"];
          "serde" = ["dep:serde"];
          "ufmt" = ["dep:ufmt-write"];
        };
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";
      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1744vaqkczpwncfy960j2hxrbjl1q01csm84jpd9dajbdr2yy3zw";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core" "alloc"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "hickory-proto" = rec {
        crateName = "hickory-proto";
        version = "0.25.2";
        edition = "2021";
        sha256 = "00k5dk572p0bsrnvsqv1yi8mwfpgwyj7q8bgiacri083q1bgx9pq";
        libName = "hickory_proto";
        authors = [
          "The contributors to Hickory DNS"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "enum-as-inner";
            packageId = "enum-as-inner";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "idna";
            packageId = "idna";
            usesDefaultFeatures = false;
            features = ["alloc" "compiled_data"];
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = ["critical-section"];
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
            usesDefaultFeatures = false;
            features = ["alloc" "std_rng"];
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            features = ["std"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = ["alloc"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = ["io-util" "macros"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "url";
            packageId = "url";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["rt" "time" "macros"];
          }
        ];
        features = {
          "__dnssec" = ["dep:bitflags" "dep:rustls-pki-types" "dep:time" "std"];
          "__h3" = ["dep:h3" "dep:h3-quinn" "dep:http" "std"];
          "__https" = ["dep:bytes" "dep:h2" "dep:http" "std"];
          "__quic" = ["dep:bytes" "dep:pin-project-lite" "dep:quinn" "std"];
          "__tls" = ["dep:bytes" "dep:rustls" "dep:tokio-rustls" "std" "tokio"];
          "backtrace" = ["dep:backtrace" "std"];
          "default" = ["std" "tokio"];
          "dnssec-aws-lc-rs" = ["dep:aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/ring-io" "__dnssec"];
          "dnssec-ring" = ["dep:ring" "__dnssec"];
          "futures-io" = ["dep:futures-io"];
          "h3-aws-lc-rs" = ["quic-aws-lc-rs" "__h3"];
          "h3-ring" = ["quic-ring" "__h3"];
          "https-aws-lc-rs" = ["tls-aws-lc-rs" "__https"];
          "https-ring" = ["tls-ring" "__https"];
          "mdns" = ["socket2/all" "std"];
          "no-std-rand" = ["once_cell/critical-section" "dep:critical-section"];
          "quic-aws-lc-rs" = ["quinn/rustls-aws-lc-rs" "tls-aws-lc-rs" "__quic"];
          "quic-ring" = ["quinn/rustls-ring" "tls-ring" "__quic"];
          "rustls-platform-verifier" = ["dep:rustls-platform-verifier" "std"];
          "serde" = ["dep:serde" "std" "url/serde"];
          "socket2" = ["dep:socket2"];
          "std" = ["data-encoding/std" "futures-channel/std" "futures-io/std" "futures-util/std" "ipnet/std" "rand/std" "rand/thread_rng" "ring?/std" "thiserror/std" "tracing-subscriber/env-filter" "tracing-subscriber/fmt" "tracing-subscriber/std" "tracing/std" "url/std"];
          "testing" = ["std"];
          "text-parsing" = ["std"];
          "tls-aws-lc-rs" = ["tokio-rustls/aws-lc-rs" "__tls"];
          "tls-ring" = ["tokio-rustls/ring" "__tls"];
          "tokio" = ["dep:tokio" "std" "tokio/net" "tokio/rt" "tokio/time" "tokio/rt-multi-thread"];
          "wasm-bindgen" = ["dep:wasm-bindgen-crate" "dep:js-sys"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["futures-io" "std" "tokio"];
      };
      "hickory-resolver" = rec {
        crateName = "hickory-resolver";
        version = "0.25.2";
        edition = "2021";
        sha256 = "0ypqxipl0dmggv442qn1xxh11lsjr65219wmmg949yqbkflsjqnw";
        libName = "hickory_resolver";
        authors = [
          "The contributors to Hickory DNS"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "hickory-proto";
            packageId = "hickory-proto";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "ipconfig";
            packageId = "ipconfig";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "moka";
            packageId = "moka";
            features = ["sync"];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = ["critical-section"];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "resolv-conf";
            packageId = "resolv-conf";
            optional = true;
            features = ["system"];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["macros" "test-util"];
          }
        ];
        features = {
          "__h3" = ["__quic"];
          "__https" = ["__tls"];
          "__quic" = ["dep:quinn" "__tls"];
          "__tls" = ["dep:rustls" "dep:tokio-rustls" "tokio"];
          "backtrace" = ["dep:backtrace" "hickory-proto/backtrace"];
          "default" = ["system-config" "tokio"];
          "dnssec-aws-lc-rs" = ["hickory-proto/dnssec-aws-lc-rs" "__dnssec"];
          "dnssec-ring" = ["hickory-proto/dnssec-ring" "__dnssec"];
          "h3-aws-lc-rs" = ["hickory-proto/h3-aws-lc-rs" "__h3"];
          "h3-ring" = ["hickory-proto/h3-ring" "__h3"];
          "https-aws-lc-rs" = ["hickory-proto/https-aws-lc-rs" "__https"];
          "https-ring" = ["hickory-proto/https-ring" "__https"];
          "quic-aws-lc-rs" = ["hickory-proto/quic-aws-lc-rs" "__quic" "quinn/rustls-aws-lc-rs"];
          "quic-ring" = ["hickory-proto/quic-ring" "__quic" "quinn/rustls-ring"];
          "rustls-platform-verifier" = ["hickory-proto/rustls-platform-verifier"];
          "serde" = ["dep:serde" "hickory-proto/serde"];
          "system-config" = ["dep:ipconfig" "dep:resolv-conf"];
          "tls-aws-lc-rs" = ["hickory-proto/tls-aws-lc-rs" "__tls"];
          "tls-ring" = ["hickory-proto/tls-ring" "__tls"];
          "tokio" = ["dep:tokio" "tokio/rt" "hickory-proto/tokio"];
          "webpki-roots" = ["dep:webpki-roots" "hickory-proto/webpki-roots"];
        };
        resolvedDefaultFeatures = ["default" "system-config" "tokio"];
      };
      "hkdf" = rec {
        crateName = "hkdf";
        version = "0.12.4";
        edition = "2018";
        sha256 = "1xxxzcarz151p1b858yn5skmhyrvn8fs4ivx5km3i1kjmnr8wpvv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
        ];
        features = {
          "std" = ["hmac/std"];
        };
      };
      "hmac" = rec {
        crateName = "hmac";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0pmbr069sfg76z7wsssfk5ddcqd9ncp79fyz6zcm6yn115yc6jbc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["mac"];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["dev"];
          }
        ];
        features = {
          "std" = ["digest/std"];
        };
        resolvedDefaultFeatures = ["reset"];
      };
      "hmac-sha1" = rec {
        crateName = "hmac-sha1";
        version = "0.2.2";
        edition = "2018";
        sha256 = "125bkbjvfnqzian1x9sxfiq3bnj2klmvpvlinszj0isxkrdxl1bb";
        libName = "hmac_sha1";
        authors = [
          "Philip Woolford <woolford.philip@gmail.com>"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
        ];
      };
      "hmac-sha256" = rec {
        crateName = "hmac-sha256";
        version = "1.1.12";
        edition = "2021";
        sha256 = "09alahh69c8cyycrvqhwsaj4dxi3w9y00xwbdsfg7sx9sk480s5d";
        libName = "hmac_sha256";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "digest010" = ["dep:digest010"];
          "digest09" = ["dep:digest09"];
          "traits" = ["traits09" "traits010"];
          "traits010" = ["digest010"];
          "traits09" = ["digest09"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "home" = rec {
        crateName = "home";
        version = "0.5.11";
        edition = "2021";
        sha256 = "1kxb4k87a9sayr8jipr7nq9wpgmjk4hk4047hmf9kc24692k75aq";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_UI_Shell" "Win32_System_Com"];
          }
        ];
      };
      "hostname" = rec {
        crateName = "hostname";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0rbxryl68bwv8hkjdjd8f37kdb10fncgsqrqksv64qy7s4y20vx5";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ((target."unix" or false) || ("redox" == target."os" or null));
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "hostname-validator" = rec {
        crateName = "hostname-validator";
        version = "1.1.1";
        edition = "2015";
        sha256 = "1qh5sxkckalibc28029ndnfd7w0s8mwvb68d82xbb25gr55acn7m";
        libName = "hostname_validator";
      };
      "html5ever" = rec {
        crateName = "html5ever";
        version = "0.35.0";
        edition = "2021";
        sha256 = "1m4yajw7slxqn0x3zdh3i9qlhb03vgdf2pq3la3l8rjbyz15inam";
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "markup5ever";
            packageId = "markup5ever";
          }
          {
            name = "match_token";
            packageId = "match_token";
          }
        ];
        features = {
        };
      };
      "http" = rec {
        crateName = "http";
        version = "1.3.1";
        edition = "2018";
        sha256 = "0r95i5h7dr1xadp1ac9453w0s62s27hzkam356nyx2d9mqqmva7l";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "http-body" = rec {
        crateName = "http-body";
        version = "1.0.1";
        edition = "2018";
        sha256 = "111ir5k2b9ihz5nr9cz7cwm7fnydca7dx4hc7vr16scfzghxrzhy";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "http";
            packageId = "http";
          }
        ];
      };
      "http-body-util" = rec {
        crateName = "http-body-util";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0jm6jv4gxsnlsi1kzdyffjrj8cfr3zninnxpw73mvkxy4qzdj8dh";
        libName = "http_body_util";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "channel" = ["dep:tokio"];
          "full" = ["channel"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.10.1";
        edition = "2018";
        sha256 = "11ycd554bw2dkgw0q61xsa7a4jn1wb1xbfacmf3dbwsikvkkvgvd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "httpdate" = rec {
        crateName = "httpdate";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1aa9rd2sac0zhjqh24c9xvir96g188zldkx0hr6dnnlx5904cfyz";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "2.2.0";
        edition = "2021";
        sha256 = "17rz8jhh1mcv4b03wnknhv1shwq2v9vhkhlfg884pprsig62l4cv";
      };
      "hyper" = rec {
        crateName = "hyper";
        version = "1.6.0";
        edition = "2021";
        sha256 = "103ggny2k31z0iq2gzwk2vbx601wx6xkpjpxn40hr3p3b0b5fayc";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = ["const_generics" "const_new"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
          {
            name = "want";
            packageId = "want";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            features = ["sink"];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc" "sink"];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["fs" "macros" "net" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util"];
          }
        ];
        features = {
          "client" = ["dep:want" "dep:pin-project-lite" "dep:smallvec"];
          "ffi" = ["dep:http-body-util" "futures-util?/alloc"];
          "full" = ["client" "http1" "http2" "server"];
          "http1" = ["dep:futures-channel" "dep:futures-util" "dep:httparse" "dep:itoa"];
          "http2" = ["dep:futures-channel" "dep:futures-util" "dep:h2"];
          "server" = ["dep:httpdate" "dep:pin-project-lite" "dep:smallvec"];
          "tracing" = ["dep:tracing"];
        };
        resolvedDefaultFeatures = ["client" "default" "http1" "http2" "server"];
      };
      "hyper-rustls" = rec {
        crateName = "hyper-rustls";
        version = "0.27.7";
        edition = "2021";
        sha256 = "0n6g8998szbzhnvcs1b7ibn745grxiqmlpg53xz206v826v3xjg3";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = ["client-legacy" "tokio"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.2";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = ["server-auto"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = ["tls12"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-std" "macros" "net" "rt-multi-thread"];
          }
        ];
        features = {
          "aws-lc-rs" = ["rustls/aws_lc_rs"];
          "default" = ["native-tokio" "http1" "tls12" "logging" "aws-lc-rs"];
          "fips" = ["aws-lc-rs" "rustls/fips"];
          "http1" = ["hyper-util/http1"];
          "http2" = ["hyper-util/http2"];
          "log" = ["dep:log"];
          "logging" = ["log" "tokio-rustls/logging" "rustls/logging"];
          "native-tokio" = ["rustls-native-certs"];
          "ring" = ["rustls/ring"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "rustls-platform-verifier" = ["dep:rustls-platform-verifier"];
          "tls12" = ["tokio-rustls/tls12" "rustls/tls12"];
          "webpki-roots" = ["dep:webpki-roots"];
          "webpki-tokio" = ["webpki-roots"];
        };
        resolvedDefaultFeatures = ["http1" "ring" "tls12" "webpki-roots" "webpki-tokio"];
      };
      "hyper-util" = rec {
        crateName = "hyper-util";
        version = "0.1.16";
        edition = "2021";
        sha256 = "0pmw8gqkqjnsdrxdy5wd5q8z1gh7caxqk2an7b4s53byghkhb6wd";
        libName = "hyper_util";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2 0.6.0";
            optional = true;
            features = ["all"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = ["full"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["macros" "test-util" "signal"];
          }
        ];
        features = {
          "client" = ["hyper/client" "tokio/net" "dep:tracing" "dep:futures-channel" "dep:tower-service"];
          "client-legacy" = ["client" "dep:socket2" "tokio/sync" "dep:libc" "dep:futures-util"];
          "client-proxy" = ["client" "dep:base64" "dep:ipnet" "dep:percent-encoding"];
          "client-proxy-system" = ["dep:system-configuration" "dep:windows-registry"];
          "full" = ["client" "client-legacy" "client-proxy" "client-proxy-system" "server" "server-auto" "server-graceful" "service" "http1" "http2" "tokio" "tracing"];
          "http1" = ["hyper/http1"];
          "http2" = ["hyper/http2"];
          "server" = ["hyper/server"];
          "server-auto" = ["server" "http1" "http2"];
          "server-graceful" = ["server" "tokio/sync"];
          "service" = ["dep:tower-service"];
          "tokio" = ["dep:tokio" "tokio/rt" "tokio/time"];
          "tracing" = ["dep:tracing"];
        };
        resolvedDefaultFeatures = ["client" "client-legacy" "client-proxy" "default" "http1" "http2" "server" "server-auto" "tokio"];
      };
      "i18n-config" = rec {
        crateName = "i18n-config";
        version = "0.4.8";
        edition = "2018";
        sha256 = "1vv31hz9zpzqz1ddpisxm2iz6c2swchlnd4l7hh2w98di86bj1iy";
        libName = "i18n_config";
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "basic-toml";
            packageId = "basic-toml";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = ["serde"];
          }
        ];
      };
      "i18n-embed" = rec {
        crateName = "i18n-embed";
        version = "0.15.4";
        edition = "2018";
        sha256 = "1i04hjbwg1y0sgvqbfvq54sf70k7rngrkgnx0vgnszprjcngr7v6";
        libName = "i18n_embed";
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "arc-swap";
            packageId = "arc-swap";
            optional = true;
          }
          {
            name = "fluent";
            packageId = "fluent";
            optional = true;
          }
          {
            name = "fluent-langneg";
            packageId = "fluent-langneg";
          }
          {
            name = "fluent-syntax";
            packageId = "fluent-syntax";
            optional = true;
          }
          {
            name = "i18n-embed-impl";
            packageId = "i18n-embed-impl";
            optional = true;
          }
          {
            name = "intl-memoizer";
            packageId = "intl-memoizer";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "rust-embed";
            packageId = "rust-embed";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
            optional = true;
          }
        ];
        features = {
          "arc-swap" = ["dep:arc-swap"];
          "autoreload" = ["notify"];
          "default" = ["rust-embed"];
          "desktop-requester" = ["locale_config"];
          "filesystem-assets" = ["walkdir"];
          "fluent" = ["dep:fluent"];
          "fluent-syntax" = ["dep:fluent-syntax"];
          "fluent-system" = ["fluent" "fluent-syntax" "parking_lot" "i18n-embed-impl" "i18n-embed-impl/fluent-system" "arc-swap"];
          "gettext-system" = ["tr" "tr/gettext" "dep:gettext" "parking_lot" "i18n-embed-impl" "i18n-embed-impl/gettext-system"];
          "i18n-embed-impl" = ["dep:i18n-embed-impl"];
          "locale_config" = ["dep:locale_config"];
          "notify" = ["dep:notify"];
          "parking_lot" = ["dep:parking_lot"];
          "rust-embed" = ["dep:rust-embed"];
          "tr" = ["dep:tr"];
          "walkdir" = ["dep:walkdir"];
          "web-sys" = ["dep:web-sys"];
          "web-sys-requester" = ["web-sys"];
        };
        resolvedDefaultFeatures = ["arc-swap" "default" "filesystem-assets" "fluent" "fluent-syntax" "fluent-system" "i18n-embed-impl" "parking_lot" "rust-embed" "walkdir"];
      };
      "i18n-embed-fl" = rec {
        crateName = "i18n-embed-fl";
        version = "0.9.4";
        edition = "2018";
        sha256 = "0b9wqnp8zy531xqjsr3a7ss3483j3561hdf5fqvi9iiz1ffrdch4";
        procMacro = true;
        libName = "i18n_embed_fl";
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "find-crate";
            packageId = "find-crate";
          }
          {
            name = "fluent";
            packageId = "fluent";
          }
          {
            name = "fluent-syntax";
            packageId = "fluent-syntax";
          }
          {
            name = "i18n-config";
            packageId = "i18n-config";
          }
          {
            name = "i18n-embed";
            packageId = "i18n-embed";
            features = ["fluent-system" "filesystem-assets"];
          }
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["derive" "proc-macro" "parsing" "printing" "extra-traits" "full"];
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        features = {
          "dashmap" = ["dep:dashmap"];
        };
      };
      "i18n-embed-impl" = rec {
        crateName = "i18n-embed-impl";
        version = "0.8.4";
        edition = "2018";
        sha256 = "1hmnimlv310cirg8nx77nf8q1si4hq1yarkg5kyfc7rxabhc0b0g";
        procMacro = true;
        libName = "i18n_embed_impl";
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "find-crate";
            packageId = "find-crate";
            optional = true;
          }
          {
            name = "i18n-config";
            packageId = "i18n-config";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["derive" "proc-macro" "parsing" "printing" "extra-traits"];
          }
        ];
        features = {
          "find-crate" = ["dep:find-crate"];
          "fluent-system" = ["i18n-config" "find-crate" "quote"];
          "gettext-system" = ["i18n-config" "find-crate" "quote"];
          "i18n-config" = ["dep:i18n-config"];
          "quote" = ["dep:quote"];
        };
        resolvedDefaultFeatures = ["default" "find-crate" "fluent-system" "i18n-config" "quote"];
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.63";
        edition = "2021";
        sha256 = "1n171f5lbc7bryzmp1h30zw86zbvl5480aq02z92lcdwvvjikjdh";
        libName = "iana_time_zone";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = {
              target,
              features,
            }: ("apple" == target."vendor" or null);
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = {
              target,
              features,
            }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "log";
            packageId = "log";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["fallback"];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        libName = "iana_time_zone_haiku";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
      };
      "icu_collections" = rec {
        crateName = "icu_collections";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0izfgypv1hsxlz1h8fc2aak641iyvkak16aaz5b4aqg3s3sp4010";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = ["zerovec"];
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = ["derive" "yoke"];
          }
        ];
        features = {
          "alloc" = ["zerovec/alloc"];
          "databake" = ["dep:databake" "zerovec/databake"];
          "serde" = ["dep:serde" "zerovec/serde" "potential_utf/serde" "alloc"];
        };
      };
      "icu_locale_core" = rec {
        crateName = "icu_locale_core";
        version = "2.0.0";
        edition = "2021";
        sha256 = "02phv7vwhyx6vmaqgwkh2p4kc2kciykv2px6g4h8glxfrh02gphc";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = ["dep:databake" "alloc"];
          "serde" = ["dep:serde" "tinystr/serde" "alloc"];
          "zerovec" = ["dep:zerovec" "tinystr/zerovec"];
        };
        resolvedDefaultFeatures = ["zerovec"];
      };
      "icu_normalizer" = rec {
        crateName = "icu_normalizer";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0ybrnfnxx4sf09gsrxri8p48qifn54il6n3dq2xxgx4dw7l80s23";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_normalizer_data";
            packageId = "icu_normalizer_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = ["dep:icu_normalizer_data" "icu_properties?/compiled_data" "icu_provider/baked"];
          "datagen" = ["serde" "dep:databake" "icu_properties" "icu_collections/databake" "zerovec/databake" "icu_properties?/datagen" "icu_provider/export"];
          "default" = ["compiled_data" "utf8_iter" "utf16_iter"];
          "icu_properties" = ["dep:icu_properties"];
          "serde" = ["dep:serde" "icu_collections/serde" "zerovec/serde" "icu_properties?/serde" "icu_provider/serde"];
          "utf16_iter" = ["dep:utf16_iter" "write16"];
          "utf8_iter" = ["dep:utf8_iter"];
          "write16" = ["dep:write16"];
        };
        resolvedDefaultFeatures = ["compiled_data"];
      };
      "icu_normalizer_data" = rec {
        crateName = "icu_normalizer_data";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1lvjpzxndyhhjyzd1f6vi961gvzhj244nribfpdqxjdgjdl0s880";
        authors = [
          "The ICU4X Project Developers"
        ];
      };
      "icu_properties" = rec {
        crateName = "icu_properties";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0az349pjg8f18lrjbdmxcpg676a7iz2ibc09d2wfz57b3sf62v01";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
            features = ["zerovec"];
          }
          {
            name = "icu_properties_data";
            packageId = "icu_properties_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = ["zerovec"];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            usesDefaultFeatures = false;
            features = ["yoke" "zerofrom"];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = ["derive" "yoke"];
          }
        ];
        features = {
          "alloc" = ["zerovec/alloc" "icu_collections/alloc"];
          "compiled_data" = ["dep:icu_properties_data" "icu_provider/baked"];
          "datagen" = ["serde" "dep:databake" "potential_utf/databake" "zerovec/databake" "icu_collections/databake" "icu_locale_core/databake" "zerotrie/databake" "icu_provider/export"];
          "default" = ["compiled_data"];
          "serde" = ["dep:serde" "icu_locale_core/serde" "potential_utf/serde" "zerovec/serde" "icu_collections/serde" "icu_provider/serde" "zerotrie/serde"];
          "unicode_bidi" = ["dep:unicode-bidi"];
        };
        resolvedDefaultFeatures = ["compiled_data"];
      };
      "icu_properties_data" = rec {
        crateName = "icu_properties_data";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0cnn3fkq6k88w7p86w7hsd1254s4sl783rpz4p6hlccq74a5k119";
        authors = [
          "The ICU4X Project Developers"
        ];
      };
      "icu_provider" = rec {
        crateName = "icu_provider";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1bz5v02gxv1i06yhdhs2kbwxkw3ny9r2vvj9j288fhazgfi0vj03";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = ["alloc" "derive"];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = ["alloc" "derive"];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
        ];
        features = {
          "alloc" = ["icu_locale_core/alloc" "zerovec/alloc" "zerotrie/alloc"];
          "baked" = ["zerotrie"];
          "deserialize_bincode_1" = ["serde" "dep:bincode" "std"];
          "deserialize_json" = ["serde" "dep:serde_json"];
          "deserialize_postcard_1" = ["serde" "dep:postcard"];
          "export" = ["serde" "dep:erased-serde" "dep:databake" "std" "sync" "dep:postcard" "zerovec/databake"];
          "logging" = ["dep:log"];
          "serde" = ["dep:serde" "yoke/serde"];
          "std" = ["alloc"];
          "zerotrie" = ["dep:zerotrie"];
        };
        resolvedDefaultFeatures = ["baked" "zerotrie"];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
      };
      "idna" = rec {
        crateName = "idna";
        version = "1.0.3";
        edition = "2018";
        sha256 = "0zlajvm2k3wy0ay8plr07w22hxkkmrxkffa6ah57ac6nci984vv8";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna_adapter";
            packageId = "idna_adapter";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = ["const_generics"];
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
          }
        ];
        features = {
          "compiled_data" = ["idna_adapter/compiled_data"];
          "default" = ["std" "compiled_data"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "compiled_data" "std"];
      };
      "idna_adapter" = rec {
        crateName = "idna_adapter";
        version = "1.2.1";
        edition = "2021";
        sha256 = "0i0339pxig6mv786nkqcxnwqa87v4m94b2653f6k3aj0jmhfkjis";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "icu_normalizer";
            packageId = "icu_normalizer";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = ["icu_normalizer/compiled_data" "icu_properties/compiled_data"];
        };
        resolvedDefaultFeatures = ["compiled_data"];
      };
      "igd-next" = rec {
        crateName = "igd-next";
        version = "0.16.2";
        edition = "2021";
        sha256 = "15vzz45qq1pf1hnxqsyjrbasmiy19z4mm0nmh8903xlpkhrr6s2i";
        libName = "igd_next";
        authors = [
          "Darius C"
          "Simon Bernier St-Pierre <sbernierstpierre@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "attohttpc";
            packageId = "attohttpc";
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
            optional = true;
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            optional = true;
          }
          {
            name = "hyper";
            packageId = "hyper";
            optional = true;
            usesDefaultFeatures = false;
            features = ["client" "http1" "http2"];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            usesDefaultFeatures = false;
            features = ["client" "client-legacy" "http1" "http2"];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = ["net"];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "xmltree";
            packageId = "xmltree";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
        ];
        features = {
          "aio_async_std" = ["futures" "async-std" "surf/h1-client-rustls" "bytes" "http" "async-trait"];
          "aio_tokio" = ["futures" "tokio" "hyper" "hyper-util" "http-body-util" "bytes" "http" "async-trait"];
          "async-std" = ["dep:async-std"];
          "async-trait" = ["dep:async-trait"];
          "bytes" = ["dep:bytes"];
          "futures" = ["dep:futures"];
          "http" = ["dep:http"];
          "http-body-util" = ["dep:http-body-util"];
          "hyper" = ["dep:hyper"];
          "hyper-util" = ["dep:hyper-util"];
          "surf" = ["dep:surf"];
          "tokio" = ["dep:tokio"];
        };
        resolvedDefaultFeatures = ["aio_tokio" "async-trait" "bytes" "default" "futures" "http" "http-body-util" "hyper" "hyper-util" "tokio"];
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = ["raw"];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "quickcheck" = ["dep:quickcheck"];
          "rayon" = ["dep:rayon"];
          "rustc-rayon" = ["dep:rustc-rayon"];
          "serde" = ["dep:serde"];
          "serde-1" = ["serde"];
        };
        resolvedDefaultFeatures = ["serde" "serde-1" "std"];
      };
      "indexmap 2.10.0" = rec {
        crateName = "indexmap";
        version = "2.10.0";
        edition = "2021";
        sha256 = "0qd6g26gxzl6dbf132w48fa8rr95glly3jhbk90i29726d9xhk7y";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "borsh" = ["dep:borsh"];
          "default" = ["std"];
          "quickcheck" = ["dep:quickcheck"];
          "rayon" = ["dep:rayon"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std"];
      };
      "inout" = rec {
        crateName = "inout";
        version = "0.1.4";
        edition = "2021";
        sha256 = "008xfl1jn9rxsq19phnhbimccf4p64880jmnpg59wqi07kk117w7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "block-padding" = ["dep:block-padding"];
          "std" = ["block-padding/std"];
        };
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.13";
        edition = "2018";
        sha256 = "08h27kzvb5jw74mh0ajv0nv9ggwvgqm8ynjsn2sa9jsks4cjh970";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "asmjs-unknown-emscripten");
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-emscripten");
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            rename = "wasm-bindgen_rs";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "asmjs-unknown-emscripten");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            rename = "wasm-bindgen_rs";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-emscripten");
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            rename = "wasm-bindgen_rs";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "asmjs-unknown-emscripten");
            features = ["Window" "Performance" "PerformanceTiming"];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-emscripten");
            features = ["Window" "Performance" "PerformanceTiming"];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
            features = ["Window" "Performance" "PerformanceTiming"];
          }
        ];
        features = {
          "js-sys" = ["dep:js-sys"];
          "stdweb" = ["dep:stdweb"];
          "wasm-bindgen" = ["js-sys" "wasm-bindgen_rs" "web-sys"];
          "wasm-bindgen_rs" = ["dep:wasm-bindgen_rs"];
          "web-sys" = ["dep:web-sys"];
        };
        resolvedDefaultFeatures = ["js-sys" "wasm-bindgen" "wasm-bindgen_rs" "web-sys"];
      };
      "intl-memoizer" = rec {
        crateName = "intl-memoizer";
        version = "0.5.3";
        edition = "2021";
        sha256 = "0gqn5wwhzacvj0z25r5r3l2pajg9c8i1ivh7g8g8dszm8pis439i";
        libName = "intl_memoizer";
        authors = [
          "Caleb Maclennan <caleb@alerque.com>"
          "Bruce Mitchener <bruce.mitchener@gmail.com"
          "Zibi Braniecki <zibi@unicode.org>"
          "Staś Małolepszy <stas@mozilla.com>"
        ];
        dependencies = [
          {
            name = "type-map";
            packageId = "type-map";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
      };
      "intl_pluralrules" = rec {
        crateName = "intl_pluralrules";
        version = "7.0.2";
        edition = "2018";
        sha256 = "0wprd3h6h8nfj62d8xk71h178q7zfn3srxm787w4sawsqavsg3h7";
        authors = [
          "Kekoa Riggin <kekoariggin@gmail.com>"
          "Zibi Braniecki <zbraniecki@mozilla.com>"
        ];
        dependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        devDependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = ["macros"];
          }
        ];
      };
      "io-uring" = rec {
        crateName = "io-uring";
        version = "0.7.9";
        edition = "2021";
        sha256 = "1i60fxfbxypfgfmq883kwxgldxcjlnnwjazgjiys3893fvrqfdfr";
        libName = "io_uring";
        authors = [
          "quininer <quininer@live.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = ["dep:bindgen"];
          "direct-syscall" = ["sc"];
          "overwrite" = ["bindgen"];
          "sc" = ["dep:sc"];
        };
      };
      "io_tee" = rec {
        crateName = "io_tee";
        version = "0.1.1";
        edition = "2018";
        sha256 = "013ka85akdcsj9rr92jrkm4jia9s8ihirpqi0ncqc6156kppqgsb";
      };
      "ipconfig" = rec {
        crateName = "ipconfig";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0zwr0x3jnqmjdqqbzhb0nid011qyhcyfdfqv32cdw85pjqpvk3dm";
        authors = [
          "Liran Ringel <liranringel@gmail.com>"
        ];
        dependencies = [
          {
            name = "socket2";
            packageId = "socket2 0.5.10";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "widestring";
            packageId = "widestring";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_Registry"];
          }
          {
            name = "winreg";
            packageId = "winreg";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
          "computer" = ["winreg"];
          "default" = ["computer"];
          "winreg" = ["dep:winreg"];
        };
        resolvedDefaultFeatures = ["computer" "default" "winreg"];
      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.11.0";
        edition = "2018";
        sha256 = "0c5i9sfi2asai28m8xp48k5gvwkqrg5ffpi767py6mzsrswv17s6";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = ["std"];
          "heapless" = ["dep:heapless"];
          "json" = ["serde" "schemars"];
          "schemars" = ["dep:schemars"];
          "ser_as_str" = ["heapless"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "iri-string" = rec {
        crateName = "iri-string";
        version = "0.7.8";
        edition = "2021";
        sha256 = "1cl0wfq97wq4s1p4dl0ix5cfgsc5fn7l22ljgw9ab9x1qglypifv";
        libName = "iri_string";
        authors = [
          "YOSHIOKA Takuma <nop_thread@nops.red>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["derive"];
          }
        ];
        features = {
          "alloc" = ["serde?/alloc"];
          "default" = ["std"];
          "memchr" = ["dep:memchr"];
          "serde" = ["dep:serde"];
          "std" = ["alloc" "memchr?/std" "serde?/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "iroh" = rec {
        crateName = "iroh";
        version = "0.91.2";
        edition = "2024";
        sha256 = "1lwp3brkyn8cmb0vhrxy8hn7d43yz0sj1y22004fqcrqyfwfjaz5";
        type = ["lib" "cdylib"];
        authors = [
          "dignifiedquire <me@dignifiedquire.com>"
          "n0 team"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            features = ["bytes" "std"];
          }
          {
            name = "backon";
            packageId = "backon";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "crypto_box";
            packageId = "crypto_box";
            features = ["serde" "chacha20"];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "der";
            packageId = "der";
            features = ["alloc" "derive"];
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            features = ["debug" "display" "from" "try_into" "deref" "from_str"];
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            features = ["serde" "rand_core" "zeroize" "pkcs8" "pem"];
          }
          {
            name = "futures-buffered";
            packageId = "futures-buffered";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["wasm_js"];
          }
          {
            name = "hickory-resolver";
            packageId = "hickory-resolver";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "igd-next";
            packageId = "igd-next";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["aio_tokio"];
          }
          {
            name = "instant";
            packageId = "instant";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["wasm-bindgen"];
          }
          {
            name = "iroh-base";
            packageId = "iroh-base";
            usesDefaultFeatures = false;
            features = ["key" "relay"];
          }
          {
            name = "iroh-metrics";
            packageId = "iroh-metrics";
            usesDefaultFeatures = false;
          }
          {
            name = "iroh-quinn";
            packageId = "iroh-quinn";
            rename = "quinn";
            usesDefaultFeatures = false;
            features = ["rustls-ring"];
          }
          {
            name = "iroh-quinn";
            packageId = "iroh-quinn";
            rename = "quinn";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["runtime-tokio" "rustls-ring"];
          }
          {
            name = "iroh-quinn-proto";
            packageId = "iroh-quinn-proto";
            rename = "quinn-proto";
          }
          {
            name = "iroh-quinn-udp";
            packageId = "iroh-quinn-udp";
            rename = "quinn-udp";
          }
          {
            name = "iroh-relay";
            packageId = "iroh-relay";
            usesDefaultFeatures = false;
          }
          {
            name = "n0-future";
            packageId = "n0-future";
          }
          {
            name = "n0-snafu";
            packageId = "n0-snafu";
          }
          {
            name = "n0-watcher";
            packageId = "n0-watcher";
          }
          {
            name = "nested_enum_utils";
            packageId = "nested_enum_utils";
          }
          {
            name = "netdev";
            packageId = "netdev";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "netwatch";
            packageId = "netwatch";
          }
          {
            name = "pin-project";
            packageId = "pin-project 1.1.10";
          }
          {
            name = "pkarr";
            packageId = "pkarr";
            usesDefaultFeatures = false;
            features = ["relays"];
          }
          {
            name = "portmapper";
            packageId = "portmapper";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = ["rustls-tls" "stream"];
          }
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = ["ring"];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "webpki_types";
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            rename = "webpki";
            features = ["ring"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "snafu";
            packageId = "snafu";
            features = ["rust_1_81"];
          }
          {
            name = "spki";
            packageId = "spki";
            features = ["std"];
          }
          {
            name = "strum";
            packageId = "strum 0.27.2";
            features = ["derive"];
          }
          {
            name = "stun-rs";
            packageId = "stun-rs";
          }
          {
            name = "surge-ping";
            packageId = "surge-ping";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "time";
            packageId = "time";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["wasm-bindgen"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util" "macros" "sync" "rt"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["io-util" "macros" "sync" "rt" "net" "fs" "io-std" "signal" "process"];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            features = ["sync"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["io-util" "io" "rt"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            features = ["serde"];
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.11";
          }
          {
            name = "z32";
            packageId = "z32";
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["io-util" "sync" "rt" "net" "fs" "macros" "time" "test-util"];
          }
        ];
        features = {
          "default" = ["metrics"];
          "discovery-local-network" = ["dep:swarm-discovery"];
          "discovery-pkarr-dht" = ["pkarr/dht"];
          "examples" = ["dep:clap" "dep:tracing-subscriber" "dep:indicatif" "dep:parse-size" "iroh-base/ticket"];
          "metrics" = ["iroh-metrics/metrics" "iroh-relay/metrics" "portmapper/metrics"];
          "test-utils" = ["iroh-relay/test-utils" "iroh-relay/server" "dep:axum"];
        };
        resolvedDefaultFeatures = ["default" "metrics"];
      };
      "iroh-base" = rec {
        crateName = "iroh-base";
        version = "0.91.2";
        edition = "2024";
        sha256 = "0kh3n0aqndk2za1rlncj9kn6jy2z7mlxmdyfrmd7cp4fcbrkyfa2";
        libName = "iroh_base";
        authors = [
          "n0 team"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            optional = true;
            features = ["serde" "rand_core" "zeroize"];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            optional = true;
            features = ["display"];
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            optional = true;
            features = ["serde" "rand_core" "zeroize"];
          }
          {
            name = "n0-snafu";
            packageId = "n0-snafu";
          }
          {
            name = "nested_enum_utils";
            packageId = "nested_enum_utils";
          }
          {
            name = "postcard";
            packageId = "postcard";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc" "use-std" "experimental-derive"];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "snafu";
            packageId = "snafu";
            optional = true;
            features = ["rust_1_81"];
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
            features = ["serde"];
          }
        ];
        devDependencies = [
          {
            name = "postcard";
            packageId = "postcard";
            features = ["use-std"];
          }
        ];
        features = {
          "default" = ["ticket" "relay"];
          "key" = ["dep:curve25519-dalek" "dep:ed25519-dalek" "dep:url" "dep:derive_more" "dep:snafu" "dep:data-encoding" "dep:rand_core" "relay"];
          "relay" = ["dep:url" "dep:derive_more" "dep:snafu"];
          "ticket" = ["key" "dep:postcard" "dep:data-encoding"];
        };
        resolvedDefaultFeatures = ["default" "key" "relay" "ticket"];
      };
      "iroh-gossip" = rec {
        crateName = "iroh-gossip";
        version = "0.91.0";
        edition = "2021";
        crateBin = [];
        sha256 = "14wlpivms4zkr0s8irkkay46nrz6m2859fw8ss827q28xqkqya7f";
        libName = "iroh_gossip";
        type = ["cdylib" "rlib"];
        authors = [
          "n0 team"
        ];
        dependencies = [
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            features = ["serde"];
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            features = ["add" "debug" "deref" "display" "from" "try_into" "into"];
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            features = ["serde" "rand_core"];
          }
          {
            name = "futures-concurrency";
            packageId = "futures-concurrency";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
          {
            name = "iroh";
            packageId = "iroh";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "iroh-base";
            packageId = "iroh-base";
            usesDefaultFeatures = false;
            features = ["key"];
          }
          {
            name = "iroh-metrics";
            packageId = "iroh-metrics";
            usesDefaultFeatures = false;
          }
          {
            name = "irpc";
            packageId = "irpc";
            optional = true;
            usesDefaultFeatures = false;
            features = ["derive" "stream" "spans"];
          }
          {
            name = "n0-future";
            packageId = "n0-future";
          }
          {
            name = "n0-snafu";
            packageId = "n0-snafu";
            optional = true;
          }
          {
            name = "nested_enum_utils";
            packageId = "nested_enum_utils";
            optional = true;
          }
          {
            name = "postcard";
            packageId = "postcard";
            usesDefaultFeatures = false;
            features = ["alloc" "use-std" "experimental-derive"];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = ["std_rng"];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "snafu";
            packageId = "snafu";
            optional = true;
            features = ["rust_1_81"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = ["io-util" "sync"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            features = ["codec"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "iroh";
            packageId = "iroh";
            usesDefaultFeatures = false;
            features = ["metrics" "test-utils"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util" "sync" "rt" "macros" "net" "fs"];
          }
        ];
        features = {
          "default" = ["net" "metrics"];
          "examples" = ["net"];
          "metrics" = ["iroh-metrics/metrics"];
          "net" = ["dep:irpc" "dep:futures-lite" "dep:iroh" "dep:tokio" "dep:tokio-util" "dep:futures-util" "dep:futures-concurrency" "dep:nested_enum_utils" "dep:n0-snafu" "dep:snafu"];
          "rpc" = ["dep:irpc" "dep:tokio" "dep:quinn" "dep:nested_enum_utils" "dep:n0-snafu" "dep:snafu" "irpc/rpc" "irpc/quinn_endpoint_setup"];
          "simulator" = ["test-utils" "dep:tracing-subscriber" "dep:toml" "dep:clap" "dep:serde_json" "dep:rayon" "dep:comfy-table"];
          "test-utils" = ["dep:rand_chacha" "dep:humantime-serde"];
        };
        resolvedDefaultFeatures = ["default" "metrics" "net"];
      };
      "iroh-metrics" = rec {
        crateName = "iroh-metrics";
        version = "0.35.0";
        edition = "2021";
        sha256 = "0d4nq46fdixkc8s41w1mdvgd868lpqdyy0jw6afx710vkwb2r4n8";
        libName = "iroh_metrics";
        authors = [
          "arqu <asmir@n0.computer>"
          "n0 team"
        ];
        dependencies = [
          {
            name = "iroh-metrics-derive";
            packageId = "iroh-metrics-derive";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "postcard";
            packageId = "postcard";
            features = ["use-std"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "snafu";
            packageId = "snafu";
            features = ["rust_1_81"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "postcard";
            packageId = "postcard";
            features = ["use-std"];
          }
        ];
        features = {
          "default" = ["metrics"];
          "service" = ["metrics" "dep:http-body-util" "dep:hyper" "dep:hyper-util" "dep:reqwest" "dep:tokio"];
          "static_core" = ["metrics" "dep:erased_set"];
        };
        resolvedDefaultFeatures = ["metrics"];
      };
      "iroh-metrics-derive" = rec {
        crateName = "iroh-metrics-derive";
        version = "0.2.0";
        edition = "2021";
        sha256 = "02gb1vihx701w68mf35dc8llplqakankrq5409il7ljfbk2ga4ld";
        procMacro = true;
        libName = "iroh_metrics_derive";
        authors = [
          "Frando <franz@n0.computer>"
          "n0 team"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "iroh-quinn" = rec {
        crateName = "iroh-quinn";
        version = "0.14.0";
        edition = "2021";
        sha256 = "1xzwlra9sipivmd829220l4vij03sc64d1z8dbgbxap7pq71dphc";
        libName = "iroh_quinn";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "iroh-quinn-proto";
            packageId = "iroh-quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "iroh-quinn-udp";
            packageId = "iroh-quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = ["tracing"];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "socket2";
            packageId = "socket2 0.5.10";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync" "rt" "rt-multi-thread" "time" "macros"];
          }
        ];
        features = {
          "async-executor" = ["dep:async-executor"];
          "async-fs" = ["dep:async-fs"];
          "async-global-executor" = ["dep:async-global-executor"];
          "async-io" = ["dep:async-io"];
          "async-std" = ["dep:async-std"];
          "aws-lc-rs" = ["proto/aws-lc-rs"];
          "aws-lc-rs-fips" = ["proto/aws-lc-rs-fips"];
          "default" = ["log" "platform-verifier" "runtime-tokio" "rustls-ring"];
          "futures-io" = ["dep:futures-io"];
          "log" = ["tracing/log" "proto/log" "udp/log"];
          "platform-verifier" = ["proto/platform-verifier"];
          "ring" = ["proto/ring"];
          "runtime-async-std" = ["async-io" "async-std"];
          "runtime-smol" = ["async-io" "smol"];
          "runtime-tokio" = ["tokio/time" "tokio/rt" "tokio/net"];
          "rustls" = ["rustls-ring"];
          "rustls-aws-lc-rs" = ["dep:rustls" "aws-lc-rs" "proto/rustls-aws-lc-rs" "proto/aws-lc-rs"];
          "rustls-aws-lc-rs-fips" = ["dep:rustls" "aws-lc-rs-fips" "proto/rustls-aws-lc-rs-fips" "proto/aws-lc-rs-fips"];
          "rustls-log" = ["rustls?/logging"];
          "rustls-ring" = ["dep:rustls" "ring" "proto/rustls-ring" "proto/ring"];
          "smol" = ["dep:smol"];
        };
        resolvedDefaultFeatures = ["ring" "runtime-tokio" "rustls-ring"];
      };
      "iroh-quinn-proto" = rec {
        crateName = "iroh-quinn-proto";
        version = "0.13.0";
        edition = "2021";
        sha256 = "0df5yzb4l2f0qzl9v7q4pl43kw9ivspfkjp77r6k0p3xly7mv7cj";
        libName = "iroh_quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["js"];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["wasm32_unknown_unknown_js"];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["web"];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = ["alloc" "alloc"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "aws-lc-rs" = ["dep:aws-lc-rs" "aws-lc-rs?/aws-lc-sys" "aws-lc-rs?/prebuilt-nasm"];
          "aws-lc-rs-fips" = ["aws-lc-rs" "aws-lc-rs?/fips"];
          "default" = ["rustls-ring" "log"];
          "log" = ["tracing/log"];
          "platform-verifier" = ["dep:rustls-platform-verifier"];
          "ring" = ["dep:ring"];
          "rustls" = ["rustls-ring"];
          "rustls-aws-lc-rs" = ["dep:rustls" "rustls?/aws-lc-rs" "aws-lc-rs"];
          "rustls-aws-lc-rs-fips" = ["rustls-aws-lc-rs" "aws-lc-rs-fips"];
          "rustls-log" = ["rustls?/logging"];
          "rustls-ring" = ["dep:rustls" "rustls?/ring" "ring"];
        };
        resolvedDefaultFeatures = ["default" "log" "ring" "rustls-ring"];
      };
      "iroh-quinn-udp" = rec {
        crateName = "iroh-quinn-udp";
        version = "0.5.7";
        edition = "2021";
        sha256 = "0wy9pk4h52srvli7m2s6kkbgvigbwswypx9i2gm86z4z0jhzlfn5";
        libName = "iroh_quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2 0.5.10";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_System_IO" "Win32_Networking_WinSock"];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = ["tracing" "log"];
          "direct-log" = ["dep:log"];
          "log" = ["tracing/log"];
          "tracing" = ["dep:tracing"];
        };
        resolvedDefaultFeatures = ["default" "log" "tracing"];
      };
      "iroh-relay" = rec {
        crateName = "iroh-relay";
        version = "0.91.1";
        edition = "2024";
        crateBin = [];
        sha256 = "0hzxy6l7cw5ywzmav925vhnij7mfaiwby72f0m44gh6gw8yy86cz";
        libName = "iroh_relay";
        type = ["lib" "cdylib"];
        authors = [
          "n0 team"
        ];
        dependencies = [
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            features = ["debug" "display" "from" "try_into" "deref"];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["wasm_js"];
          }
          {
            name = "hickory-resolver";
            packageId = "hickory-resolver";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["tokio"];
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = ["server" "client" "http1"];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
          }
          {
            name = "iroh-base";
            packageId = "iroh-base";
            usesDefaultFeatures = false;
            features = ["key" "relay"];
          }
          {
            name = "iroh-metrics";
            packageId = "iroh-metrics";
            usesDefaultFeatures = false;
          }
          {
            name = "iroh-quinn";
            packageId = "iroh-quinn";
            rename = "quinn";
            usesDefaultFeatures = false;
            features = ["rustls-ring"];
          }
          {
            name = "iroh-quinn-proto";
            packageId = "iroh-quinn-proto";
            rename = "quinn-proto";
          }
          {
            name = "lru";
            packageId = "lru 0.13.0";
          }
          {
            name = "n0-future";
            packageId = "n0-future";
          }
          {
            name = "n0-snafu";
            packageId = "n0-snafu";
          }
          {
            name = "nested_enum_utils";
            packageId = "nested_enum_utils";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "pin-project";
            packageId = "pin-project 1.1.10";
          }
          {
            name = "pkarr";
            packageId = "pkarr";
            usesDefaultFeatures = false;
            features = ["signed_packet"];
          }
          {
            name = "postcard";
            packageId = "postcard";
            usesDefaultFeatures = false;
            features = ["alloc" "use-std" "experimental-derive"];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = ["rustls-tls"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = ["ring"];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "webpki_types";
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            rename = "webpki";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "snafu";
            packageId = "snafu";
            features = ["rust_1_81"];
          }
          {
            name = "strum";
            packageId = "strum 0.27.2";
            features = ["derive"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util" "macros" "sync" "rt"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["io-util" "macros" "sync" "rt" "net" "fs" "io-std" "signal" "process"];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            usesDefaultFeatures = false;
            features = ["logging" "ring"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["io-util" "io" "codec" "rt"];
          }
          {
            name = "tokio-websockets";
            packageId = "tokio-websockets";
            optional = true;
            features = ["rustls-bring-your-own-connector" "ring" "getrandom" "rand" "server"];
          }
          {
            name = "tokio-websockets";
            packageId = "tokio-websockets";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["rustls-bring-your-own-connector" "ring" "getrandom" "rand" "client"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            features = ["serde"];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.11";
          }
          {
            name = "ws_stream_wasm";
            packageId = "ws_stream_wasm";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "z32";
            packageId = "z32";
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util" "sync" "rt" "net" "fs" "macros" "time" "test-util"];
          }
        ];
        features = {
          "default" = ["metrics"];
          "metrics" = ["iroh-metrics/metrics"];
          "server" = ["metrics" "dep:clap" "dep:dashmap" "dep:ahash" "dep:governor" "dep:hickory-proto" "dep:rcgen" "dep:regex" "dep:reloadable-state" "dep:rustls-cert-file-reader" "dep:rustls-cert-reloadable-resolver" "dep:rustls-pemfile" "dep:time" "dep:tokio-rustls-acme" "dep:tokio-websockets" "dep:simdutf8" "dep:toml" "dep:tracing-subscriber" "quinn/log" "quinn/platform-verifier" "quinn/runtime-tokio" "iroh-metrics/service"];
        };
        resolvedDefaultFeatures = ["metrics"];
      };
      "irpc" = rec {
        crateName = "irpc";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1k8svsjfzhsbxlrmlqxjhd622yl118fr53v9fhyxmabyk38g3y59";
        authors = [
          "Rüdiger Klaehn <rklaehn@protonmail.com>"
          "n0 team"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            features = ["sink"];
          }
          {
            name = "irpc-derive";
            packageId = "irpc-derive";
            optional = true;
          }
          {
            name = "n0-future";
            packageId = "n0-future";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["sync"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["full"];
          }
        ];
        features = {
          "default" = ["rpc" "quinn_endpoint_setup" "spans" "stream" "derive"];
          "derive" = ["dep:irpc-derive"];
          "quinn_endpoint_setup" = ["rpc" "dep:rustls" "dep:rcgen" "dep:anyhow" "dep:futures-buffered" "quinn/rustls-ring"];
          "rpc" = ["dep:quinn" "dep:postcard" "dep:anyhow" "dep:smallvec" "dep:tracing" "tokio/io-util"];
          "spans" = ["dep:tracing"];
          "stream" = ["dep:futures-util"];
        };
        resolvedDefaultFeatures = ["derive" "spans" "stream"];
      };
      "irpc-derive" = rec {
        crateName = "irpc-derive";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1nzb9vx5n1x6w7rmzlmmvgnldiqpclivqiwxvm3a00fl6jw2c2ry";
        procMacro = true;
        libName = "irpc_derive";
        authors = [
          "Rüdiger Klaehn <rklaehn@protonmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = ["full"];
          }
        ];
      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["use_std"];
          "use_std" = ["use_alloc" "either/use_std"];
        };
        resolvedDefaultFeatures = ["default" "use_alloc" "use_std"];
      };
      "itertools 0.11.0" = rec {
        crateName = "itertools";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0mzyqcc59azx9g5cg6fs8k529gvh4463smmka6jvzs3cd2jp7hdi";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["use_std"];
          "use_std" = ["use_alloc" "either/use_std"];
        };
        resolvedDefaultFeatures = ["default" "use_alloc" "use_std"];
      };
      "itertools 0.13.0" = rec {
        crateName = "itertools";
        version = "0.13.0";
        edition = "2018";
        sha256 = "11hiy3qzl643zcigknclh446qb9zlg4dpdzfkjaa9q9fqpgyfgj1";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["use_std"];
          "use_std" = ["use_alloc" "either/use_std"];
        };
        resolvedDefaultFeatures = ["default" "use_alloc" "use_std"];
      };
      "itertools 0.14.0" = rec {
        crateName = "itertools";
        version = "0.14.0";
        edition = "2018";
        sha256 = "118j6l1vs2mx65dqhwyssbrxpawa90886m3mzafdvyip41w2q69b";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["use_std"];
          "use_std" = ["use_alloc" "either/use_std"];
        };
        resolvedDefaultFeatures = ["default" "use_alloc" "use_std"];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0b4fj9kz54dr3wam0vprjwgygvycyw8r0qwg7vp19ly8b2w16psa";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = ["dep:no-panic"];
        };
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "13x2qcky5l22z4xgivi59xhjjx4kxir1zg7gcj0f1ijzd4yg7yhw";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["wasm-bindgen/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "jsonwebtoken" = rec {
        crateName = "jsonwebtoken";
        version = "9.3.1";
        edition = "2021";
        sha256 = "1plx2qf8mpg96bpsa1aalfsf4jvgwcnl6i37x7masysk91xcr1ss";
        authors = [
          "Vincent Prouillet <hello@vincentprouillet.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "pem";
            packageId = "pem";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["std"];
          }
          {
            name = "ring";
            packageId = "ring";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["std" "wasm32_unknown_unknown_js"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "simple_asn1";
            packageId = "simple_asn1";
            optional = true;
          }
        ];
        features = {
          "default" = ["use_pem"];
          "pem" = ["dep:pem"];
          "simple_asn1" = ["dep:simple_asn1"];
          "use_pem" = ["pem" "simple_asn1"];
        };
        resolvedDefaultFeatures = ["default" "pem" "simple_asn1" "use_pem"];
      };
      "lalrpop" = rec {
        crateName = "lalrpop";
        version = "0.20.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1jn1qg7gs9kka6sy2sbxx8wp6z8lm892ksr414b9yaansrx0gjsm";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "ascii-canvas";
            packageId = "ascii-canvas";
            usesDefaultFeatures = false;
          }
          {
            name = "bit-set";
            packageId = "bit-set";
            usesDefaultFeatures = false;
          }
          {
            name = "ena";
            packageId = "ena";
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
            usesDefaultFeatures = false;
            features = ["use_std"];
          }
          {
            name = "lalrpop-util";
            packageId = "lalrpop-util";
            usesDefaultFeatures = false;
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            usesDefaultFeatures = false;
          }
          {
            name = "pico-args";
            packageId = "pico-args";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "string_cache";
            packageId = "string_cache";
            usesDefaultFeatures = false;
          }
          {
            name = "term";
            packageId = "term";
            usesDefaultFeatures = false;
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = ["sha3"];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            usesDefaultFeatures = false;
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "default" = ["lexer" "unicode" "pico-args"];
          "lexer" = ["lalrpop-util/lexer"];
          "pico-args" = ["dep:pico-args"];
          "unicode" = ["regex/unicode" "regex-syntax/unicode" "lalrpop-util/unicode"];
        };
        resolvedDefaultFeatures = ["default" "lexer" "pico-args" "unicode"];
      };
      "lalrpop-util" = rec {
        crateName = "lalrpop-util";
        version = "0.20.2";
        edition = "2021";
        sha256 = "0lr5r12bh9gjjlmnjrbblf4bfcwnad4gz1hqjvp34yzb22ln0x2h";
        libName = "lalrpop_util";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            optional = true;
            usesDefaultFeatures = false;
            features = ["perf" "syntax" "hybrid"];
          }
        ];
        features = {
          "default" = ["std" "unicode"];
          "lexer" = ["regex-automata/std" "std"];
          "regex-automata" = ["dep:regex-automata"];
          "unicode" = ["regex-automata?/unicode"];
        };
        resolvedDefaultFeatures = ["default" "lexer" "regex-automata" "std" "unicode"];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin 0.9.8";
            optional = true;
            usesDefaultFeatures = false;
            features = ["once"];
          }
        ];
        features = {
          "spin" = ["dep:spin"];
          "spin_no_std" = ["spin"];
        };
        resolvedDefaultFeatures = ["spin" "spin_no_std"];
      };
      "lexicmp" = rec {
        crateName = "lexicmp";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0pgad083sqsdb9ip0qlhng240c8qimk92zmx5jrn6h7jvlqx2y3k";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "any_ascii";
            packageId = "any_ascii";
          }
        ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.174";
        edition = "2021";
        sha256 = "0xl7pqvw7g2874dy3kjady2fjr4rhj5lxsnxkkhr5689jcr6jw8i";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = ["std"];
          "rustc-dep-of-std" = ["align" "rustc-std-workspace-core"];
          "rustc-std-workspace-core" = ["dep:rustc-std-workspace-core"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "extra_traits" "std"];
      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.15";
        edition = "2021";
        sha256 = "1plpzf0p829viazdj57yw5dhmlr8ywf3apayxc2f2bq5a6mvryzr";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "default" = ["arch"];
          "unstable" = ["unstable-intrinsics" "unstable-float"];
        };
        resolvedDefaultFeatures = ["arch" "default"];
      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1qqczzfqcc3sw3bl7la6qv7i9hy1s7sxhxmdvpxkfgdd3c9904ir";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            optional = true;
          }
        ];
        features = {
          "default" = ["call" "std" "redox_syscall"];
          "ioslice" = ["dep:ioslice"];
          "mkns" = ["ioslice"];
          "redox_syscall" = ["dep:redox_syscall"];
        };
        resolvedDefaultFeatures = ["call" "default" "redox_syscall" "std"];
      };
      "libsqlite3-sys" = rec {
        crateName = "libsqlite3-sys";
        version = "0.30.1";
        edition = "2021";
        links = "sqlite3";
        sha256 = "0jcikvgbj84xc7ikdmpc8m4y5lyqgrb9aqblphwk67kv95xgp69f";
        libName = "libsqlite3_sys";
        authors = [
          "The rusqlite developers"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            optional = true;
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
            optional = true;
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
            optional = true;
          }
        ];
        features = {
          "bindgen" = ["dep:bindgen"];
          "buildtime_bindgen" = ["bindgen" "pkg-config" "vcpkg"];
          "bundled" = ["cc" "bundled_bindings"];
          "bundled-sqlcipher" = ["bundled"];
          "bundled-sqlcipher-vendored-openssl" = ["bundled-sqlcipher" "openssl-sys/vendored"];
          "bundled-windows" = ["cc" "bundled_bindings"];
          "cc" = ["dep:cc"];
          "default" = ["min_sqlite_version_3_14_0"];
          "loadable_extension" = ["prettyplease" "quote" "syn"];
          "min_sqlite_version_3_14_0" = ["pkg-config" "vcpkg"];
          "openssl-sys" = ["dep:openssl-sys"];
          "pkg-config" = ["dep:pkg-config"];
          "prettyplease" = ["dep:prettyplease"];
          "preupdate_hook" = ["buildtime_bindgen"];
          "quote" = ["dep:quote"];
          "session" = ["preupdate_hook" "buildtime_bindgen"];
          "syn" = ["dep:syn"];
          "vcpkg" = ["dep:vcpkg"];
        };
        resolvedDefaultFeatures = ["bundled" "bundled_bindings" "cc" "pkg-config" "unlock_notify" "vcpkg"];
      };
      "linfa-linalg" = rec {
        crateName = "linfa-linalg";
        version = "0.1.0";
        edition = "2018";
        sha256 = "10mcfr8k0syjxj9g14v8iv3lr25j7c0nfw49cwrnv1y884mmdrsn";
        libName = "linfa_linalg";
        authors = [
          "Yuhan Lin <yuhanliin@protonmail.com>"
        ];
        dependencies = [
          {
            name = "ndarray";
            packageId = "ndarray";
            features = ["approx"];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "default" = ["iterative"];
          "iterative" = ["rand"];
          "rand" = ["dep:rand"];
        };
        resolvedDefaultFeatures = ["default" "iterative" "rand"];
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.9.4";
        edition = "2021";
        sha256 = "04kyjdrq79lz9ibrf7czk6cv9d3jl597pb9738vzbsbzy1j5i56d";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std" "general" "errno"];
          "rustc-dep-of-std" = ["core" "compiler_builtins" "no_std"];
        };
        resolvedDefaultFeatures = ["elf" "errno" "general" "ioctl" "no_std"];
      };
      "litemap" = rec {
        crateName = "litemap";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0mlrlskwwhirxk3wsz9psh6nxcy491n0dh8zl02qgj0jzpssw7i4";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "databake" = ["dep:databake"];
          "default" = ["alloc"];
          "serde" = ["dep:serde" "alloc"];
          "testing" = ["alloc"];
          "yoke" = ["dep:yoke"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "litrs" = rec {
        crateName = "litrs";
        version = "0.4.2";
        edition = "2018";
        sha256 = "1v8bxsrkm0w2k9nmbp8hsspy9i1lawajywqdw4hx87rjzqv41rgm";
        authors = [
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        features = {
          "check_suffix" = ["unicode-xid"];
          "default" = ["proc-macro2"];
          "proc-macro2" = ["dep:proc-macro2"];
          "unicode-xid" = ["dep:unicode-xid"];
        };
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.13";
        edition = "2021";
        sha256 = "0rd73p4299mjwl4hhlfj9qr88v3r0kc8s1nszkfmnq2ky43nb4wn";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["atomic_usize"];
          "owning_ref" = ["dep:owning_ref"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["atomic_usize" "default"];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.27";
        edition = "2021";
        sha256 = "150x589dqil307rv0rwj0jsgz5bjbwvl83gyl61jf873a7rjvp0k";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = ["kv_std" "value-bag/serde" "serde"];
          "kv_std" = ["std" "kv" "value-bag/error"];
          "kv_sval" = ["kv" "value-bag/sval" "sval" "sval_ref"];
          "kv_unstable" = ["kv" "value-bag"];
          "kv_unstable_serde" = ["kv_serde" "kv_unstable_std"];
          "kv_unstable_std" = ["kv_std" "kv_unstable"];
          "kv_unstable_sval" = ["kv_sval" "kv_unstable"];
          "serde" = ["dep:serde"];
          "sval" = ["dep:sval"];
          "sval_ref" = ["dep:sval_ref"];
          "value-bag" = ["dep:value-bag"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "loom" = rec {
        crateName = "loom";
        version = "0.7.2";
        edition = "2018";
        sha256 = "1jpszf9qxv8ydpsm2h9vcyvxvyxcfkhmmfbylzd4gfbc0k40v7j1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "generator";
            packageId = "generator";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = ["env-filter"];
          }
        ];
        features = {
          "checkpoint" = ["serde" "serde_json"];
          "futures" = ["pin-utils"];
          "pin-utils" = ["dep:pin-utils"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "lru 0.12.5" = rec {
        crateName = "lru";
        version = "0.12.5";
        edition = "2015";
        sha256 = "0f1a7cgqxbyhrmgaqqa11m3azwhcc36w0v5r4izgbhadl3sg8k13";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            optional = true;
          }
        ];
        features = {
          "default" = ["hashbrown"];
          "hashbrown" = ["dep:hashbrown"];
          "nightly" = ["hashbrown" "hashbrown/nightly"];
        };
        resolvedDefaultFeatures = ["default" "hashbrown"];
      };
      "lru 0.13.0" = rec {
        crateName = "lru";
        version = "0.13.0";
        edition = "2015";
        sha256 = "0ra4jcfgij99z02rg5zy292ncsybk0vn5zc7bmrv82igbzalhxr2";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            optional = true;
          }
        ];
        features = {
          "default" = ["hashbrown"];
          "hashbrown" = ["dep:hashbrown"];
          "nightly" = ["hashbrown" "hashbrown/nightly"];
        };
        resolvedDefaultFeatures = ["default" "hashbrown"];
      };
      "lru-slab" = rec {
        crateName = "lru-slab";
        version = "0.1.2";
        edition = "2021";
        sha256 = "0m2139k466qj3bnpk66bwivgcx3z88qkxvlzk70vd65jq373jaqi";
        libName = "lru_slab";
        authors = [
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
        ];
      };
      "mac" = rec {
        crateName = "mac";
        version = "0.1.1";
        edition = "2015";
        sha256 = "194vc7vrshqff72rl56f9xgb0cazyl4jda7qsv31m5l6xx7hq7n4";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
      };
      "maplit" = rec {
        crateName = "maplit";
        version = "1.0.2";
        edition = "2015";
        sha256 = "07b5kjnhrrmfhgqm9wprjw8adx6i225lqp49gasgqg74lahnabiy";
        authors = [
          "bluss"
        ];
      };
      "markup5ever" = rec {
        crateName = "markup5ever";
        version = "0.35.0";
        edition = "2021";
        sha256 = "1hy1xh07jkm13j7vdnsphynl3z7hfmh99csjjvqzhl26jfffc7ri";
        libPath = "lib.rs";
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tendril";
            packageId = "tendril";
          }
          {
            name = "web_atoms";
            packageId = "web_atoms";
          }
        ];
      };
      "match_token" = rec {
        crateName = "match_token";
        version = "0.35.0";
        edition = "2021";
        sha256 = "1ksqd8li4kdd463cb2qf10d7d4j1m416y62xbzf47k0g6qzzv15c";
        procMacro = true;
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];
      };
      "matrixmultiply" = rec {
        crateName = "matrixmultiply";
        version = "0.3.10";
        edition = "2018";
        sha256 = "020sqwg3cvprfasbszqbnis9zx6c3w9vlkfidyimgblzdq0y6vd0";
        authors = [
          "bluss"
          "R. Janis Goldschmidt"
        ];
        dependencies = [
          {
            name = "rawpointer";
            packageId = "rawpointer";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["std"];
          "num_cpus" = ["dep:num_cpus"];
          "once_cell" = ["dep:once_cell"];
          "thread-tree" = ["dep:thread-tree"];
          "threading" = ["thread-tree" "std" "once_cell" "num_cpus"];
        };
        resolvedDefaultFeatures = ["cgemm" "std"];
      };
      "maud" = rec {
        crateName = "maud";
        version = "0.27.0";
        edition = "2021";
        sha256 = "0zi1zj24nab6jjj02ydi58ky24fns72ylnyvhk3aa3h24wz76ml1";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "maud_macros";
            packageId = "maud_macros";
          }
          {
            name = "poem";
            packageId = "poem";
            optional = true;
          }
        ];
        features = {
          "actix-web" = ["actix-web-dep" "futures-util"];
          "actix-web-dep" = ["dep:actix-web-dep"];
          "axum" = ["axum-core" "http"];
          "axum-core" = ["dep:axum-core"];
          "futures-util" = ["dep:futures-util"];
          "http" = ["dep:http"];
          "poem" = ["dep:poem"];
          "rocket" = ["dep:rocket"];
          "submillisecond" = ["dep:submillisecond"];
          "tide" = ["dep:tide"];
          "warp" = ["dep:warp"];
        };
        resolvedDefaultFeatures = ["default" "poem"];
      };
      "maud_macros" = rec {
        crateName = "maud_macros";
        version = "0.27.0";
        edition = "2021";
        sha256 = "1jhkk6hya62xz8lmj5rql0802kvfspdy64n0kf4igxjj747v0qbj";
        procMacro = true;
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "proc-macro2-diagnostics";
            packageId = "proc-macro2-diagnostics";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["extra-traits" "full"];
          }
        ];
      };
      "md-5" = rec {
        crateName = "md-5";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1kvq5rnpm4fzwmyv5nmnxygdhhb2369888a06gdc9pxyrzh7x7nq";
        libName = "md5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["dev"];
          }
        ];
        features = {
          "asm" = ["md5-asm"];
          "default" = ["std"];
          "md5-asm" = ["dep:md5-asm"];
          "oid" = ["digest/oid"];
          "std" = ["digest/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "md5" = rec {
        crateName = "md5";
        version = "0.7.0";
        edition = "2015";
        sha256 = "0wcps37hrhz59fkhf8di1ppdnqld6l1w5sdy7jp7p51z0i4c8329";
        authors = [
          "Ivan Ukhov <ivan.ukhov@gmail.com>"
          "Kamal Ahmad <shibe@openmailbox.org>"
          "Konstantin Stepanov <milezv@gmail.com>"
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
          "Nathan Musoke <nathan.musoke@gmail.com>"
          "Scott Mabin <scott@mabez.dev>"
          "Tony Arcieri <bascule@gmail.com>"
          "Wim de With <register@dewith.io>"
          "Yosef Dinerstein <yosefdi@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.5";
        edition = "2021";
        sha256 = "1h2bh2jajkizz04fh047lpid5wgw2cr9igpkdhl3ibzscpd858ij";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "core" = ["dep:core"];
          "default" = ["std"];
          "logging" = ["dep:log"];
          "rustc-dep-of-std" = ["core"];
          "std" = ["alloc"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "miette" = rec {
        crateName = "miette";
        version = "5.10.0";
        edition = "2018";
        sha256 = "0vl5qvl3bgha6nnkdl7kiha6v4ypd6d51wyc4q1bvdpamr75ifsr";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];
        dependencies = [
          {
            name = "miette-derive";
            packageId = "miette-derive";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "backtrace-ext" = ["dep:backtrace-ext"];
          "fancy" = ["fancy-no-backtrace" "backtrace" "backtrace-ext"];
          "fancy-no-backtrace" = ["owo-colors" "is-terminal" "textwrap" "terminal_size" "supports-hyperlinks" "supports-color" "supports-unicode"];
          "is-terminal" = ["dep:is-terminal"];
          "owo-colors" = ["dep:owo-colors"];
          "serde" = ["dep:serde"];
          "supports-color" = ["dep:supports-color"];
          "supports-hyperlinks" = ["dep:supports-hyperlinks"];
          "supports-unicode" = ["dep:supports-unicode"];
          "terminal_size" = ["dep:terminal_size"];
          "textwrap" = ["dep:textwrap"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "miette-derive" = rec {
        crateName = "miette-derive";
        version = "5.10.0";
        edition = "2018";
        sha256 = "0p33msrngkxlp5ajm8nijamii9vcwwpy8gfh4m53qnmrc0avrrs9";
        procMacro = true;
        libName = "miette_derive";
        authors = [
          "Kat Marchán <kzm@zkat.tech>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.17";
        edition = "2015";
        sha256 = "16hkibgvb9klh0w0jk5crr5xv90l3wlf77ggymzjmvl1818vnxv8";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
      };
      "mime_guess" = rec {
        crateName = "mime_guess";
        version = "2.0.5";
        edition = "2015";
        sha256 = "03jmg3yx6j39mg0kayf7w4a886dl3j15y8zs119zw01ccy74zi7p";
        authors = [
          "Austin Bonander <austin.bonander@gmail.com>"
        ];
        dependencies = [
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        buildDependencies = [
          {
            name = "unicase";
            packageId = "unicase";
          }
        ];
        features = {
          "default" = ["rev-mappings"];
        };
      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        libName = "minimal_lexical";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.9";
        edition = "2021";
        sha256 = "05k3pdg8bjjzayq3rf0qhpirq9k37pxnasfn4arbs17phqn6m9qz";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
          "Rich Geldreich richgel99@gmail.com"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["dep:alloc"];
          "core" = ["dep:core"];
          "default" = ["with-alloc"];
          "rustc-dep-of-std" = ["core" "alloc" "adler2/rustc-dep-of-std"];
          "serde" = ["dep:serde"];
          "simd" = ["simd-adler32"];
          "simd-adler32" = ["dep:simd-adler32"];
        };
      };
      "mio" = rec {
        crateName = "mio";
        version = "1.0.4";
        edition = "2021";
        sha256 = "073n3kam3nz8j8had35fd2nn7j6a33pi3y5w3kq608cari2d9gkq";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.1+wasi-snapshot-preview1";
            target = {
              target,
              features,
            }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming"];
          }
        ];
        features = {
          "default" = ["log"];
          "log" = ["dep:log"];
          "os-ext" = ["os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security"];
        };
        resolvedDefaultFeatures = ["net" "os-ext" "os-poll"];
      };
      "moka" = rec {
        crateName = "moka";
        version = "0.12.10";
        edition = "2021";
        sha256 = "09h9ww66vxrkizma99n7ib2fm91crkw4msp650j2i94lr911ccm9";
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "loom";
            packageId = "loom";
            target = {
              target,
              features,
            }: (target."moka_loom" or false);
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "tagptr";
            packageId = "tagptr";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = ["v4"];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
            target = {
              target,
              features,
            }: (target."rustver" or false);
          }
        ];
        features = {
          "async-lock" = ["dep:async-lock"];
          "event-listener" = ["dep:event-listener"];
          "future" = ["async-lock" "event-listener" "futures-util"];
          "futures-util" = ["dep:futures-util"];
          "log" = ["dep:log"];
          "logging" = ["log"];
          "once_cell" = ["dep:once_cell"];
          "quanta" = ["dep:quanta"];
          "unstable-debug-counters" = ["future" "once_cell"];
        };
        resolvedDefaultFeatures = ["default" "sync"];
      };
      "multer" = rec {
        crateName = "multer";
        version = "3.1.0";
        edition = "2018";
        sha256 = "0jr2snfay5fjz50yvdja4vbnddlj1iriiqjym88pbj3daiv7gs43";
        authors = [
          "Rousan Ali <hello@rousan.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "spin";
            packageId = "spin 0.9.8";
            usesDefaultFeatures = false;
            features = ["spin_mutex"];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "all" = ["json"];
          "json" = ["serde" "serde_json"];
          "log" = ["dep:log"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "tokio" = ["dep:tokio"];
          "tokio-io" = ["tokio" "tokio-util"];
          "tokio-util" = ["dep:tokio-util"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "n0-future" = rec {
        crateName = "n0-future";
        version = "0.1.3";
        edition = "2021";
        sha256 = "15670qzfi9sksv5ircgx9fxsgy0vnky9caw4734v66k8kvcybc3v";
        libName = "n0_future";
        authors = [
          "Philipp Krüger <philipp@n0.computer>"
          "n0 team"
        ];
        dependencies = [
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            features = ["debug" "display"];
          }
          {
            name = "futures-buffered";
            packageId = "futures-buffered";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            features = ["sink"];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "pin-project";
            packageId = "pin-project 1.1.10";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["rt" "time"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["rt"];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
      };
      "n0-snafu" = rec {
        crateName = "n0-snafu";
        version = "0.2.1";
        edition = "2021";
        sha256 = "1l7b0hs31p4jw7wjjq61qs9yz5j2hv4avabqvcliy12pzxjx9zn4";
        libName = "n0_snafu";
        authors = [
          "n0 team"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            features = ["backtrace"];
          }
          {
            name = "btparse";
            packageId = "btparse";
          }
          {
            name = "color-backtrace";
            packageId = "color-backtrace";
            features = ["use-btparse-crate"];
          }
          {
            name = "snafu";
            packageId = "snafu";
            features = ["rust_1_81" "std" "backtraces-impl-backtrace-crate"];
          }
          {
            name = "tracing-error";
            packageId = "tracing-error";
          }
        ];
      };
      "n0-watcher" = rec {
        crateName = "n0-watcher";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0ajwykc1855l7srw95ibfpp3yprdxk5l1s25p6javm8h58wn4563";
        libName = "n0_watcher";
        authors = [
          "dignifiedquire <me@dignifiedquire.com>"
          "n0 team"
        ];
        dependencies = [
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            features = ["debug"];
          }
          {
            name = "n0-future";
            packageId = "n0-future";
          }
          {
            name = "snafu";
            packageId = "snafu";
          }
        ];
        devDependencies = [
          {
            name = "n0-future";
            packageId = "n0-future";
          }
        ];
      };
      "nanoid" = rec {
        crateName = "nanoid";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1n5l5xig5zcinh41bb4p0rzam8gxic02qpngnylb3d8pq3g01yiz";
        authors = [
          "Nikolay Govorov <nikolay_govorov@bk.ru>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = ["small_rng"];
          }
        ];
      };
      "ndarray" = rec {
        crateName = "ndarray";
        version = "0.15.6";
        edition = "2018";
        sha256 = "0cpsm28hyk8qfjs4g9649dprv3hm53z12qqwyyjqbi3yjr72vcdd";
        authors = [
          "Ulrik Sverdrup \"bluss\""
          "Jim Turner"
        ];
        dependencies = [
          {
            name = "approx";
            packageId = "approx 0.4.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "matrixmultiply";
            packageId = "matrixmultiply";
            usesDefaultFeatures = false;
            features = ["cgemm"];
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rawpointer";
            packageId = "rawpointer";
          }
        ];
        devDependencies = [
          {
            name = "approx";
            packageId = "approx 0.4.0";
          }
        ];
        features = {
          "approx" = ["dep:approx"];
          "approx-0_5" = ["dep:approx-0_5"];
          "blas" = ["cblas-sys" "libc"];
          "cblas-sys" = ["dep:cblas-sys"];
          "default" = ["std"];
          "docs" = ["approx" "approx-0_5" "serde" "rayon"];
          "libc" = ["dep:libc"];
          "matrixmultiply-threading" = ["matrixmultiply/threading"];
          "rayon" = ["rayon_" "std"];
          "rayon_" = ["dep:rayon_"];
          "serde" = ["dep:serde"];
          "serde-1" = ["serde"];
          "std" = ["num-traits/std" "matrixmultiply/std"];
        };
        resolvedDefaultFeatures = ["approx" "default" "std"];
      };
      "ndarray-stats" = rec {
        crateName = "ndarray-stats";
        version = "0.5.1";
        edition = "2018";
        sha256 = "007lr2q3dq17n69dlkm2md1jkh9nhz1f0rzxs5dpp1wnmivq8nmg";
        libName = "ndarray_stats";
        authors = [
          "Jim Turner <ndarray-stats@turner.link>"
          "LukeMathWalker <rust@lpalmieri.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "ndarray";
            packageId = "ndarray";
          }
          {
            name = "noisy_float";
            packageId = "noisy_float";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        devDependencies = [
          {
            name = "ndarray";
            packageId = "ndarray";
            features = ["approx"];
          }
        ];
      };
      "nested_enum_utils" = rec {
        crateName = "nested_enum_utils";
        version = "0.2.2";
        edition = "2021";
        sha256 = "18yk4f810dlzfkd4gxh2xl7srkivd5wbshpy0abhxls4xmhr3yj3";
        procMacro = true;
        authors = [
          "Rüdiger Klaehn <rklaehn@protonmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = ["full"];
          }
        ];
      };
      "netdev" = rec {
        crateName = "netdev";
        version = "0.36.0";
        edition = "2021";
        sha256 = "18f0fwp5g8lsjp0vjil7lvr1dmih6wcbbqjwr522my1lw3f0j8l6";
        authors = [
          "shellrow <shellrow@fortnium.com>"
        ];
        dependencies = [
          {
            name = "dlopen2";
            packageId = "dlopen2";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "ipnet";
            packageId = "ipnet";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "netlink-packet-route";
            packageId = "netlink-packet-route 0.22.0";
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "netlink-sys";
            packageId = "netlink-sys";
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
          }
          {
            name = "system-configuration";
            packageId = "system-configuration";
            target = {
              target,
              features,
            }: ("apple" == target."vendor" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock" "Win32_NetworkManagement_Ndis"];
          }
        ];
        features = {
          "default" = ["gateway"];
          "serde" = ["dep:serde" "ipnet/serde"];
        };
        resolvedDefaultFeatures = ["default" "gateway"];
      };
      "netlink-packet-core" = rec {
        crateName = "netlink-packet-core";
        version = "0.7.0";
        edition = "2018";
        sha256 = "197dh9c5570135kv5q770n2ih5prhsql58cd71xxcya4f2plywkj";
        libName = "netlink_packet_core";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "netlink-packet-utils";
            packageId = "netlink-packet-utils";
          }
        ];
      };
      "netlink-packet-route 0.22.0" = rec {
        crateName = "netlink-packet-route";
        version = "0.22.0";
        edition = "2021";
        sha256 = "1r6qvhippjj1xhdgpbxva03ybhyz61f9l7ywapsss545na3pj3pw";
        libName = "netlink_packet_route";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
            features = ["std"];
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
          }
          {
            name = "netlink-packet-utils";
            packageId = "netlink-packet-utils";
          }
        ];
        features = {
        };
      };
      "netlink-packet-route 0.24.0" = rec {
        crateName = "netlink-packet-route";
        version = "0.24.0";
        edition = "2021";
        sha256 = "1wm6nm7mcdljd26mj72gg3jzcb8ny5a31dpqfz4xf4v8m5q37n2n";
        libName = "netlink_packet_route";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
            features = ["std"];
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
          }
          {
            name = "netlink-packet-utils";
            packageId = "netlink-packet-utils";
          }
        ];
        features = {
        };
      };
      "netlink-packet-utils" = rec {
        crateName = "netlink-packet-utils";
        version = "0.5.2";
        edition = "2018";
        sha256 = "0d3xfh9zg0x2hbmh8iws0dvhj69prpx54khfvmfakm8sqw48mphf";
        libName = "netlink_packet_utils";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
      };
      "netlink-proto" = rec {
        crateName = "netlink-proto";
        version = "0.11.5";
        edition = "2018";
        sha256 = "0q0xqhp0n8307zakbfsa4w2n5dfrw80ym7nq20j6339g5h0jwibj";
        libName = "netlink_proto";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
          }
          {
            name = "netlink-sys";
            packageId = "netlink-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "default" = ["tokio_socket"];
          "smol_socket" = ["netlink-sys/smol_socket"];
          "tokio_socket" = ["netlink-sys/tokio_socket"];
        };
        resolvedDefaultFeatures = ["default" "tokio_socket"];
      };
      "netlink-sys" = rec {
        crateName = "netlink-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "08xxx1ng7fxkvqrh81y95hni5mnir1ksg5xzj4vbj32rf2m07j8n";
        libName = "netlink_sys";
        authors = [
          "Corentin Henry <corentinhenry@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = ["net"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["net" "macros" "rt-multi-thread"];
          }
        ];
        features = {
          "async-io" = ["dep:async-io"];
          "futures" = ["dep:futures"];
          "mio" = ["dep:mio"];
          "mio_socket" = ["mio"];
          "smol_socket" = ["async-io" "futures"];
          "tokio" = ["dep:tokio"];
          "tokio_socket" = ["tokio" "futures"];
        };
        resolvedDefaultFeatures = ["default" "futures" "tokio" "tokio_socket"];
      };
      "netwatch" = rec {
        crateName = "netwatch";
        version = "0.8.0";
        edition = "2024";
        sha256 = "1gc7yzi02w4vqfbvfxv0i5ykmbvg1jx205657zgz6jl912sdn0c9";
        authors = [
          "n0 team"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["display"];
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            target = {
              target,
              features,
            }: ("android" == target."os" or null);
            features = ["display"];
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["debug"];
          }
          {
            name = "iroh-quinn-udp";
            packageId = "iroh-quinn-udp";
            rename = "quinn-udp";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "n0-future";
            packageId = "n0-future";
          }
          {
            name = "n0-watcher";
            packageId = "n0-watcher";
          }
          {
            name = "nested_enum_utils";
            packageId = "nested_enum_utils";
          }
          {
            name = "netdev";
            packageId = "netdev";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "netlink-packet-core";
            packageId = "netlink-packet-core";
            target = {
              target,
              features,
            }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "netlink-packet-route";
            packageId = "netlink-packet-route 0.24.0";
            target = {
              target,
              features,
            }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "netlink-proto";
            packageId = "netlink-proto";
            target = {
              target,
              features,
            }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "netlink-sys";
            packageId = "netlink-sys";
            target = {
              target,
              features,
            }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "serde";
            packageId = "serde";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["derive"];
          }
          {
            name = "snafu";
            packageId = "snafu";
          }
          {
            name = "socket2";
            packageId = "socket2 0.6.0";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["all"];
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util" "macros" "sync" "time"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["io-util" "macros" "sync" "rt" "net" "fs" "io-std" "signal" "process" "time"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["rt"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["EventListener" "EventTarget"];
          }
          {
            name = "windows";
            packageId = "windows 0.61.3";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["Win32_NetworkManagement_IpHelper" "Win32_Foundation" "Win32_NetworkManagement_Ndis" "Win32_Networking_WinSock"];
          }
          {
            name = "windows-result";
            packageId = "windows-result 0.3.4";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
          {
            name = "wmi";
            packageId = "wmi";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
            features = ["io-util" "sync" "rt" "net" "fs" "macros" "time" "test-util"];
          }
        ];
      };
      "new_debug_unreachable" = rec {
        crateName = "new_debug_unreachable";
        version = "1.0.6";
        edition = "2021";
        sha256 = "11phpf1mjxq6khk91yzcbd3ympm78m3ivl7xg6lg2c0lf66fy3k5";
        libName = "debug_unreachable";
        authors = [
          "Matt Brubeck <mbrubeck@limpet.net>"
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
      };
      "nibble_vec" = rec {
        crateName = "nibble_vec";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0hsdp3s724s30hkqz74ky6sqnadhp2xwcj1n1hzy4vzkz4yxi9bp";
        authors = [
          "Michael Sproul <micsproul@gmail.com>"
        ];
        dependencies = [
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.30.1";
        edition = "2021";
        sha256 = "1dixahq9hk191g0c2ydc0h1ppxj0xw536y6rl63vlnp06lx3ylkl";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = ["extra_traits"];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "aio" = ["pin-utils"];
          "dir" = ["fs"];
          "event" = ["poll"];
          "memoffset" = ["dep:memoffset"];
          "mount" = ["uio"];
          "mqueue" = ["fs"];
          "net" = ["socket"];
          "pin-utils" = ["dep:pin-utils"];
          "ptrace" = ["process"];
          "sched" = ["process"];
          "signal" = ["process"];
          "socket" = ["memoffset"];
          "ucontext" = ["signal"];
          "user" = ["feature"];
          "zerocopy" = ["fs" "uio"];
        };
        resolvedDefaultFeatures = ["default" "feature" "fs" "user"];
      };
      "no-std-net" = rec {
        crateName = "no-std-net";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0ravflgyh0q2142gjdz9iav5yqci3ga7gbnk4mmfcnqkrq54lya3";
        libName = "no_std_net";
        authors = [
          "M@ Dunlap <mattdunlap@gmail.com>"
        ];
        features = {
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "noisy_float" = rec {
        crateName = "noisy_float";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1bqkl82pfp98i98s3van73hkvqcx5p55dm1wagg57gy0xgkfd3wp";
        authors = [
          "Matthew Michelotti <matthew@matthewmichelotti.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];
        features = {
          "approx" = ["dep:approx"];
          "serde" = ["dep:serde"];
        };
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.3";
        edition = "2018";
        sha256 = "0jha9901wxam390jcf5pfa0qqfrgh8li787jx2ip0yk5b8y9hwyj";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc" "memchr/std" "minimal-lexical/std"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "ntapi" = rec {
        crateName = "ntapi";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1r38zhbwdvkis2mzs6671cm1p6djgsl49i7bwxzrvhwicdf8k8z8";
        authors = [
          "MSxDOS <melcodos@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = ["cfg" "evntrace" "in6addr" "inaddr" "minwinbase" "ntsecapi" "windef" "winioctl"];
          }
        ];
        features = {
          "default" = ["user"];
          "impl-default" = ["winapi/impl-default"];
        };
        resolvedDefaultFeatures = ["default" "user"];
      };
      "ntimestamp" = rec {
        crateName = "ntimestamp";
        version = "1.0.0";
        edition = "2021";
        sha256 = "136n1xfgcwsb0p48vgd8jixmixp7bkvp57p8jl03wvbj0p2983y5";
        authors = [
          "Nuh <nuh@nuh.dev>"
        ];
        dependencies = [
          {
            name = "base32";
            packageId = "base32";
            optional = true;
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["js"];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["derive"];
          }
        ];
        features = {
          "base32" = ["dep:base32"];
          "full" = ["serde" "base32" "httpdate"];
          "httpdate" = ["dep:httpdate"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["base32" "full" "httpdate" "serde"];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        libName = "nu_ansi_term";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv"];
          }
        ];
        features = {
          "derive_serde_style" = ["serde"];
          "serde" = ["dep:serde"];
        };
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "default" = ["std"];
          "quickcheck" = ["dep:quickcheck"];
          "rand" = ["dep:rand"];
          "serde" = ["dep:serde"];
          "std" = ["num-integer/std" "num-traits/std"];
        };
      };
      "num-bigint-dig" = rec {
        crateName = "num-bigint-dig";
        version = "0.8.4";
        edition = "2021";
        sha256 = "0lb12df24wgxxbspz4gw1sf1kdqwvpdcpwq4fdlwg4gj41c1k16w";
        libName = "num_bigint_dig";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            usesDefaultFeatures = false;
            features = ["spin_no_std"];
          }
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = ["small_rng"];
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "default" = ["std" "u64_digit"];
          "fuzz" = ["arbitrary" "smallvec/arbitrary"];
          "prime" = ["rand/std_rng"];
          "rand" = ["dep:rand"];
          "serde" = ["dep:serde"];
          "std" = ["num-integer/std" "num-traits/std" "smallvec/write" "rand/std" "serde/std"];
          "zeroize" = ["dep:zeroize"];
        };
        resolvedDefaultFeatures = ["i128" "prime" "rand" "u64_digit" "zeroize"];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.4.6";
        edition = "2021";
        sha256 = "15cla16mnw12xzf5g041nxbjjm9m85hdgadd5dl5d0b30w9qmy3k";
        libName = "num_complex";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
        ];
        features = {
          "bytecheck" = ["dep:bytecheck"];
          "bytemuck" = ["dep:bytemuck"];
          "default" = ["std"];
          "libm" = ["num-traits/libm"];
          "rand" = ["dep:rand"];
          "rkyv" = ["dep:rkyv"];
          "serde" = ["dep:serde"];
          "std" = ["num-traits/std"];
        };
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["num-traits/std"];
        };
        resolvedDefaultFeatures = ["default" "i128" "std"];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.45";
        edition = "2018";
        sha256 = "1gzm7vc5g9qsjjl3bqk9rz1h6raxhygbrcpbfl04swlh0i506a8l";
        libName = "num_iter";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["num-integer/std" "num-traits/std"];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = ["std"];
          "libm" = ["dep:libm"];
        };
        resolvedDefaultFeatures = ["default" "i128" "libm" "std"];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.17.0";
        edition = "2015";
        sha256 = "0fxjazlng4z8cgbmsvbzv411wrg7x3hyxdq8nxixgzjswyylppwi";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = {
              target,
              features,
            }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (!(target."windows" or false));
          }
        ];
      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.4";
        edition = "2021";
        sha256 = "0ykvfah4ddfi2dwjcksc33j34i84kb7plycxwr6dijp69kjb8wx9";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "complex-expressions" = ["num_enum_derive/complex-expressions"];
          "default" = ["std"];
          "std" = ["num_enum_derive/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.4";
        edition = "2021";
        sha256 = "03gr5218x4rs52kx4srx3jn1c6vmx3drd506vl0axax88v47is3p";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["parsing"];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["extra-traits" "parsing"];
          }
        ];
        features = {
          "complex-expressions" = ["syn/full"];
          "default" = ["std"];
          "proc-macro-crate" = ["dep:proc-macro-crate"];
          "std" = ["proc-macro-crate"];
        };
        resolvedDefaultFeatures = ["proc-macro-crate" "std"];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.7";
        edition = "2018";
        sha256 = "11vv97djn9nc5n6w1gc6bd96d2qk2c8cg1kw5km9bsi3v4a8x532";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = ["read" "write" "build" "std" "compression" "wasm"];
          "alloc" = ["dep:alloc"];
          "build" = ["build_core" "write_std" "elf"];
          "build_core" = ["read_core" "write_core"];
          "compiler_builtins" = ["dep:compiler_builtins"];
          "compression" = ["dep:flate2" "dep:ruzstd" "std"];
          "core" = ["dep:core"];
          "default" = ["read" "compression"];
          "doc" = ["read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff"];
          "pe" = ["coff"];
          "read" = ["read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned"];
          "rustc-dep-of-std" = ["core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std"];
          "std" = ["memchr/std"];
          "unstable-all" = ["all" "unstable"];
          "wasm" = ["dep:wasmparser"];
          "write" = ["write_std" "coff" "elf" "macho" "pe" "xcoff"];
          "write_core" = ["dep:crc32fast" "dep:indexmap" "dep:hashbrown"];
          "write_std" = ["write_core" "std" "indexmap?/std" "crc32fast?/std"];
        };
        resolvedDefaultFeatures = ["archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff"];
      };
      "object_store" = rec {
        crateName = "object_store";
        version = "0.12.3";
        edition = "2021";
        sha256 = "15kl8dhgwy0n0r8827zzv5jvxqw3wrqlvlhw6idd8771b5vg1i7g";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = ["clock"];
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "humantime";
            packageId = "humantime";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync" "macros" "rt" "time" "io-util"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
            optional = true;
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "aws" = ["cloud" "md-5"];
          "azure" = ["cloud" "httparse"];
          "base64" = ["dep:base64"];
          "cloud" = ["serde" "serde_json" "quick-xml" "hyper" "reqwest" "reqwest/stream" "chrono/serde" "base64" "rand" "ring" "http-body-util" "form_urlencoded" "serde_urlencoded"];
          "default" = ["fs"];
          "form_urlencoded" = ["dep:form_urlencoded"];
          "fs" = ["walkdir"];
          "gcp" = ["cloud" "rustls-pemfile"];
          "http" = ["cloud"];
          "http-body-util" = ["dep:http-body-util"];
          "httparse" = ["dep:httparse"];
          "hyper" = ["dep:hyper"];
          "integration" = ["rand"];
          "md-5" = ["dep:md-5"];
          "quick-xml" = ["dep:quick-xml"];
          "rand" = ["dep:rand"];
          "reqwest" = ["dep:reqwest"];
          "ring" = ["dep:ring"];
          "rustls-pemfile" = ["dep:rustls-pemfile"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "serde_urlencoded" = ["dep:serde_urlencoded"];
          "tls-webpki-roots" = ["reqwest?/rustls-tls-webpki-roots"];
          "walkdir" = ["dep:walkdir"];
        };
        resolvedDefaultFeatures = ["default" "fs" "walkdir"];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
            optional = true;
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
            features = ["std"];
          }
        ];
        features = {
          "alloc" = ["race"];
          "atomic-polyfill" = ["critical-section"];
          "critical-section" = ["dep:critical-section" "portable-atomic"];
          "default" = ["std"];
          "parking_lot" = ["dep:parking_lot_core"];
          "portable-atomic" = ["dep:portable-atomic"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "critical-section" "default" "portable-atomic" "race" "std"];
      };
      "once_cell_polyfill" = rec {
        crateName = "once_cell_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1bg0w99srq8h4mkl68l1mza2n2f2hvrg0n8vfa3izjr5nism32d4";
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.3.1";
        edition = "2018";
        sha256 = "10b3w0kydz5jf1ydyli5nv10gdfp97xh79bgz327d273bs46b3f0";
        libName = "opaque_debug";
        authors = [
          "RustCrypto Developers"
        ];
      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];
      };
      "parking" = rec {
        crateName = "parking";
        version = "2.2.1";
        edition = "2018";
        sha256 = "1fnfgmzkfpjd69v4j9x737b1k8pnn054bvzcn5dm3pkgq595d3gk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
        features = {
          "loom" = ["dep:loom"];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.4";
        edition = "2021";
        sha256 = "04sab1c7304jg8k0d5b2pxbj1fvgzcf69l3n2mfpkdb96vs8pmbh";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = ["lock_api/arc_lock"];
          "deadlock_detection" = ["parking_lot_core/deadlock_detection"];
          "nightly" = ["parking_lot_core/nightly" "lock_api/nightly"];
          "owning_ref" = ["lock_api/owning_ref"];
          "serde" = ["lock_api/serde"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.11";
        edition = "2021";
        sha256 = "19g4d6m5k4ggacinqprnn8xvdaszc3y5smsmbz1adcdmaqm8v0xw";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = {
              target,
              features,
            }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "deadlock_detection" = ["petgraph" "thread-id" "backtrace"];
          "petgraph" = ["dep:petgraph"];
          "thread-id" = ["dep:thread-id"];
        };
      };
      "password-hash" = rec {
        crateName = "password-hash";
        version = "0.5.0";
        edition = "2021";
        sha256 = "0ri1mim11zk0a9s40zdi288dfqvmdiryc7lw8vl46b59ifa08vrl";
        libName = "password_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["base64ct/alloc"];
          "default" = ["rand_core"];
          "getrandom" = ["rand_core/getrandom"];
          "rand_core" = ["dep:rand_core"];
          "std" = ["alloc" "base64ct/std" "rand_core/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "rand_core" "std"];
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "path-clean" = rec {
        crateName = "path-clean";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1vzwcrlz39rd94l89rppvkbsn7dvng449f1bnkyk3ayp43y9ld8p";
        libName = "path_clean";
        authors = [
          "Dan Reeves <hey@danreev.es>"
        ];
      };
      "pbkdf2" = rec {
        crateName = "pbkdf2";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1wms79jh4flpy1zi8xdp4h8ccxv4d85adc6zjagknvppc5vnmvgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["mac"];
          }
          {
            name = "hmac";
            packageId = "hmac";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "password-hash";
            packageId = "password-hash";
            optional = true;
            usesDefaultFeatures = false;
            features = ["rand_core"];
          }
          {
            name = "sha2";
            packageId = "sha2";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
        ];
        features = {
          "default" = ["hmac"];
          "hmac" = ["dep:hmac"];
          "parallel" = ["rayon" "std"];
          "password-hash" = ["dep:password-hash"];
          "rayon" = ["dep:rayon"];
          "sha1" = ["dep:sha1"];
          "sha2" = ["dep:sha2"];
          "simple" = ["hmac" "password-hash" "sha2"];
          "std" = ["password-hash/std"];
        };
        resolvedDefaultFeatures = ["default" "hmac" "password-hash" "sha2" "simple"];
      };
      "pem" = rec {
        crateName = "pem";
        version = "3.0.5";
        edition = "2021";
        sha256 = "1wwfk8sbyi9l18fvvn6z9p2gy7v7q7wimbhvrvixxj8a8zl3ibrq";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "std" = ["base64/std" "serde?/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "pem-rfc7468" = rec {
        crateName = "pem-rfc7468";
        version = "0.7.0";
        edition = "2021";
        sha256 = "04l4852scl4zdva31c1z6jafbak0ni5pi0j38ml108zwzjdrrcw8";
        libName = "pem_rfc7468";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
        ];
        features = {
          "alloc" = ["base64ct/alloc"];
          "std" = ["alloc" "base64ct/std"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "pest" = rec {
        crateName = "pest";
        version = "2.8.1";
        edition = "2021";
        sha256 = "08s342r6vv6ml5in4jk7pb97wgpf0frcnrvg0sqshn23sdb5zc0x";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            optional = true;
          }
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "memchr"];
          "memchr" = ["dep:memchr"];
          "miette-error" = ["std" "pretty-print" "dep:miette" "dep:thiserror"];
          "pretty-print" = ["dep:serde" "dep:serde_json"];
          "std" = ["ucd-trie/std" "dep:thiserror"];
        };
        resolvedDefaultFeatures = ["default" "memchr" "std"];
      };
      "pest_derive" = rec {
        crateName = "pest_derive";
        version = "2.8.1";
        edition = "2021";
        sha256 = "1g20ma4y29axbjhi3z64ihhpqzmiix71qjn7bs224yd7isg6s1dv";
        procMacro = true;
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_generator";
            packageId = "pest_generator";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "grammar-extras" = ["pest_generator/grammar-extras"];
          "not-bootstrap-in-src" = ["pest_generator/not-bootstrap-in-src"];
          "std" = ["pest/std" "pest_generator/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "pest_generator" = rec {
        crateName = "pest_generator";
        version = "2.8.1";
        edition = "2021";
        sha256 = "0rj9a20g4bjb4sl3zyzpxqg8mbn8c1kxp0nw08rfp0gp73k09r47";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_meta";
            packageId = "pest_meta";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        features = {
          "default" = ["std"];
          "grammar-extras" = ["pest_meta/grammar-extras"];
          "not-bootstrap-in-src" = ["pest_meta/not-bootstrap-in-src"];
          "std" = ["pest/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "pest_meta" = rec {
        crateName = "pest_meta";
        version = "2.8.1";
        edition = "2021";
        sha256 = "1mf01iln7shbnyxpdfnpf59gzn83nndqjkwiw3yh6n8g2wgi1lgd";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
        ];
        buildDependencies = [
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "not-bootstrap-in-src" = ["dep:cargo"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.6.5";
        edition = "2018";
        sha256 = "1ns7mbxidnn2pqahbbjccxkrqkrll2i5rbxx43ns6rh6fn3cridl";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
        ];
        features = {
          "all" = ["unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" "rayon"];
          "default" = ["graphmap" "stable_graph" "matrix_graph"];
          "quickcheck" = ["dep:quickcheck"];
          "rayon" = ["dep:rayon" "indexmap/rayon"];
          "serde" = ["dep:serde"];
          "serde-1" = ["serde" "serde_derive"];
          "serde_derive" = ["dep:serde_derive"];
          "unstable" = ["generate"];
        };
      };
      "pharos" = rec {
        crateName = "pharos";
        version = "0.5.3";
        edition = "2021";
        sha256 = "055lg1dzrxnryfy34a9cyrg21b7cl6l2frfx2p7fdvkz864p6mp9";
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
            features = ["std"];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
      };
      "phf" = rec {
        crateName = "phf";
        version = "0.11.3";
        edition = "2021";
        sha256 = "0y6hxp1d48rx2434wgi5g8j1pr8s5jja29ha2b65435fh057imhz";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_macros";
            packageId = "phf_macros";
            optional = true;
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "macros" = ["phf_macros"];
          "phf_macros" = ["dep:phf_macros"];
          "serde" = ["dep:serde"];
          "std" = ["phf_shared/std"];
          "uncased" = ["phf_shared/uncased"];
          "unicase" = ["phf_macros?/unicase" "phf_shared/unicase"];
        };
        resolvedDefaultFeatures = ["default" "macros" "phf_macros" "std" "unicase"];
      };
      "phf_codegen" = rec {
        crateName = "phf_codegen";
        version = "0.11.3";
        edition = "2021";
        sha256 = "0si1n6zr93kzjs3wah04ikw8z6npsr39jw4dam8yi9czg2609y5f";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
        ];
      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.11.3";
        edition = "2021";
        crateBin = [];
        sha256 = "0gc4np7s91ynrgw73s2i7iakhb4lzdv1gcyx7yhlc0n214a2701w";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = ["small_rng"];
          }
        ];
        features = {
          "criterion" = ["dep:criterion"];
        };
      };
      "phf_macros" = rec {
        crateName = "phf_macros";
        version = "0.11.3";
        edition = "2021";
        sha256 = "05kjfbyb439344rhmlzzw0f9bwk9fp95mmw56zs7yfn1552c0jpq";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
          {
            name = "unicase";
            packageId = "unicase";
            rename = "unicase_";
            optional = true;
          }
        ];
        features = {
          "unicase" = ["unicase_" "phf_shared/unicase"];
          "unicase_" = ["dep:unicase_"];
        };
        resolvedDefaultFeatures = ["unicase" "unicase_"];
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.11.3";
        edition = "2021";
        sha256 = "1rallyvh28jqd9i916gk5gk2igdmzlgvv5q0l3xbf3m6y8pbrsk7";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
          {
            name = "unicase";
            packageId = "unicase";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "uncased" = ["dep:uncased"];
          "unicase" = ["dep:unicase"];
        };
        resolvedDefaultFeatures = ["default" "std" "unicase"];
      };
      "pico-args" = rec {
        crateName = "pico-args";
        version = "0.5.0";
        edition = "2018";
        sha256 = "05d30pvxd6zlnkg2i3ilr5a70v3f3z2in18m67z25vinmykngqav";
        libName = "pico_args";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
        };
      };
      "pin-project 0.4.30" = rec {
        crateName = "pin-project";
        version = "0.4.30";
        edition = "2018";
        sha256 = "0nlxmsiq39bc73iryh92yslrp2jzlkdjjxd7rv5sjzpflljgkw1y";
        libName = "pin_project";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal 0.4.30";
            usesDefaultFeatures = false;
          }
        ];
      };
      "pin-project 1.1.10" = rec {
        crateName = "pin-project";
        version = "1.1.10";
        edition = "2021";
        sha256 = "12kadbnfm1f43cyadw9gsbyln1cy7vj764wz5c8wxaiza3filzv7";
        libName = "pin_project";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal 1.1.10";
          }
        ];
      };
      "pin-project-internal 0.4.30" = rec {
        crateName = "pin-project-internal";
        version = "0.4.30";
        edition = "2018";
        sha256 = "07p6mwz6kz317a6n3p93yk4llj939ihqdz7d1mwl7gmyx468s745";
        procMacro = true;
        libName = "pin_project_internal";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = ["full" "visit-mut"];
          }
        ];
      };
      "pin-project-internal 1.1.10" = rec {
        crateName = "pin-project-internal";
        version = "1.1.10";
        edition = "2021";
        sha256 = "0qgqzfl0f4lzaz7yl5llhbg97g68r15kljzihaw9wm64z17qx4bf";
        procMacro = true;
        libName = "pin_project_internal";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["parsing" "printing" "clone-impls" "proc-macro" "full" "visit-mut"];
          }
        ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";
      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];
      };
      "pkarr" = rec {
        crateName = "pkarr";
        version = "3.10.0";
        edition = "2021";
        sha256 = "1xw4d619iz200kpajldfap7i96acf968034k3yhivbhv67sg5cay";
        authors = [
          "Nuh <nuh@nuh.dev>"
          "SeverinAlexB <severin@synonym.to>"
          "SHAcollision <shacollision@synonym.to>"
        ];
        dependencies = [
          {
            name = "async-compat";
            packageId = "async-compat";
            optional = true;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "base32";
            packageId = "base32";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            optional = true;
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
            optional = true;
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "futures-buffered";
            packageId = "futures-buffered";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
            features = ["js"];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
          }
          {
            name = "lru";
            packageId = "lru 0.13.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ntimestamp";
            packageId = "ntimestamp";
            optional = true;
            features = ["full"];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["rustls-tls"];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
            features = ["rustls-tls"];
          }
          {
            name = "self_cell";
            packageId = "self_cell 1.2.0";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "sha1_smol";
            packageId = "sha1_smol";
            optional = true;
          }
          {
            name = "simple-dns";
            packageId = "simple-dns";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            optional = true;
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = ["rustls-tls"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["macros" "rt-multi-thread"];
          }
        ];
        features = {
          "__client" = ["signed_packet" "dep:dyn-clone" "dep:lru" "dep:sha1_smol" "dep:futures-lite" "dep:async-compat" "dep:tokio" "dep:log" "dep:tracing" "dep:wasm-bindgen-futures"];
          "default" = ["full-client"];
          "dht" = ["dep:mainline" "__client"];
          "endpoints" = ["__client" "dep:genawaiter"];
          "extra" = ["endpoints" "lmdb-cache" "reqwest-resolve" "tls" "reqwest-builder"];
          "full" = ["full-client" "extra"];
          "full-client" = ["dht" "relays"];
          "lmdb-cache" = ["__client" "dep:heed" "dep:byteorder" "dep:page_size"];
          "relays" = ["dep:url" "dep:reqwest" "dep:futures-buffered" "__client"];
          "reqwest-builder" = ["tls" "reqwest-resolve"];
          "reqwest-resolve" = ["endpoints" "dep:reqwest"];
          "signed_packet" = ["keys" "dep:simple-dns" "dep:ntimestamp" "dep:bytes" "dep:self_cell"];
          "tls" = ["endpoints" "ed25519-dalek/pkcs8" "dep:webpki" "dep:rustls"];
        };
        resolvedDefaultFeatures = ["__client" "keys" "relays" "signed_packet"];
      };
      "pkcs1" = rec {
        crateName = "pkcs1";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0zz4mil3nchnxljdfs2k5ab1cjqn7kq5lqp62n9qfix01zqvkzy8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            features = ["oid"];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spki";
            packageId = "spki";
          }
        ];
        features = {
          "alloc" = ["der/alloc" "zeroize" "pkcs8?/alloc"];
          "pem" = ["alloc" "der/pem" "pkcs8?/pem"];
          "pkcs8" = ["dep:pkcs8"];
          "std" = ["der/std" "alloc"];
          "zeroize" = ["der/zeroize"];
        };
        resolvedDefaultFeatures = ["alloc" "pem" "pkcs8" "std" "zeroize"];
      };
      "pkcs8" = rec {
        crateName = "pkcs8";
        version = "0.10.2";
        edition = "2021";
        sha256 = "1dx7w21gvn07azszgqd3ryjhyphsrjrmq5mmz1fbxkj5g0vv4l7r";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            features = ["oid"];
          }
          {
            name = "spki";
            packageId = "spki";
          }
        ];
        features = {
          "3des" = ["encryption" "pkcs5/3des"];
          "alloc" = ["der/alloc" "der/zeroize" "spki/alloc"];
          "des-insecure" = ["encryption" "pkcs5/des-insecure"];
          "encryption" = ["alloc" "pkcs5/alloc" "pkcs5/pbes2" "rand_core"];
          "getrandom" = ["rand_core/getrandom"];
          "pem" = ["alloc" "der/pem" "spki/pem"];
          "pkcs5" = ["dep:pkcs5"];
          "rand_core" = ["dep:rand_core"];
          "sha1-insecure" = ["encryption" "pkcs5/sha1-insecure"];
          "std" = ["alloc" "der/std" "spki/std"];
          "subtle" = ["dep:subtle"];
        };
        resolvedDefaultFeatures = ["alloc" "pem" "std"];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.32";
        edition = "2018";
        sha256 = "0k4h3gnzs94sjb2ix6jyksacs52cf1fanpwsmlhjnwrdnp8dppby";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
      };
      "pnet_base" = rec {
        crateName = "pnet_base";
        version = "0.34.0";
        edition = "2021";
        sha256 = "0k2z3jh6vw99bwl0ckpsd142n4yiscza1bmj3b86i2xk7bxzck7y";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
          "Linus Färnstrand <faern@faern.net>"
        ];
        dependencies = [
          {
            name = "no-std-net";
            packageId = "no-std-net";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "std" = ["no-std-net/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "pnet_macros" = rec {
        crateName = "pnet_macros";
        version = "0.34.0";
        edition = "2021";
        sha256 = "010qhwkw597pzmiqmphnf8fl11pwlp5sa2nai90a017fkr4ig2v8";
        procMacro = true;
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "pnet_macros_support" = rec {
        crateName = "pnet_macros_support";
        version = "0.34.0";
        edition = "2021";
        sha256 = "0mhg0dzdxg6lkpx3z60c6nc39dkq9jz1n8hgmf77zlsb5yvjbagf";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
        ];
        dependencies = [
          {
            name = "pnet_base";
            packageId = "pnet_base";
            usesDefaultFeatures = false;
          }
        ];
      };
      "pnet_packet" = rec {
        crateName = "pnet_packet";
        version = "0.34.0";
        edition = "2018";
        sha256 = "1flhxbwgw9348c955hc0mi6h7ma2qgdqiqm871xgxdwnaf10b859";
        authors = [
          "Robert Clipsham <robert@octarineparrot.com>"
        ];
        dependencies = [
          {
            name = "pnet_base";
            packageId = "pnet_base";
            usesDefaultFeatures = false;
          }
          {
            name = "pnet_macros";
            packageId = "pnet_macros";
          }
          {
            name = "pnet_macros_support";
            packageId = "pnet_macros_support";
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["pnet_base/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "poem" = rec {
        crateName = "poem";
        version = "3.1.12";
        edition = "2024";
        sha256 = "12yclkkzzjf0wjsgcqwqfpw9c9iy3jam586w8xqji1rcjf0715wz";
        authors = [
          "sunli <scott_s829@163.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            features = ["sink"];
          }
          {
            name = "headers";
            packageId = "headers";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = ["http1" "http2"];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = ["tokio"];
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "nix";
            packageId = "nix";
            target = {
              target,
              features,
            }: (target."unix" or false);
            features = ["fs" "user"];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "poem-derive";
            packageId = "poem-derive";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rfc7239";
            packageId = "rfc7239";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sse-codec";
            packageId = "sse-codec";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            features = ["futures"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync" "time" "macros"];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["io"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "wildmatch";
            packageId = "wildmatch";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["rt-multi-thread" "macros"];
          }
        ];
        features = {
          "acme" = ["acme-native-roots"];
          "acme-base" = ["server" "reqwest" "rustls" "ring" "base64" "rcgen" "x509-parser" "chrono"];
          "acme-native-roots" = ["acme-base" "reqwest/rustls-tls-native-roots"];
          "acme-webpki-roots" = ["acme-base" "reqwest/rustls-tls-webpki-roots"];
          "anyhow" = ["dep:anyhow"];
          "async-compression" = ["dep:async-compression"];
          "base64" = ["dep:base64"];
          "chrono" = ["dep:chrono"];
          "compression" = ["async-compression"];
          "cookie" = ["libcookie" "chrono" "time"];
          "csrf" = ["cookie" "base64" "libcsrf"];
          "default" = ["server"];
          "embed" = ["rust-embed" "hex" "mime_guess"];
          "eyre06" = ["dep:eyre06"];
          "fluent" = ["dep:fluent"];
          "fluent-langneg" = ["dep:fluent-langneg"];
          "fluent-syntax" = ["dep:fluent-syntax"];
          "hex" = ["dep:hex"];
          "httpdate" = ["dep:httpdate"];
          "i18n" = ["fluent" "fluent-langneg" "fluent-syntax" "unic-langid" "intl-memoizer"];
          "intl-memoizer" = ["dep:intl-memoizer"];
          "libcookie" = ["dep:libcookie"];
          "libcsrf" = ["dep:libcsrf"];
          "libopentelemetry" = ["dep:libopentelemetry"];
          "libprometheus" = ["dep:libprometheus"];
          "libtempfile" = ["dep:libtempfile"];
          "mime_guess" = ["dep:mime_guess"];
          "multer" = ["dep:multer"];
          "multipart" = ["multer"];
          "native-tls" = ["server" "tokio-native-tls"];
          "openssl" = ["dep:openssl"];
          "openssl-tls" = ["server" "tokio-openssl" "openssl"];
          "opentelemetry" = ["libopentelemetry" "opentelemetry-http" "opentelemetry-semantic-conventions"];
          "opentelemetry-http" = ["dep:opentelemetry-http"];
          "opentelemetry-prometheus" = ["dep:opentelemetry-prometheus"];
          "opentelemetry-semantic-conventions" = ["dep:opentelemetry-semantic-conventions"];
          "priority-queue" = ["dep:priority-queue"];
          "prometheus" = ["libopentelemetry" "opentelemetry-prometheus" "libprometheus"];
          "quick-xml" = ["dep:quick-xml"];
          "rand" = ["dep:rand"];
          "rcgen" = ["dep:rcgen"];
          "redis" = ["dep:redis"];
          "redis-session" = ["session" "redis"];
          "requestid" = ["dep:uuid"];
          "reqwest" = ["dep:reqwest"];
          "ring" = ["dep:ring"];
          "rust-embed" = ["dep:rust-embed"];
          "rustls" = ["server" "tokio-rustls" "rustls-pemfile"];
          "rustls-pemfile" = ["dep:rustls-pemfile"];
          "serde_yaml" = ["dep:serde_yaml"];
          "server" = ["tokio/rt" "tokio/net" "hyper/server" "hyper-util/server-auto" "hyper-util/tokio"];
          "session" = ["tokio/rt" "cookie" "rand" "priority-queue" "base64"];
          "sonic-rs" = ["dep:sonic-rs"];
          "sse" = ["tokio-stream"];
          "sse-codec" = ["dep:sse-codec"];
          "static-files" = ["httpdate" "mime_guess" "tokio/io-util" "tokio/fs"];
          "tempfile" = ["libtempfile" "tokio/fs"];
          "test" = ["sse" "sse-codec" "tokio-util/compat"];
          "time" = ["dep:time"];
          "tokio-metrics" = ["dep:tokio-metrics"];
          "tokio-native-tls" = ["dep:tokio-native-tls"];
          "tokio-openssl" = ["dep:tokio-openssl"];
          "tokio-rustls" = ["dep:tokio-rustls"];
          "tokio-stream" = ["dep:tokio-stream"];
          "tokio-tungstenite" = ["dep:tokio-tungstenite"];
          "tower" = ["dep:tower"];
          "tower-compat" = ["tokio/rt" "tower"];
          "unic-langid" = ["dep:unic-langid"];
          "websocket" = ["tokio/rt" "tokio-tungstenite" "base64"];
          "x509-parser" = ["dep:x509-parser"];
          "xml" = ["quick-xml"];
          "yaml" = ["serde_yaml"];
        };
        resolvedDefaultFeatures = ["anyhow" "default" "server" "sse" "sse-codec" "test" "tokio-stream"];
      };
      "poem-derive" = rec {
        crateName = "poem-derive";
        version = "3.1.12";
        edition = "2024";
        sha256 = "1r1dlwqm5kbsdghjfprvx25ryqhb6zyc9kr3zq7j9jz1dpm2yvh5";
        procMacro = true;
        libName = "poem_derive";
        authors = [
          "sunli <scott_s829@163.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
      };
      "poly1305" = rec {
        crateName = "poly1305";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1grs77skh7d8vi61ji44i8gpzs3r9x7vay50i6cg8baxfa8bsnc1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = ["universal-hash/std"];
          "zeroize" = ["dep:zeroize"];
        };
      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.11.1";
        edition = "2018";
        sha256 = "10s4cx9y3jvw0idip09ar52s2kymq8rq9a668f793shn1ar6fhpq";
        libName = "portable_atomic";
        features = {
          "critical-section" = ["dep:critical-section"];
          "default" = ["fallback"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "fallback"];
      };
      "portmapper" = rec {
        crateName = "portmapper";
        version = "0.8.0";
        edition = "2024";
        sha256 = "0av4bwf1ywca82bd4mnisgwhr2g4csagzfa2grap0ap6xdfrgwb2";
        authors = [
          "n0 team"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            features = ["debug" "display" "from" "try_into" "deref"];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
          }
          {
            name = "igd-next";
            packageId = "igd-next";
            features = ["aio_tokio"];
          }
          {
            name = "iroh-metrics";
            packageId = "iroh-metrics";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "nested_enum_utils";
            packageId = "nested_enum_utils";
          }
          {
            name = "netwatch";
            packageId = "netwatch";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive" "rc"];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "snafu";
            packageId = "snafu";
            features = ["rust_1_81"];
          }
          {
            name = "socket2";
            packageId = "socket2 0.6.0";
          }
          {
            name = "time";
            packageId = "time";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util" "macros" "sync" "rt" "net" "fs" "io-std" "signal" "process"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["io-util" "io" "codec" "rt"];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "url";
            packageId = "url";
            features = ["serde"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["io-util" "sync" "rt" "net" "fs" "macros" "time" "test-util"];
          }
        ];
        features = {
          "default" = ["metrics"];
          "metrics" = ["iroh-metrics/metrics"];
        };
        resolvedDefaultFeatures = ["metrics"];
      };
      "postcard" = rec {
        crateName = "postcard";
        version = "1.1.3";
        edition = "2021";
        sha256 = "094srff139n7m8g5ssq36ag6s29ikf7fgpz660x2hkj5vnsw6r37";
        authors = [
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "cobs";
            packageId = "cobs";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io 0.4.0";
            rename = "embedded-io-04";
            optional = true;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io 0.6.1";
            rename = "embedded-io-06";
            optional = true;
          }
          {
            name = "heapless";
            packageId = "heapless 0.7.17";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde"];
          }
          {
            name = "postcard-derive";
            packageId = "postcard-derive";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
        ];
        features = {
          "alloc" = ["serde/alloc" "embedded-io-04?/alloc" "embedded-io-06?/alloc"];
          "crc" = ["dep:crc"];
          "default" = ["heapless-cas"];
          "defmt" = ["dep:defmt"];
          "embedded-io" = ["dep:embedded-io-04"];
          "embedded-io-04" = ["dep:embedded-io-04"];
          "embedded-io-06" = ["dep:embedded-io-06"];
          "experimental-derive" = ["postcard-derive"];
          "heapless" = ["dep:heapless"];
          "heapless-cas" = ["heapless" "dep:heapless" "heapless/cas"];
          "nalgebra-v0_33" = ["nalgebra_v0_33"];
          "nalgebra_v0_33" = ["dep:nalgebra_v0_33"];
          "postcard-derive" = ["dep:postcard-derive"];
          "use-crc" = ["crc"];
          "use-defmt" = ["defmt"];
          "use-std" = ["serde/std" "alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "experimental-derive" "heapless" "heapless-cas" "postcard-derive" "use-std"];
      };
      "postcard-derive" = rec {
        crateName = "postcard-derive";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1fz2dw506sbsvsfnm39d183diz17yx3bm0f8kkncx5x11782n8z0";
        procMacro = true;
        libName = "postcard_derive";
        authors = [
          "Lachlan Sneff <lachlan.sneff@gmail.com>"
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "potential_utf" = rec {
        crateName = "potential_utf";
        version = "0.1.2";
        edition = "2021";
        sha256 = "11dm6k3krx3drbvhgjw8z508giiv0m09wzl6ghza37176w4c79z5";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["serde?/alloc" "zerovec?/alloc"];
          "databake" = ["dep:databake"];
          "serde" = ["dep:serde"];
          "writeable" = ["dep:writeable" "alloc"];
          "zerovec" = ["dep:zerovec"];
        };
        resolvedDefaultFeatures = ["zerovec"];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = ["std" "macros"];
          "macros" = ["dep:powerfmt-macros"];
          "std" = ["alloc"];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.21";
        edition = "2021";
        sha256 = "1abxx6qz5qnd43br1dd9b2savpihzjza8gb4fbzdql1gxp2f7sl5";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = ["simd"];
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["simd" "std"];
      };
      "precis-core" = rec {
        crateName = "precis-core";
        version = "0.1.11";
        edition = "2018";
        sha256 = "0mlf1kz6v996126n31krbf9bw39llps7pyrcd3wcdq1jy4qpnblw";
        libName = "precis_core";
        authors = [
          "Santiago Carot-Nemesio <sancane@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        buildDependencies = [
          {
            name = "precis-tools";
            packageId = "precis-tools";
          }
          {
            name = "ucd-parse";
            packageId = "ucd-parse";
          }
        ];
        devDependencies = [
          {
            name = "precis-tools";
            packageId = "precis-tools";
          }
          {
            name = "ucd-parse";
            packageId = "ucd-parse";
          }
        ];
        features = {
          "networking" = ["precis-tools/networking"];
        };
      };
      "precis-profiles" = rec {
        crateName = "precis-profiles";
        version = "0.1.12";
        edition = "2018";
        sha256 = "1wfkq1xzlifmx07l0pgv2vdh99r4m1mpd527941qyf2hizvnfkyw";
        libName = "precis_profiles";
        authors = [
          "Santiago Carot-Nemesio <sancane@gmail.com"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "precis-core";
            packageId = "precis-core";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
        ];
        buildDependencies = [
          {
            name = "precis-tools";
            packageId = "precis-tools";
          }
        ];
        features = {
          "networking" = ["precis-core/networking" "precis-tools/networking"];
        };
      };
      "precis-tools" = rec {
        crateName = "precis-tools";
        version = "0.1.9";
        edition = "2018";
        sha256 = "0jhcs6bfyj7g0ki18hkfhm5vivc9vdj5fx0b5kyppb47b0nyphbc";
        libName = "precis_tools";
        authors = [
          "Santiago Carot-Nemesio <sancane@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "ucd-parse";
            packageId = "ucd-parse";
          }
        ];
        features = {
          "networking" = ["reqwest"];
          "reqwest" = ["dep:reqwest"];
        };
      };
      "precomputed-hash" = rec {
        crateName = "precomputed-hash";
        version = "0.1.1";
        edition = "2015";
        sha256 = "075k9bfy39jhs53cb2fpb9klfakx2glxnf28zdw08ws6lgpq6lwj";
        libName = "precomputed_hash";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
        ];
      };
      "proc-macro-crate" = rec {
        crateName = "proc-macro-crate";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0d9xlymplfi9yv3f5g4bp0d6qh70apnihvqcjllampx4f5lmikpd";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit";
            usesDefaultFeatures = false;
            features = ["parse"];
          }
        ];
      };
      "proc-macro-error-attr2" = rec {
        crateName = "proc-macro-error-attr2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1ifzi763l7swl258d8ar4wbpxj4c9c2im7zy89avm6xv6vgl5pln";
        procMacro = true;
        libName = "proc_macro_error_attr2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
      };
      "proc-macro-error2" = rec {
        crateName = "proc-macro-error2";
        version = "2.0.1";
        edition = "2021";
        sha256 = "00lq21vgh7mvyx51nwxwf822w2fpww1x0z8z0q47p8705g2hbv0i";
        libName = "proc_macro_error2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr2";
            packageId = "proc-macro-error-attr2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
        features = {
          "default" = ["syn-error"];
          "syn-error" = ["dep:syn"];
        };
        resolvedDefaultFeatures = ["default" "syn-error"];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.95";
        edition = "2021";
        sha256 = "0y7pwxv6sh4fgg6s715ygk1i7g3w02c0ljgcsfm046isibkfbcq2";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = ["proc-macro"];
        };
        resolvedDefaultFeatures = ["default" "proc-macro"];
      };
      "proc-macro2-diagnostics" = rec {
        crateName = "proc-macro2-diagnostics";
        version = "0.10.1";
        edition = "2018";
        sha256 = "1j48ipc80pykvhx6yhndfa774s58ax1h6sm6mlhf09ls76f6l1mg";
        libName = "proc_macro2_diagnostics";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "colors" = ["yansi"];
          "default" = ["colors"];
          "yansi" = ["dep:yansi"];
        };
      };
      "psl-types" = rec {
        crateName = "psl-types";
        version = "2.0.11";
        edition = "2018";
        sha256 = "1b3cz1q07iy744a39smykra2j83nv8vmni6la37wnx3ax17jkjrk";
        libName = "psl_types";
        authors = [
          "rushmorem <rushmore@webenchanter.com>"
        ];
      };
      "psm" = rec {
        crateName = "psm";
        version = "0.1.26";
        edition = "2021";
        sha256 = "07xfl8gpz8v9qz2zvnpcy9r3nppbhxlxkgqbxcdwsdl5xij4953f";
        authors = [
          "Simonas Kazlauskas <psm@kazlauskas.me>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
      };
      "ptr_meta" = rec {
        crateName = "ptr_meta";
        version = "0.1.4";
        edition = "2018";
        sha256 = "1wd4wy0wxrcays4f1gy8gwcmxg7mskmivcv40p0hidh6xbvwqf07";
        authors = [
          "David Koloski <djkoloski@gmail.com>"
        ];
        dependencies = [
          {
            name = "ptr_meta_derive";
            packageId = "ptr_meta_derive";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "ptr_meta_derive" = rec {
        crateName = "ptr_meta_derive";
        version = "0.1.4";
        edition = "2018";
        sha256 = "1b69cav9wn67cixshizii0q5mlbl0lihx706vcrzm259zkdlbf0n";
        procMacro = true;
        authors = [
          "David Koloski <djkoloski@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = ["full"];
          }
        ];
      };
      "quick_cache 0.5.2" = rec {
        crateName = "quick_cache";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1p6knq8ljm8jj75bqlv5hsxh63z6vyf4xk9676wnnrv8fsma2mgb";
        authors = [
          "Arthur Silva <arthurprs@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.12";
            optional = true;
          }
          {
            name = "equivalent";
            packageId = "equivalent";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
            features = ["raw" "inline-more"];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "default" = ["ahash" "parking_lot"];
          "parking_lot" = ["dep:parking_lot"];
          "shuttle" = ["dep:shuttle"];
        };
        resolvedDefaultFeatures = ["ahash" "default" "parking_lot"];
      };
      "quick_cache 0.6.16" = rec {
        crateName = "quick_cache";
        version = "0.6.16";
        edition = "2021";
        sha256 = "11mpdvvmk9lkzyfv7vxgghvgm9y0nkizvlpkp6438zvvn1669mls";
        authors = [
          "Arthur Silva <arthurprs@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.12";
            optional = true;
          }
          {
            name = "equivalent";
            packageId = "equivalent";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
            features = ["inline-more"];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "default" = ["ahash" "parking_lot"];
          "parking_lot" = ["dep:parking_lot"];
          "shuttle" = ["dep:shuttle"];
        };
        resolvedDefaultFeatures = ["ahash" "default" "parking_lot"];
      };
      "quinn" = rec {
        crateName = "quinn";
        version = "0.11.8";
        edition = "2021";
        sha256 = "1j02h87nfxww5mjcw4vjcnx8b70q0yinnc8xvjv82ryskii18qk2";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "quinn-udp";
            packageId = "quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = ["tracing"];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "socket2";
            packageId = "socket2 0.5.10";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync" "rt" "rt-multi-thread" "time" "macros"];
          }
        ];
        features = {
          "async-io" = ["dep:async-io"];
          "async-std" = ["dep:async-std"];
          "aws-lc-rs" = ["proto/aws-lc-rs"];
          "aws-lc-rs-fips" = ["proto/aws-lc-rs-fips"];
          "bloom" = ["proto/bloom"];
          "default" = ["log" "platform-verifier" "runtime-tokio" "rustls-ring" "bloom"];
          "futures-io" = ["dep:futures-io"];
          "log" = ["tracing/log" "proto/log" "udp/log"];
          "platform-verifier" = ["proto/platform-verifier"];
          "ring" = ["proto/ring"];
          "runtime-async-std" = ["async-io" "async-std"];
          "runtime-smol" = ["async-io" "smol"];
          "runtime-tokio" = ["tokio/time" "tokio/rt" "tokio/net"];
          "rustls" = ["rustls-ring"];
          "rustls-aws-lc-rs" = ["dep:rustls" "aws-lc-rs" "proto/rustls-aws-lc-rs" "proto/aws-lc-rs"];
          "rustls-aws-lc-rs-fips" = ["dep:rustls" "aws-lc-rs-fips" "proto/rustls-aws-lc-rs-fips" "proto/aws-lc-rs-fips"];
          "rustls-log" = ["rustls?/logging"];
          "rustls-ring" = ["dep:rustls" "ring" "proto/rustls-ring" "proto/ring"];
          "smol" = ["dep:smol"];
        };
        resolvedDefaultFeatures = ["ring" "runtime-tokio" "rustls" "rustls-ring"];
      };
      "quinn-proto" = rec {
        crateName = "quinn-proto";
        version = "0.11.12";
        edition = "2021";
        sha256 = "0bj2yyrf1mrg2bcj19ipsspvrj5sq0di0pz5maw5pj31j4x89ps9";
        libName = "quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["wasm_js"];
          }
          {
            name = "lru-slab";
            packageId = "lru-slab";
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["wasm32_unknown_unknown_js"];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = ["web"];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = ["alloc" "alloc"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "aws-lc-rs" = ["dep:aws-lc-rs" "aws-lc-rs?/aws-lc-sys" "aws-lc-rs?/prebuilt-nasm"];
          "aws-lc-rs-fips" = ["aws-lc-rs" "aws-lc-rs?/fips"];
          "bloom" = ["dep:fastbloom"];
          "default" = ["rustls-ring" "log" "bloom"];
          "log" = ["tracing/log"];
          "platform-verifier" = ["dep:rustls-platform-verifier"];
          "ring" = ["dep:ring"];
          "rustls" = ["rustls-ring"];
          "rustls-aws-lc-rs" = ["dep:rustls" "rustls?/aws-lc-rs" "aws-lc-rs"];
          "rustls-aws-lc-rs-fips" = ["rustls-aws-lc-rs" "aws-lc-rs-fips"];
          "rustls-log" = ["rustls?/logging"];
          "rustls-ring" = ["dep:rustls" "rustls?/ring" "ring"];
        };
        resolvedDefaultFeatures = ["ring" "rustls-ring"];
      };
      "quinn-udp" = rec {
        crateName = "quinn-udp";
        version = "0.5.13";
        edition = "2021";
        sha256 = "0w0ri3wv5g419i5dfv4qmjxh4ayc4hp77y2gy4p3axp2kqhb3szw";
        libName = "quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2 0.5.10";
            target = {
              target,
              features,
            }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_System_IO" "Win32_Networking_WinSock"];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = ["tracing" "log"];
          "direct-log" = ["dep:log"];
          "log" = ["tracing/log"];
          "tracing" = ["dep:tracing"];
        };
        resolvedDefaultFeatures = ["tracing"];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["proc-macro"];
          "proc-macro" = ["proc-macro2/proc-macro"];
        };
        resolvedDefaultFeatures = ["default" "proc-macro"];
      };
      "quoted-string-parser" = rec {
        crateName = "quoted-string-parser";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1sf5dywn5giwa69m3k44vzlmbcz8fjgplrnby40x0ldlrmwm7iqd";
        libName = "quoted_string_parser";
        authors = [
          "Santiago Carot-Nemesio <sancane@gmail.com"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
        ];
      };
      "r-efi" = rec {
        crateName = "r-efi";
        version = "5.3.0";
        edition = "2018";
        sha256 = "03sbfm3g7myvzyylff6qaxk4z6fy76yv860yy66jiswc2m6b7kb9";
        libName = "r_efi";
        features = {
          "core" = ["dep:core"];
          "examples" = ["native"];
          "rustc-dep-of-std" = ["core"];
        };
      };
      "ractor" = rec {
        crateName = "ractor";
        version = "0.15.8";
        edition = "2021";
        sha256 = "0pc4b0g28kzk48yx6qg54244in8ap5vsby19xmh07yc0y0l3d85j";
        authors = [
          "Sean Lawlor"
          "Evan Au"
          "Dillon George"
        ];
        dependencies = [
          {
            name = "bon";
            packageId = "bon";
          }
          {
            name = "dashmap";
            packageId = "dashmap 6.1.0";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            features = ["derive"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
          {
            name = "tokio_with_wasm";
            packageId = "tokio_with_wasm";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = ["macros" "sync" "rt" "time"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = ["attributes"];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = ["rt" "time" "sync" "macros"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            target = {
              target,
              features,
            }: (!(("wasm32" == target."arch" or null) && ("unknown" == target."os" or null)));
            features = ["rt" "time" "sync" "macros" "rt-multi-thread" "tracing"];
          }
        ];
        features = {
          "async-std" = ["dep:async-std"];
          "async-trait" = ["dep:async-trait"];
          "blanket_serde" = ["serde" "pot" "cluster"];
          "default" = ["tokio_runtime" "message_span_propogation"];
          "pot" = ["dep:pot"];
          "serde" = ["dep:serde"];
          "tokio_runtime" = ["tokio/time" "tokio/rt" "tokio/macros" "tokio/tracing"];
        };
        resolvedDefaultFeatures = ["default" "message_span_propogation" "tokio_runtime"];
      };
      "radium" = rec {
        crateName = "radium";
        version = "0.7.0";
        edition = "2018";
        sha256 = "02cxfi3ky3c4yhyqx9axqwhyaca804ws46nn4gc1imbk94nzycyw";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];
      };
      "radix_trie" = rec {
        crateName = "radix_trie";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1zaq3im5ss03w91ij11cj97vvzc5y1f3064d9pi2ysnwziww2sf0";
        authors = [
          "Michael Sproul <micsproul@gmail.com>"
        ];
        dependencies = [
          {
            name = "endian-type";
            packageId = "endian-type";
          }
          {
            name = "nibble_vec";
            packageId = "nibble_vec";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["serde"];
      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "alloc" = ["rand_core/alloc"];
          "default" = ["std" "std_rng"];
          "getrandom" = ["rand_core/getrandom"];
          "libc" = ["dep:libc"];
          "log" = ["dep:log"];
          "packed_simd" = ["dep:packed_simd"];
          "rand_chacha" = ["dep:rand_chacha"];
          "serde" = ["dep:serde"];
          "serde1" = ["serde" "rand_core/serde1"];
          "simd_support" = ["packed_simd"];
          "std" = ["rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc"];
          "std_rng" = ["rand_chacha"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "getrandom" "libc" "rand_chacha" "small_rng" "std" "std_rng"];
      };
      "rand 0.9.2" = rec {
        crateName = "rand";
        version = "0.9.2";
        edition = "2021";
        sha256 = "1lah73ainvrgl7brcxx0pwhpnqa3sm3qaj672034jz8i0q7pgckd";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "std_rng" "os_rng" "small_rng" "thread_rng"];
          "log" = ["dep:log"];
          "os_rng" = ["rand_core/os_rng"];
          "serde" = ["dep:serde" "rand_core/serde"];
          "std" = ["rand_core/std" "rand_chacha?/std" "alloc"];
          "std_rng" = ["dep:rand_chacha"];
          "thread_rng" = ["std" "std_rng" "os_rng"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "os_rng" "small_rng" "std" "std_rng" "thread_rng"];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = ["simd"];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "serde1" = ["serde"];
          "std" = ["ppv-lite86/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "rand_chacha 0.9.0" = rec {
        crateName = "rand_chacha";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1jr5ygix7r60pz0s1cv3ms1f6pd1i9pcdmnxzzhjc3zn3mgjn0nk";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = ["simd"];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            features = ["os_rng"];
          }
        ];
        features = {
          "default" = ["std"];
          "os_rng" = ["rand_core/os_rng"];
          "serde" = ["dep:serde"];
          "std" = ["ppv-lite86/std" "rand_core/std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = ["dep:getrandom"];
          "serde" = ["dep:serde"];
          "serde1" = ["serde"];
          "std" = ["alloc" "getrandom" "getrandom/std"];
        };
        resolvedDefaultFeatures = ["alloc" "getrandom" "std"];
      };
      "rand_core 0.9.3" = rec {
        crateName = "rand_core";
        version = "0.9.3";
        edition = "2021";
        sha256 = "0f3xhf16yks5ic6kmgxcpv1ngdhp48mmfy4ag82i1wnwh8ws3ncr";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
        ];
        features = {
          "os_rng" = ["dep:getrandom"];
          "serde" = ["dep:serde"];
          "std" = ["getrandom?/std"];
        };
        resolvedDefaultFeatures = ["os_rng" "std"];
      };
      "rawpointer" = rec {
        crateName = "rawpointer";
        version = "0.2.1";
        edition = "2015";
        sha256 = "1qy1qvj17yh957vhffnq6agq0brvylw27xgks171qrah75wmg8v0";
        authors = [
          "bluss"
        ];
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.11.0";
        edition = "2021";
        sha256 = "13x5fxb7rn4j2yw0cr26n7782jkc7rjzmdkg42qxk3xz0p8033rn";
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = ["dep:wasm_sync" "rayon-core/web_spin_lock"];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.13.0";
        edition = "2021";
        links = "rayon-core";
        sha256 = "14dbr0sq83a6lf1rfjq5xdpk5r6zgzvmzs5j6110vlv2007qpq92";
        libName = "rayon_core";
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = ["dep:wasm_sync"];
        };
      };
      "reblessive" = rec {
        crateName = "reblessive";
        version = "0.4.3";
        edition = "2021";
        sha256 = "131wwys6s5vfdr23bbrkvxxhip2li5pdicy4a88im9365bma9i5v";
        features = {
        };
        resolvedDefaultFeatures = ["tree"];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.17";
        edition = "2021";
        sha256 = "0xrvpchkaxph3r5ww2i04v9nwg3843fp3prf8kqlh1gv01b4c1sl";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
        features = {
          "core" = ["dep:core"];
          "default" = ["userspace"];
          "rustc-dep-of-std" = ["core" "bitflags/rustc-dep-of-std"];
        };
        resolvedDefaultFeatures = ["default" "userspace"];
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.4.6";
        edition = "2021";
        sha256 = "0hya2cxx6hxmjfxzv9n8rjl5igpychav7zfi1f81pz6i4krry05s";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            features = ["std"];
          }
          {
            name = "libredox";
            packageId = "libredox";
            usesDefaultFeatures = false;
            features = ["std" "call"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "auth" = ["rust-argon2" "zeroize"];
          "default" = ["auth"];
          "rust-argon2" = ["dep:rust-argon2"];
          "zeroize" = ["dep:zeroize"];
        };
      };
      "ref-cast" = rec {
        crateName = "ref-cast";
        version = "1.0.24";
        edition = "2021";
        sha256 = "1kx57g118vs9sqi6d2dcxy6vp8jbx8n5hilmv1sacip9vc8y82ja";
        libName = "ref_cast";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "ref-cast-impl";
            packageId = "ref-cast-impl";
          }
        ];
      };
      "ref-cast-impl" = rec {
        crateName = "ref-cast-impl";
        version = "1.0.24";
        edition = "2021";
        sha256 = "1ir7dm7hpqqdgg60hlspsc1ck6wli7wa3xcqrsxz7wdz45f24r8i";
        procMacro = true;
        libName = "ref_cast_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            usesDefaultFeatures = false;
            features = ["alloc" "syntax" "meta" "nfa-pikevm"];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "perf" "unicode" "regex-syntax/default"];
          "logging" = ["aho-corasick?/logging" "memchr?/logging" "regex-automata/logging"];
          "perf" = ["perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal"];
          "perf-backtrack" = ["regex-automata/nfa-backtrack"];
          "perf-dfa" = ["regex-automata/hybrid"];
          "perf-dfa-full" = ["regex-automata/dfa-build" "regex-automata/dfa-search"];
          "perf-inline" = ["regex-automata/perf-inline"];
          "perf-literal" = ["dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal"];
          "perf-onepass" = ["regex-automata/dfa-onepass"];
          "std" = ["aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode"];
          "unicode-age" = ["regex-automata/unicode-age" "regex-syntax/unicode-age"];
          "unicode-bool" = ["regex-automata/unicode-bool" "regex-syntax/unicode-bool"];
          "unicode-case" = ["regex-automata/unicode-case" "regex-syntax/unicode-case"];
          "unicode-gencat" = ["regex-automata/unicode-gencat" "regex-syntax/unicode-gencat"];
          "unicode-perl" = ["regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl"];
          "unicode-script" = ["regex-automata/unicode-script" "regex-syntax/unicode-script"];
          "unicode-segment" = ["regex-automata/unicode-segment" "regex-syntax/unicode-segment"];
          "unstable" = ["pattern"];
          "use_std" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        libName = "regex_automata";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "fst" = ["dep:fst"];
          "regex-syntax" = ["dep:regex-syntax"];
          "std" = ["regex-syntax"];
          "transducer" = ["std" "fst"];
        };
        resolvedDefaultFeatures = ["default" "regex-syntax" "std"];
      };
      "regex-automata 0.4.9" = rec {
        crateName = "regex-automata";
        version = "0.4.9";
        edition = "2021";
        sha256 = "02092l8zfh3vkmk47yjc8d631zhhcd49ck2zr133prvd3z38v7l0";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid"];
          "dfa" = ["dfa-build" "dfa-search" "dfa-onepass"];
          "dfa-build" = ["nfa-thompson" "dfa-search"];
          "dfa-onepass" = ["nfa-thompson"];
          "hybrid" = ["alloc" "nfa-thompson"];
          "internal-instrument" = ["internal-instrument-pikevm"];
          "internal-instrument-pikevm" = ["logging" "std"];
          "logging" = ["dep:log" "aho-corasick?/logging" "memchr?/logging"];
          "meta" = ["syntax" "nfa-pikevm"];
          "nfa" = ["nfa-thompson" "nfa-pikevm" "nfa-backtrack"];
          "nfa-backtrack" = ["nfa-thompson"];
          "nfa-pikevm" = ["nfa-thompson"];
          "nfa-thompson" = ["alloc"];
          "perf" = ["perf-inline" "perf-literal"];
          "perf-literal" = ["perf-literal-substring" "perf-literal-multisubstring"];
          "perf-literal-multisubstring" = ["std" "dep:aho-corasick"];
          "perf-literal-substring" = ["aho-corasick?/perf-literal" "dep:memchr"];
          "std" = ["regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc"];
          "syntax" = ["dep:regex-syntax" "alloc"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode"];
          "unicode-age" = ["regex-syntax?/unicode-age"];
          "unicode-bool" = ["regex-syntax?/unicode-bool"];
          "unicode-case" = ["regex-syntax?/unicode-case"];
          "unicode-gencat" = ["regex-syntax?/unicode-gencat"];
          "unicode-perl" = ["regex-syntax?/unicode-perl"];
          "unicode-script" = ["regex-syntax?/unicode-script"];
          "unicode-segment" = ["regex-syntax?/unicode-segment"];
        };
        resolvedDefaultFeatures = ["alloc" "dfa-onepass" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary"];
      };
      "regex-lite" = rec {
        crateName = "regex-lite";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0almvx3z75f611pdcd9mslh7zxg76zh3shifql4ndch6mn3rb92k";
        libName = "regex_lite";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = ["std" "string"];
        };
        resolvedDefaultFeatures = ["default" "std" "string"];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = ["unicode"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
        };
        resolvedDefaultFeatures = ["default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
      };
      "regex-syntax 0.8.5" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "default" = ["std" "unicode"];
          "unicode" = ["unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
        };
        resolvedDefaultFeatures = ["default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment"];
      };
      "rend" = rec {
        crateName = "rend";
        version = "0.4.2";
        edition = "2018";
        sha256 = "0z4rrkycva0lcw0hxq479h4amxj9syn5vq4vb2qid5v2ylj3izki";
        authors = [
          "David Koloski <djkoloski@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytecheck";
            packageId = "bytecheck";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bytecheck" = ["dep:bytecheck"];
          "bytemuck" = ["dep:bytemuck"];
          "default" = ["std"];
          "std" = ["bytecheck/std"];
          "validation" = ["bytecheck"];
        };
        resolvedDefaultFeatures = ["bytecheck" "std"];
      };
      "reqwest" = rec {
        crateName = "reqwest";
        version = "0.12.22";
        edition = "2021";
        sha256 = "0cbmfrcrk6wbg93apmji0fln1ca9322af2kc7dpa18vcgs9k3jfb";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["http1" "client"];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["http1" "tls12"];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["http1" "client" "client-legacy" "client-proxy" "tokio"];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime_guess";
            packageId = "mime_guess";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "quinn";
            packageId = "quinn";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["rustls" "runtime-tokio"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["std" "tls12"];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["std"];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            features = ["futures"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["net" "time"];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["tls12"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["codec" "io"];
          }
          {
            name = "tower";
            packageId = "tower";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["timeout" "util"];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["follow-redirect"];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-streams";
            packageId = "wasm-streams";
            optional = true;
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream"];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.2";
            optional = true;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["std" "alloc"];
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["http1" "http2" "client" "server"];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["http1" "http2" "client" "client-legacy" "server-auto" "server-graceful" "tokio"];
          }
          {
            name = "serde";
            packageId = "serde";
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["derive"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!("wasm32" == target."arch" or null));
            features = ["macros" "rt-multi-thread"];
          }
          {
            name = "tower";
            packageId = "tower";
            usesDefaultFeatures = false;
            features = ["limit"];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["serde-serialize"];
          }
        ];
        features = {
          "__rustls" = ["dep:hyper-rustls" "dep:tokio-rustls" "dep:rustls" "__tls"];
          "__rustls-ring" = ["hyper-rustls?/ring" "tokio-rustls?/ring" "rustls?/ring" "quinn?/ring"];
          "__tls" = ["dep:rustls-pki-types" "tokio/io-util"];
          "blocking" = ["dep:futures-channel" "futures-channel?/sink" "dep:futures-util" "futures-util?/io" "futures-util?/sink" "tokio/sync"];
          "brotli" = ["dep:async-compression" "async-compression?/brotli" "dep:futures-util" "dep:tokio-util"];
          "charset" = ["dep:encoding_rs" "dep:mime"];
          "cookies" = ["dep:cookie_crate" "dep:cookie_store"];
          "default" = ["default-tls" "charset" "http2" "system-proxy"];
          "default-tls" = ["dep:hyper-tls" "dep:native-tls-crate" "__tls" "dep:tokio-native-tls"];
          "deflate" = ["dep:async-compression" "async-compression?/zlib" "dep:futures-util" "dep:tokio-util"];
          "gzip" = ["dep:async-compression" "async-compression?/gzip" "dep:futures-util" "dep:tokio-util"];
          "h2" = ["dep:h2"];
          "hickory-dns" = ["dep:hickory-resolver" "dep:once_cell"];
          "http2" = ["h2" "hyper/http2" "hyper-util/http2" "hyper-rustls?/http2"];
          "http3" = ["rustls-tls-manual-roots" "dep:h3" "dep:h3-quinn" "dep:quinn" "tokio/macros"];
          "json" = ["dep:serde_json"];
          "macos-system-configuration" = ["system-proxy"];
          "multipart" = ["dep:mime_guess" "dep:futures-util"];
          "native-tls" = ["default-tls"];
          "native-tls-alpn" = ["native-tls" "native-tls-crate?/alpn" "hyper-tls?/alpn"];
          "native-tls-vendored" = ["native-tls" "native-tls-crate?/vendored"];
          "rustls-tls" = ["rustls-tls-webpki-roots"];
          "rustls-tls-manual-roots" = ["rustls-tls-manual-roots-no-provider" "__rustls-ring"];
          "rustls-tls-manual-roots-no-provider" = ["__rustls"];
          "rustls-tls-native-roots" = ["rustls-tls-native-roots-no-provider" "__rustls-ring"];
          "rustls-tls-native-roots-no-provider" = ["dep:rustls-native-certs" "hyper-rustls?/native-tokio" "__rustls"];
          "rustls-tls-no-provider" = ["rustls-tls-manual-roots-no-provider"];
          "rustls-tls-webpki-roots" = ["rustls-tls-webpki-roots-no-provider" "__rustls-ring"];
          "rustls-tls-webpki-roots-no-provider" = ["dep:webpki-roots" "hyper-rustls?/webpki-tokio" "__rustls"];
          "stream" = ["tokio/fs" "dep:futures-util" "dep:tokio-util" "dep:wasm-streams"];
          "system-proxy" = ["hyper-util/client-proxy-system"];
          "zstd" = ["dep:async-compression" "async-compression?/zstd" "dep:futures-util" "dep:tokio-util"];
        };
        resolvedDefaultFeatures = ["__rustls" "__rustls-ring" "__tls" "json" "multipart" "rustls-tls" "rustls-tls-webpki-roots" "rustls-tls-webpki-roots-no-provider" "stream"];
      };
      "resolv-conf" = rec {
        crateName = "resolv-conf";
        version = "0.7.4";
        edition = "2021";
        sha256 = "1qw8kbpn52nbc1b624x53jjnsjifqk0hpqv5fygwicc4qram2clm";
        libName = "resolv_conf";
        features = {
        };
        resolvedDefaultFeatures = ["system"];
      };
      "revision 0.10.0" = rec {
        crateName = "revision";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0k0y3d6s7mvqs5l9r62v6alb9ilrqni5hkccmnnq3y1ml1wk3x92";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "revision-derive";
            packageId = "revision-derive 0.10.0";
            rename = "derive";
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "geo" = ["dep:geo"];
          "ordered-float" = ["dep:ordered-float"];
          "regex" = ["dep:regex"];
          "roaring" = ["dep:roaring"];
          "rust_decimal" = ["dep:rust_decimal"];
          "uuid" = ["dep:uuid"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "revision 0.11.0" = rec {
        crateName = "revision";
        version = "0.11.0";
        edition = "2021";
        sha256 = "0z92rchvkwz7jfcdks6sdi5f2dnh23ghm9di3s0z1chm5x9yxf2l";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            features = ["serde"];
          }
          {
            name = "geo";
            packageId = "geo";
            optional = true;
            features = ["use-serde"];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "revision-derive";
            packageId = "revision-derive 0.11.0";
            rename = "derive";
          }
          {
            name = "roaring";
            packageId = "roaring";
            optional = true;
            features = ["serde"];
          }
          {
            name = "rust_decimal";
            packageId = "rust_decimal";
            optional = true;
          }
          {
            name = "uuid";
            packageId = "uuid";
            optional = true;
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "geo" = ["dep:geo"];
          "ordered-float" = ["dep:ordered-float"];
          "regex" = ["dep:regex"];
          "roaring" = ["dep:roaring"];
          "rust_decimal" = ["dep:rust_decimal"];
          "uuid" = ["dep:uuid"];
        };
        resolvedDefaultFeatures = ["chrono" "default" "geo" "regex" "roaring" "rust_decimal" "uuid"];
      };
      "revision-derive 0.10.0" = rec {
        crateName = "revision-derive";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0wshnzppchz1rabas9bmry85bvvvcxwii1xnbsbakp6qwmkc83jz";
        procMacro = true;
        libName = "revision_derive";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "extra-traits" "parsing"];
          }
        ];
      };
      "revision-derive 0.11.0" = rec {
        crateName = "revision-derive";
        version = "0.11.0";
        edition = "2021";
        sha256 = "18nz6hldhw28qj96brl5fqlp4745l07hriia1ad6zhrqr0dmwhfk";
        procMacro = true;
        libName = "revision_derive";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "extra-traits" "parsing"];
          }
        ];
      };
      "rfc7239" = rec {
        crateName = "rfc7239";
        version = "0.1.3";
        edition = "2018";
        sha256 = "03rmb1l2l2pqn311wn6qii7ckwnn5vravkzzb2xqb6lfwg8z30ja";
        authors = [
          "Robin Appelman <robin@icewind.nl>"
        ];
        dependencies = [
          {
            name = "uncased";
            packageId = "uncased";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "ring" = rec {
        crateName = "ring";
        version = "0.17.14";
        edition = "2021";
        links = "ring_core_0_17_14_";
        sha256 = "1dw32gv19ccq4hsx3ribhpdzri1vnrlcfqb2vj41xn4l49n9ws54";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("apple" == target."vendor" or null) && (("ios" == target."os" or null) || ("macos" == target."os" or null) || ("tvos" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) || (("arm" == target."arch" or null) && ("little" == target."endian" or null))) && (("android" == target."os" or null) || ("linux" == target."os" or null)));
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("windows" == target."os" or null));
            features = ["Win32_Foundation" "Win32_System_Threading"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = ["alloc" "dev_urandom_fallback"];
          "std" = ["alloc"];
          "wasm32_unknown_unknown_js" = ["getrandom/js"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "dev_urandom_fallback" "std" "wasm32_unknown_unknown_js"];
      };
      "rkyv" = rec {
        crateName = "rkyv";
        version = "0.7.45";
        edition = "2021";
        sha256 = "16vp6m4sq41smhvym8ijy4id1hr3vm4na7wy4bc63qdrhmiws24h";
        authors = [
          "David Koloski <djkoloski@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytecheck";
            packageId = "bytecheck";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            optional = true;
          }
          {
            name = "ptr_meta";
            packageId = "ptr_meta";
            usesDefaultFeatures = false;
          }
          {
            name = "rend";
            packageId = "rend";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rkyv_derive";
            packageId = "rkyv_derive";
          }
          {
            name = "seahash";
            packageId = "seahash";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "uuid";
            packageId = "uuid";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["hashbrown" "bitvec?/alloc" "tinyvec?/alloc"];
          "arbitrary_enum_discriminant" = ["rkyv_derive/arbitrary_enum_discriminant"];
          "archive_be" = ["rend" "rkyv_derive/archive_be"];
          "archive_le" = ["rend" "rkyv_derive/archive_le"];
          "arrayvec" = ["dep:arrayvec"];
          "bitvec" = ["dep:bitvec"];
          "bytecheck" = ["dep:bytecheck"];
          "bytes" = ["dep:bytes"];
          "copy" = ["rkyv_derive/copy"];
          "default" = ["size_32" "std"];
          "hashbrown" = ["dep:hashbrown"];
          "indexmap" = ["dep:indexmap"];
          "rend" = ["dep:rend"];
          "smallvec" = ["dep:smallvec"];
          "smol_str" = ["dep:smol_str"];
          "std" = ["alloc" "bytecheck?/std" "ptr_meta/std" "rend?/std" "uuid?/std" "bytes?/std"];
          "strict" = ["rkyv_derive/strict"];
          "tinyvec" = ["dep:tinyvec"];
          "uuid" = ["dep:uuid" "bytecheck?/uuid"];
          "validation" = ["alloc" "bytecheck" "rend/validation"];
        };
        resolvedDefaultFeatures = ["alloc" "hashbrown" "size_32" "std"];
      };
      "rkyv_derive" = rec {
        crateName = "rkyv_derive";
        version = "0.7.45";
        edition = "2021";
        sha256 = "1h1jwmyivx7g88d41gzcjrqnax98m9algjd49hx0laqab4kisgah";
        procMacro = true;
        authors = [
          "David Koloski <djkoloski@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "rmp" = rec {
        crateName = "rmp";
        version = "0.8.14";
        edition = "2021";
        sha256 = "1i1l6dhv7vws5vp0ikakj44fk597xi59g3j6ng1q55x3dz0xg3i2";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["byteorder/std" "num-traits/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "rmp-serde" = rec {
        crateName = "rmp-serde";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1nylmh7w2vpa1bwrnx1jfp2l4yz6i5qrmpic5zll166gfyj9kraj";
        libName = "rmp_serde";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "rmp";
            packageId = "rmp";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
      };
      "rmpv" = rec {
        crateName = "rmpv";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1adjigqyrzbv71s18qz3sa77zqggqip0p8j4rrrk5scyrlihfiaq";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rmp";
            packageId = "rmp";
          }
        ];
        features = {
          "serde" = ["dep:serde"];
          "serde_bytes" = ["dep:serde_bytes"];
          "with-serde" = ["serde" "serde_bytes"];
        };
      };
      "roaring" = rec {
        crateName = "roaring";
        version = "0.10.12";
        edition = "2021";
        sha256 = "0yqy3h6c13c73519bnwzmiv9nzxyl7sajl6n4q3lvnc4l77x5s0r";
        authors = [
          "Wim Looman <wim@nemo157.com>"
          "Kerollmops <kero@meilisearch.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde" "std"];
          "std" = ["dep:bytemuck" "dep:byteorder"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std"];
      };
      "robust" = rec {
        crateName = "robust";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0fcqw67hgs1k9parr6rbkhzkjbd1my9n44fb1v7sv80wp65yw9sf";
        authors = [
          "The Spade Developers"
          "The GeoRust Developers"
        ];
        features = {
        };
      };
      "room_101" = rec {
        crateName = "room_101";
        version = "0.1.0";
        edition = "2024";
        crateBin = [
          {
            name = "room_101";
            path = "src/main.rs";
            requiredFeatures = [];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./.;
        };
        dependencies = [
          {
            name = "age";
            packageId = "age";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = ["serde"];
          }
          {
            name = "chrono-humanize";
            packageId = "chrono-humanize";
          }
          {
            name = "clap";
            packageId = "clap";
            features = ["derive"];
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hostname";
            packageId = "hostname";
          }
          {
            name = "hostname-validator";
            packageId = "hostname-validator";
          }
          {
            name = "iroh";
            packageId = "iroh";
          }
          {
            name = "iroh-base";
            packageId = "iroh-base";
          }
          {
            name = "iroh-gossip";
            packageId = "iroh-gossip";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "maud";
            packageId = "maud";
            features = ["poem"];
          }
          {
            name = "poem";
            packageId = "poem";
            features = ["anyhow" "test"];
          }
          {
            name = "ractor";
            packageId = "ractor";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "sqlx";
            packageId = "sqlx";
            features = ["runtime-tokio" "sqlite" "chrono" "uuid" "json"];
          }
          {
            name = "surrealdb";
            packageId = "surrealdb";
            features = ["kv-surrealkv" "kv-mem"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = ["env-filter"];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = ["serde"];
          }
        ];
      };
      "rsa" = rec {
        crateName = "rsa";
        version = "0.9.8";
        edition = "2021";
        sha256 = "06v9zl604jsqjajm647l9jjirn7k4lc8lmvys6hmqshpxp0qm4kq";
        authors = [
          "RustCrypto Developers"
          "dignifiedquire <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
            features = ["alloc" "oid"];
          }
          {
            name = "num-bigint-dig";
            packageId = "num-bigint-dig";
            rename = "num-bigint";
            usesDefaultFeatures = false;
            features = ["i128" "prime" "zeroize"];
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["libm"];
          }
          {
            name = "pkcs1";
            packageId = "pkcs1";
            usesDefaultFeatures = false;
            features = ["alloc" "pkcs8"];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
            features = ["alloc" "digest" "rand_core"];
          }
          {
            name = "spki";
            packageId = "spki";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = ["alloc"];
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std" "pem" "u64_digit"];
          "getrandom" = ["rand_core/getrandom"];
          "nightly" = ["num-bigint/nightly"];
          "pem" = ["pkcs1/pem" "pkcs8/pem"];
          "pkcs5" = ["pkcs8/encryption"];
          "serde" = ["dep:serde" "num-bigint/serde"];
          "sha1" = ["dep:sha1"];
          "sha2" = ["dep:sha2"];
          "std" = ["digest/std" "pkcs1/std" "pkcs8/std" "rand_core/std" "signature/std"];
          "u64_digit" = ["num-bigint/u64_digit"];
        };
        resolvedDefaultFeatures = ["default" "pem" "std" "u64_digit"];
      };
      "rstar" = rec {
        crateName = "rstar";
        version = "0.12.2";
        edition = "2018";
        sha256 = "1fsx2z2l6nq2fd95g9yvw1a9qvypllq9q6aqb3x6vlng7k8h0522";
        authors = [
          "Stefan Altmayer <stoeoef@gmail.com>"
          "The Georust Developers <mods@georust.org>"
        ];
        dependencies = [
          {
            name = "heapless";
            packageId = "heapless 0.8.0";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["libm"];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "mint" = ["dep:mint"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "rust-embed" = rec {
        crateName = "rust-embed";
        version = "8.7.2";
        edition = "2018";
        sha256 = "12hprnl569f1pg2sn960gfla913mk1mxdwpn2a6vl9iad2w0hn82";
        libName = "rust_embed";
        authors = [
          "pyrossh"
        ];
        dependencies = [
          {
            name = "rust-embed-impl";
            packageId = "rust-embed-impl";
          }
          {
            name = "rust-embed-utils";
            packageId = "rust-embed-utils";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "actix" = ["actix-web" "mime_guess"];
          "actix-web" = ["dep:actix-web"];
          "axum" = ["dep:axum"];
          "axum-ex" = ["axum" "tokio" "mime_guess"];
          "compression" = ["rust-embed-impl/compression" "include-flate"];
          "debug-embed" = ["rust-embed-impl/debug-embed" "rust-embed-utils/debug-embed"];
          "deterministic-timestamps" = ["rust-embed-impl/deterministic-timestamps"];
          "hex" = ["dep:hex"];
          "include-exclude" = ["rust-embed-impl/include-exclude" "rust-embed-utils/include-exclude"];
          "include-flate" = ["dep:include-flate"];
          "interpolate-folder-path" = ["rust-embed-impl/interpolate-folder-path"];
          "mime-guess" = ["rust-embed-impl/mime-guess" "rust-embed-utils/mime-guess"];
          "mime_guess" = ["dep:mime_guess"];
          "poem" = ["dep:poem"];
          "poem-ex" = ["poem" "tokio" "mime_guess" "hex"];
          "rocket" = ["dep:rocket"];
          "salvo" = ["dep:salvo"];
          "salvo-ex" = ["salvo" "tokio" "mime_guess" "hex"];
          "tokio" = ["dep:tokio"];
          "warp" = ["dep:warp"];
          "warp-ex" = ["warp" "tokio" "mime_guess"];
        };
      };
      "rust-embed-impl" = rec {
        crateName = "rust-embed-impl";
        version = "8.7.2";
        edition = "2018";
        sha256 = "171lshvdh122ypbf23gmhvrqnhbk0q9g27gaq6g82w9b76jg2rb0";
        procMacro = true;
        libName = "rust_embed_impl";
        authors = [
          "pyrossh"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rust-embed-utils";
            packageId = "rust-embed-utils";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["derive" "parsing" "proc-macro" "printing"];
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "include-exclude" = ["rust-embed-utils/include-exclude"];
          "interpolate-folder-path" = ["shellexpand"];
          "mime-guess" = ["rust-embed-utils/mime-guess"];
          "shellexpand" = ["dep:shellexpand"];
        };
      };
      "rust-embed-utils" = rec {
        crateName = "rust-embed-utils";
        version = "8.7.2";
        edition = "2018";
        sha256 = "151m1966qk75y10msazdp0xj4fqw1khcry0z946bf84bcj0hrk7n";
        libName = "rust_embed_utils";
        authors = [
          "pyrossh"
        ];
        dependencies = [
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "globset" = ["dep:globset"];
          "include-exclude" = ["globset"];
          "mime-guess" = ["mime_guess"];
          "mime_guess" = ["dep:mime_guess"];
        };
      };
      "rust-stemmers" = rec {
        crateName = "rust-stemmers";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0m6acgdflrrcm17dj7lp7x4sfqqhga24qynv660qinwz04v20sp4";
        libName = "rust_stemmers";
        authors = [
          "Jakob Demler <jdemler@curry-software.com>"
          "CurrySoftware <info@curry-software.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
      };
      "rust_decimal" = rec {
        crateName = "rust_decimal";
        version = "1.37.2";
        edition = "2021";
        sha256 = "0p83j981r1y8s8k6c11j26gyflfar93kqbf4344kx800am1ac0xj";
        authors = [
          "Paul Mason <paul@form1.co.nz>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "borsh";
            packageId = "borsh";
            optional = true;
            usesDefaultFeatures = false;
            features = ["derive" "unstable__schema"];
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = ["i128"];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rkyv";
            packageId = "rkyv";
            optional = true;
            usesDefaultFeatures = false;
            features = ["size_32" "std"];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = ["getrandom"];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "borsh" = ["dep:borsh" "std"];
          "db-diesel-mysql" = ["diesel/mysql_backend" "std"];
          "db-diesel-postgres" = ["diesel/postgres" "std"];
          "db-diesel2-mysql" = ["db-diesel-mysql"];
          "db-diesel2-postgres" = ["db-diesel-postgres"];
          "db-postgres" = ["dep:bytes" "dep:postgres-types" "std"];
          "db-tokio-postgres" = ["dep:bytes" "dep:postgres-types" "std"];
          "default" = ["serde" "std"];
          "diesel" = ["dep:diesel"];
          "macros" = ["dep:rust_decimal_macros"];
          "maths-nopanic" = ["maths"];
          "ndarray" = ["dep:ndarray"];
          "proptest" = ["dep:proptest"];
          "rand" = ["dep:rand"];
          "rand-0_9" = ["dep:rand-0_9"];
          "rkyv" = ["dep:rkyv"];
          "rkyv-safe" = ["rkyv/validation"];
          "rocket-traits" = ["dep:rocket" "std"];
          "rust-fuzz" = ["dep:arbitrary"];
          "serde" = ["dep:serde"];
          "serde-arbitrary-precision" = ["serde-with-arbitrary-precision"];
          "serde-bincode" = ["serde-str"];
          "serde-float" = ["serde-with-float"];
          "serde-str" = ["serde-with-str"];
          "serde-with-arbitrary-precision" = ["serde" "serde_json/arbitrary_precision" "serde_json/std"];
          "serde-with-float" = ["serde"];
          "serde-with-str" = ["serde"];
          "serde_json" = ["dep:serde_json"];
          "std" = ["arrayvec/std" "borsh?/std" "bytes?/std" "rand?/std" "rkyv?/std" "serde?/std" "serde_json?/std"];
          "tokio-pg" = ["db-tokio-postgres"];
          "tokio-postgres" = ["dep:tokio-postgres"];
        };
        resolvedDefaultFeatures = ["default" "maths" "serde" "serde-str" "serde-with-str" "std"];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.26";
        edition = "2015";
        sha256 = "1kja3nb0yhlm4j2p1hl8d7sjmn2g9fa1s4pj0qma5kj2lcndkxsn";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["core"];
        };
      };
      "rustc-hash 1.1.0" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "rustc-hash 2.1.1" = rec {
        crateName = "rustc-hash";
        version = "2.1.1";
        edition = "2021";
        sha256 = "03gz5lvd9ghcwsal022cgkq67dmimcgdjghfb5yb5d352ga06xrm";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = ["std"];
          "rand" = ["dep:rand" "std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "rustc_lexer" = rec {
        crateName = "rustc_lexer";
        version = "0.1.0";
        edition = "2018";
        sha256 = "198n5pg94jgzj76s783cvkbqjwp7l4v1mvh52g00hq8nfw6awsn8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];
      };
      "rustix" = rec {
        crateName = "rustix";
        version = "1.0.8";
        edition = "2021";
        sha256 = "1j6ajqi61agdnh1avr4bplrsgydjw1n4mycdxw3v8g94pyx1y60i";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = ["general" "ioctl" "no_std"];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = ["general" "errno" "ioctl" "no_std" "elf"];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Networking_WinSock"];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = ["event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "io_uring" = ["event" "fs" "net" "thread" "linux-raw-sys/io_uring"];
          "libc" = ["dep:libc"];
          "libc_errno" = ["dep:libc_errno"];
          "linux_5_1" = ["linux_4_11"];
          "linux_5_11" = ["linux_5_1"];
          "linux_latest" = ["linux_5_11"];
          "net" = ["linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp"];
          "process" = ["linux-raw-sys/prctl"];
          "pty" = ["fs"];
          "runtime" = ["linux-raw-sys/prctl"];
          "rustc-dep-of-std" = ["core" "rustc-std-workspace-alloc" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std"];
          "rustc-std-workspace-alloc" = ["dep:rustc-std-workspace-alloc"];
          "shm" = ["fs"];
          "std" = ["bitflags/std" "alloc" "libc?/std" "libc_errno?/std"];
          "system" = ["linux-raw-sys/system"];
          "thread" = ["linux-raw-sys/prctl"];
          "use-libc" = ["libc_errno" "libc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "fs" "std"];
      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.23.31";
        edition = "2021";
        sha256 = "1k5ncablbb2h7hzllq3j3panqnks295v56xd488zrq1xy39cpsy0";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = ["alloc" "race"];
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = ["alloc"];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws-lc-rs" = ["aws_lc_rs"];
          "aws_lc_rs" = ["dep:aws-lc-rs" "webpki/aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm"];
          "brotli" = ["dep:brotli" "dep:brotli-decompressor" "std"];
          "default" = ["aws_lc_rs" "logging" "prefer-post-quantum" "std" "tls12"];
          "fips" = ["aws_lc_rs" "aws-lc-rs?/fips" "webpki/aws-lc-rs-fips"];
          "hashbrown" = ["dep:hashbrown"];
          "log" = ["dep:log"];
          "logging" = ["log"];
          "prefer-post-quantum" = ["aws_lc_rs"];
          "read_buf" = ["rustversion" "std"];
          "ring" = ["dep:ring" "webpki/ring"];
          "rustversion" = ["dep:rustversion"];
          "std" = ["webpki/std" "pki-types/std" "once_cell/std"];
          "zlib" = ["dep:zlib-rs"];
        };
        resolvedDefaultFeatures = ["log" "logging" "ring" "std" "tls12"];
      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.12.0";
        edition = "2021";
        sha256 = "0yawbdpix8jif6s8zj1p2hbyb7y3bj66fhx0y7hyf4qh4964m6i2";
        libName = "rustls_pki_types";
        dependencies = [
          {
            name = "web-time";
            packageId = "web-time";
            optional = true;
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["dep:zeroize"];
          "default" = ["alloc"];
          "std" = ["alloc"];
          "web" = ["web-time"];
          "web-time" = ["dep:web-time"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std" "web" "web-time"];
      };
      "rustls-webpki" = rec {
        crateName = "rustls-webpki";
        version = "0.103.4";
        edition = "2021";
        sha256 = "1z4jmmgasjgk9glb160a66bshvgifa64mgfjrkqp7dy1w158h5qa";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "alloc" = ["ring?/alloc" "pki-types/alloc"];
          "aws-lc-rs" = ["dep:aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm"];
          "aws-lc-rs-fips" = ["dep:aws-lc-rs" "aws-lc-rs/fips"];
          "aws-lc-rs-unstable" = ["aws-lc-rs" "aws-lc-rs/unstable"];
          "default" = ["std"];
          "ring" = ["dep:ring"];
          "std" = ["alloc" "pki-types/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "ring" "std"];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.21";
        edition = "2018";
        sha256 = "07bb1xx05hhwpnl43sqrhsmxyk5sd5m5baadp19nxp69s9xij3ca";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.20";
        edition = "2018";
        sha256 = "07s855l8sb333h6bpn24pka5sp7hjk2w667xy6a0khkf6sqv5lr8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = ["dep:no-panic"];
        };
      };
      "salsa20" = rec {
        crateName = "salsa20";
        version = "0.10.2";
        edition = "2021";
        sha256 = "04w211x17xzny53f83p8f7cj7k2hi8zck282q5aajwqzydd2z8lp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = ["dev"];
          }
        ];
        features = {
          "std" = ["cipher/std"];
          "zeroize" = ["cipher/zeroize"];
        };
        resolvedDefaultFeatures = ["zeroize"];
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
      };
      "schemars 0.9.0" = rec {
        crateName = "schemars";
        version = "0.9.0";
        edition = "2021";
        sha256 = "0pqncln5hqbzbl2r3yayyr4a82jjf93h2cfxrn0xamvx77wr3lac";
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "arrayvec07" = ["dep:arrayvec07"];
          "bigdecimal04" = ["dep:bigdecimal04"];
          "bytes1" = ["dep:bytes1"];
          "chrono04" = ["dep:chrono04"];
          "default" = ["derive" "std"];
          "derive" = ["schemars_derive"];
          "either1" = ["dep:either1"];
          "indexmap2" = ["dep:indexmap2"];
          "jiff02" = ["dep:jiff02"];
          "preserve_order" = ["serde_json/preserve_order"];
          "raw_value" = ["serde_json/raw_value"];
          "rust_decimal1" = ["dep:rust_decimal1"];
          "schemars_derive" = ["dep:schemars_derive"];
          "semver1" = ["dep:semver1"];
          "smallvec1" = ["dep:smallvec1"];
          "smol_str02" = ["dep:smol_str02"];
          "url2" = ["dep:url2"];
          "uuid1" = ["dep:uuid1"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "schemars 1.0.4" = rec {
        crateName = "schemars";
        version = "1.0.4";
        edition = "2021";
        sha256 = "1l7w773jfk6mz0v8wpahp60aslksjijlbm65ysi4y5mwj520rll2";
        authors = [
          "Graham Esau <gesau@hotmail.co.uk>"
        ];
        dependencies = [
          {
            name = "dyn-clone";
            packageId = "dyn-clone";
          }
          {
            name = "ref-cast";
            packageId = "ref-cast";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "arrayvec07" = ["dep:arrayvec07"];
          "bigdecimal04" = ["dep:bigdecimal04"];
          "bytes1" = ["dep:bytes1"];
          "chrono04" = ["dep:chrono04"];
          "default" = ["derive" "std"];
          "derive" = ["schemars_derive"];
          "either1" = ["dep:either1"];
          "indexmap2" = ["dep:indexmap2"];
          "jiff02" = ["dep:jiff02"];
          "preserve_order" = ["serde_json/preserve_order"];
          "raw_value" = ["serde_json/raw_value"];
          "rust_decimal1" = ["dep:rust_decimal1"];
          "schemars_derive" = ["dep:schemars_derive"];
          "semver1" = ["dep:semver1"];
          "smallvec1" = ["dep:smallvec1"];
          "smol_str02" = ["dep:smol_str02"];
          "url2" = ["dep:url2"];
          "uuid1" = ["dep:uuid1"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.1";
        edition = "2015";
        sha256 = "15524h04mafihcvfpgxd8f4bgc3k95aclz8grjkg9a0rxcvn9kz1";
        libName = "scoped_tls";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = ["use_std"];
        };
      };
      "scrypt" = rec {
        crateName = "scrypt";
        version = "0.11.0";
        edition = "2021";
        sha256 = "07zxfaqpns9jn0mnxm7wj3ksqsinyfpirkav1f7kc2bchs2s65h5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "password-hash";
            packageId = "password-hash";
            optional = true;
            usesDefaultFeatures = false;
            features = ["rand_core"];
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2";
          }
          {
            name = "salsa20";
            packageId = "salsa20";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "password-hash";
            packageId = "password-hash";
            features = ["rand_core"];
          }
        ];
        features = {
          "default" = ["simple" "std"];
          "password-hash" = ["dep:password-hash"];
          "simple" = ["password-hash"];
          "std" = ["password-hash/std"];
        };
        resolvedDefaultFeatures = ["default" "password-hash" "simple" "std"];
      };
      "seahash" = rec {
        crateName = "seahash";
        version = "4.1.0";
        edition = "2015";
        sha256 = "0sxsb64np6bvnppjz5hg4rqpnkczhsl8w8kf2a5lr1c08xppn40w";
        authors = [
          "ticki <ticki@users.noreply.github.com>"
          "Tom Almeida <tom@tommoa.me>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "secrecy" = rec {
        crateName = "secrecy";
        version = "0.10.3";
        edition = "2021";
        sha256 = "0nmfsf9qm8921v2jliz08bj8zrryqar4gj3d6irqfc3kaj2az4g8";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "self_cell 0.10.3" = rec {
        crateName = "self_cell";
        version = "0.10.3";
        edition = "2018";
        sha256 = "0pci3zh23b7dg6jmlxbn8k4plb7hcg5jprd1qiz0rp04p1ilskp1";
        authors = [
          "Lukas Bergdoll <lukas.bergdoll@gmail.com>"
        ];
        dependencies = [
          {
            name = "self_cell";
            packageId = "self_cell 1.2.0";
            rename = "new_self_cell";
          }
        ];
        features = {
          "old_rust" = ["new_self_cell/old_rust"];
        };
      };
      "self_cell 1.2.0" = rec {
        crateName = "self_cell";
        version = "1.2.0";
        edition = "2018";
        sha256 = "0jg70srf4hzrw96x8iclgf6i8dfgm1x8ds2i7yzcgq0i8njraz8g";
        authors = [
          "Lukas Bergdoll <lukas.bergdoll@gmail.com>"
        ];
        features = {
          "old_rust" = ["rustversion"];
          "rustversion" = ["dep:rustversion"];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.26";
        edition = "2018";
        sha256 = "1l5q2vb8fjkby657kdyfpvv40x2i2xqq9bg57pxqakfj92fgmrjn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std"];
      };
      "send_wrapper" = rec {
        crateName = "send_wrapper";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wrxzsh9fzgkkkms621ydnz8mj30ilyq299a8cf65jn1y72hw2yd";
        authors = [
          "Thomas Keh"
        ];
        features = {
          "futures" = ["futures-core"];
          "futures-core" = ["dep:futures-core"];
        };
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.219";
        edition = "2018";
        sha256 = "1dl6nyxnsi82a197sd752128a4avm6mxnscywas1jq30srp2q3jz";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = {
              target,
              features,
            }:
              false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = ["std"];
          "derive" = ["serde_derive"];
          "serde_derive" = ["dep:serde_derive"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "derive" "rc" "serde_derive" "std"];
      };
      "serde-content" = rec {
        crateName = "serde-content";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1ih9np0g2byfkgh12bpgr6457ib3bras6ik11g895yjhyc2cllrp";
        libName = "serde_content";
        authors = [
          "rushmorem <rushmore@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
        ];
        features = {
          "default" = ["std" "derive"];
          "derive" = ["serde/derive"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "derive" "serde" "std"];
      };
      "serde_bytes" = rec {
        crateName = "serde_bytes";
        version = "0.11.17";
        edition = "2018";
        sha256 = "15kds0mw19lvm8ydd1qbharh5rz96zir06yn2silqbfy3cigsdw4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["serde/alloc"];
          "default" = ["std"];
          "std" = ["serde/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.219";
        edition = "2015";
        sha256 = "001azhjmj7ya52pmfiw4ppxm16nd44y15j2pf5gkcwrcgz7pc0jv";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = ["proc-macro"];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = ["proc-macro"];
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["clone-impls" "derive" "parsing" "printing" "proc-macro"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.142";
        edition = "2021";
        sha256 = "19y5mz1npafnd6vlaiv41ns3pb0pv3q9nirdy3bcn3b0havys3q3";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "alloc" = ["serde/alloc"];
          "default" = ["std"];
          "indexmap" = ["dep:indexmap"];
          "preserve_order" = ["indexmap" "std"];
          "std" = ["memchr/std" "serde/std"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "indexmap" "preserve_order" "raw_value" "std"];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
      };
      "serde_with" = rec {
        crateName = "serde_with";
        version = "3.14.0";
        edition = "2021";
        sha256 = "1manlm83865xwlvgv8frc472x19b75pd89a54mpxpagg3zb5ri7j";
        authors = [
          "Jonas Bushart"
          "Marcin Kaźmierczak"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "chrono";
            packageId = "chrono";
            rename = "chrono_0_4";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde"];
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            rename = "indexmap_1";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde-1"];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            rename = "indexmap_2";
            optional = true;
            usesDefaultFeatures = false;
            features = ["serde"];
          }
          {
            name = "schemars";
            packageId = "schemars 0.9.0";
            rename = "schemars_0_9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "schemars";
            packageId = "schemars 1.0.4";
            rename = "schemars_1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde_with_macros";
            packageId = "serde_with_macros";
            optional = true;
          }
          {
            name = "time";
            packageId = "time";
            rename = "time_0_3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "schemars";
            packageId = "schemars 0.9.0";
            rename = "schemars_0_9";
          }
          {
            name = "schemars";
            packageId = "schemars 1.0.4";
            rename = "schemars_1";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = ["preserve_order"];
          }
        ];
        features = {
          "alloc" = ["serde/alloc" "base64?/alloc" "chrono_0_4?/alloc" "hex?/alloc" "serde_json?/alloc" "time_0_3?/alloc"];
          "base64" = ["dep:base64" "alloc"];
          "chrono" = ["chrono_0_4"];
          "chrono_0_4" = ["dep:chrono_0_4"];
          "default" = ["std" "macros"];
          "guide" = ["dep:document-features" "macros" "std"];
          "hashbrown_0_14" = ["dep:hashbrown_0_14" "alloc"];
          "hashbrown_0_15" = ["dep:hashbrown_0_15" "alloc"];
          "hex" = ["dep:hex" "alloc"];
          "indexmap" = ["indexmap_1"];
          "indexmap_1" = ["dep:indexmap_1" "alloc"];
          "indexmap_2" = ["dep:indexmap_2" "alloc"];
          "json" = ["dep:serde_json" "alloc"];
          "macros" = ["dep:serde_with_macros"];
          "schemars_0_8" = ["dep:schemars_0_8" "std" "serde_with_macros?/schemars_0_8"];
          "schemars_0_9" = ["dep:schemars_0_9" "alloc" "serde_with_macros?/schemars_0_9" "dep:serde_json"];
          "schemars_1" = ["dep:schemars_1" "alloc" "serde_with_macros?/schemars_1" "dep:serde_json"];
          "std" = ["alloc" "serde/std" "chrono_0_4?/clock" "chrono_0_4?/std" "indexmap_1?/std" "indexmap_2?/std" "time_0_3?/serde-well-known" "time_0_3?/std" "schemars_0_9?/std" "schemars_1?/std"];
          "time_0_3" = ["dep:time_0_3"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "json" "macros" "std"];
      };
      "serde_with_macros" = rec {
        crateName = "serde_with_macros";
        version = "3.14.0";
        edition = "2021";
        sha256 = "03xk9ghj2s6n331r565mgh22w0749vnq50094nd0vkk5cmg9946y";
        procMacro = true;
        authors = [
          "Jonas Bushart"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["extra-traits" "full" "parsing"];
          }
        ];
        features = {
        };
      };
      "serdect" = rec {
        crateName = "serdect";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0xw1b6acw6nd0jchzyxzr97f0s4shbcqh92iyjwln0cskshi8kx8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
        ];
        features = {
          "alloc" = ["base16ct/alloc" "serde/alloc"];
          "default" = ["alloc"];
          "zeroize" = ["dep:zeroize"];
        };
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["dev"];
          }
        ];
        features = {
          "asm" = ["sha1-asm"];
          "default" = ["std"];
          "oid" = ["digest/oid"];
          "sha1-asm" = ["dep:sha1-asm"];
          "std" = ["digest/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "sha1_smol" = rec {
        crateName = "sha1_smol";
        version = "1.0.1";
        edition = "2018";
        sha256 = "0pbh2xjfnzgblws3hims0ib5bphv7r5rfdpizyh51vnzvnribymv";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        features = {
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
        };
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.10.9";
        edition = "2018";
        sha256 = "10xjj843v31ghsksd9sl9y12qfc48157j1xpb8v1ml39jy0psl57";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = ["dev"];
          }
        ];
        features = {
          "asm" = ["sha2-asm"];
          "asm-aarch64" = ["asm"];
          "default" = ["std"];
          "oid" = ["digest/oid"];
          "sha2-asm" = ["dep:sha2-asm"];
          "std" = ["digest/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        libName = "sharded_slab";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = ["dep:loom"];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.6";
        edition = "2015";
        sha256 = "12y2v1ms5z111fymaw1v8k93m5chnkp21h0jknrydkj8zydp395j";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "signature" = rec {
        crateName = "signature";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1pi9hd5vqfr3q3k49k37z06p7gs5si0in32qia4mmr1dancr6m3p";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = ["dep:derive"];
          "digest" = ["dep:digest"];
          "rand_core" = ["dep:rand_core"];
          "std" = ["alloc" "rand_core?/std"];
        };
        resolvedDefaultFeatures = ["alloc" "digest" "rand_core" "std"];
      };
      "simdutf8" = rec {
        crateName = "simdutf8";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0vmpf7xaa0dnaikib5jlx6y4dxd3hxqz6l830qb079g7wcsgxag3";
        authors = [
          "Hans Kratz <hans@appfour.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["aarch64_neon" "std"];
      };
      "simple-dns" = rec {
        crateName = "simple-dns";
        version = "0.9.3";
        edition = "2021";
        sha256 = "0sm8r6x1azi4m7ga7zc19wihm0jy07l4667az8hkgbz7wp853s6y";
        libName = "simple_dns";
        authors = [
          "Ilson Roberto Balliego Junior <ilson.balliego@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
      };
      "simple_asn1" = rec {
        crateName = "simple_asn1";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1fz8842yya5qrbdsgcij1ysw0zlrcdwqcrs6p2cqr73ja0gn6zr9";
        authors = [
          "Adam Wick <awick@uhsure.com>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = ["formatting" "macros" "parsing"];
          }
        ];
        devDependencies = [
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = ["formatting" "macros" "parsing" "quickcheck"];
          }
        ];
      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "1.0.1";
        edition = "2018";
        sha256 = "17f35782ma3fn6sh21c027kjmd227xyrx06ffi8gw4xzv9yry6an";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "serde_no_std" = ["serde/alloc"];
          "serde_std" = ["std" "serde/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.10";
        edition = "2018";
        sha256 = "03f5a9gdp33mngya4qwq2555138pj74pl015scv57wsic5rikp04";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.15.1";
        edition = "2018";
        sha256 = "00xxdxxpgyq5vjnpljvkmy99xij5rxgh913ii1v16kzynnivgcb7";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "bincode" = ["dep:bincode"];
          "const_new" = ["const_generics"];
          "drain_keep_rest" = ["drain_filter"];
          "impl_bincode" = ["bincode" "unty"];
          "malloc_size_of" = ["dep:malloc_size_of"];
          "serde" = ["dep:serde"];
          "unty" = ["dep:unty"];
        };
        resolvedDefaultFeatures = ["const_generics" "const_new" "serde"];
      };
      "smol_str" = rec {
        crateName = "smol_str";
        version = "0.2.2";
        edition = "2018";
        sha256 = "1bfylqf2vnqaglw58930vpxm2rfzji5gjp15a2c0kh8aj6v8ylyx";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "std" = ["serde?/std"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std"];
      };
      "snafu" = rec {
        crateName = "snafu";
        version = "0.8.6";
        edition = "2018";
        sha256 = "09znwwss9xi7i28kpj29b29nh28nv5kfjjsa99x5v3dz27h022rj";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "snafu-derive";
            packageId = "snafu-derive";
          }
        ];
        features = {
          "backtrace" = ["dep:backtrace"];
          "backtraces-impl-backtrace-crate" = ["backtrace"];
          "default" = ["std" "rust_1_65"];
          "futures" = ["futures-core-crate" "pin-project"];
          "futures-core-crate" = ["dep:futures-core-crate"];
          "futures-crate" = ["dep:futures-crate"];
          "internal-dev-dependencies" = ["futures-crate"];
          "pin-project" = ["dep:pin-project"];
          "rust_1_61" = ["snafu-derive/rust_1_61"];
          "rust_1_65" = ["rust_1_61"];
          "rust_1_81" = ["rust_1_65"];
          "std" = ["alloc"];
          "unstable-provider-api" = ["snafu-derive/unstable-provider-api"];
        };
        resolvedDefaultFeatures = ["alloc" "backtrace" "backtraces-impl-backtrace-crate" "default" "rust_1_61" "rust_1_65" "rust_1_81" "std"];
      };
      "snafu-derive" = rec {
        crateName = "snafu-derive";
        version = "0.8.6";
        edition = "2018";
        sha256 = "1xs7w5hg9sw45lw34mzza1nnpx9lz5snjp9s9lh2852c8bpy4q8r";
        procMacro = true;
        libName = "snafu_derive";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["rust_1_61"];
      };
      "snap" = rec {
        crateName = "snap";
        version = "1.1.1";
        edition = "2018";
        sha256 = "0fxw80m831l76a5zxcwmz2aq7mcwc1pp345pnljl4cv1kbxnfsqv";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
      };
      "socket2 0.5.10" = rec {
        crateName = "socket2";
        version = "0.5.10";
        edition = "2021";
        sha256 = "0y067ki5q946w91xlz2sb175pnfazizva6fi3kfp639mxnmpc8z2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["all"];
      };
      "socket2 0.6.0" = rec {
        crateName = "socket2";
        version = "0.6.0";
        edition = "2021";
        sha256 = "01qqdzfnr0bvdwq6wl56c9c4m2cvbxn43dfpcv8gjx208sph8d93";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["all"];
      };
      "spade" = rec {
        crateName = "spade";
        version = "2.14.0";
        edition = "2021";
        sha256 = "130wj1fj8xwyrn64l6ylli9b4jqrdsggh12bg0r5ry790yh32km1";
        authors = [
          "Stefan Altmayer <stoeoef@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "robust";
            packageId = "robust";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
        ];
        features = {
          "default" = ["std"];
          "mint" = ["dep:mint"];
          "serde" = ["dep:serde"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "spin 0.10.0" = rec {
        crateName = "spin";
        version = "0.10.0";
        edition = "2015";
        sha256 = "14g5sdsjf4wk2ys5dq8ivkq4rz57gphab2gcdzar5hnrk35lrznm";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        features = {
          "barrier" = ["mutex"];
          "default" = ["lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier"];
          "fair_mutex" = ["mutex"];
          "lazy" = ["once"];
          "lock_api" = ["dep:lock_api_crate"];
          "portable-atomic" = ["dep:portable-atomic"];
          "portable_atomic" = ["portable-atomic"];
          "spin_mutex" = ["mutex"];
          "ticket_mutex" = ["mutex"];
          "use_ticket_mutex" = ["mutex" "ticket_mutex"];
        };
        resolvedDefaultFeatures = ["mutex" "spin_mutex"];
      };
      "spin 0.9.8" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
            rename = "lock_api_crate";
            optional = true;
          }
        ];
        features = {
          "barrier" = ["mutex"];
          "default" = ["lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier"];
          "fair_mutex" = ["mutex"];
          "lazy" = ["once"];
          "lock_api" = ["lock_api_crate"];
          "lock_api_crate" = ["dep:lock_api_crate"];
          "portable-atomic" = ["dep:portable-atomic"];
          "portable_atomic" = ["portable-atomic"];
          "spin_mutex" = ["mutex"];
          "ticket_mutex" = ["mutex"];
          "use_ticket_mutex" = ["mutex" "ticket_mutex"];
        };
        resolvedDefaultFeatures = ["barrier" "default" "lazy" "lock_api" "lock_api_crate" "mutex" "once" "rwlock" "spin_mutex"];
      };
      "spki" = rec {
        crateName = "spki";
        version = "0.7.3";
        edition = "2021";
        sha256 = "17fj8k5fmx4w9mp27l970clrh5qa7r5sjdvbsln987xhb34dc7nr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der";
            features = ["oid"];
          }
        ];
        features = {
          "alloc" = ["base64ct?/alloc" "der/alloc"];
          "arbitrary" = ["std" "dep:arbitrary" "der/arbitrary"];
          "base64" = ["dep:base64ct"];
          "fingerprint" = ["sha2"];
          "pem" = ["alloc" "der/pem"];
          "sha2" = ["dep:sha2"];
          "std" = ["der/std" "alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "pem" "std"];
      };
      "sqlx" = rec {
        crateName = "sqlx";
        version = "0.8.6";
        edition = "2021";
        sha256 = "1p4pgppy10ch4vj0fyay9q3g8y5xhzsayyfrrnfncacli69vivqz";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = ["offline" "migrate"];
          }
          {
            name = "sqlx-macros";
            packageId = "sqlx-macros";
            optional = true;
          }
          {
            name = "sqlx-mysql";
            packageId = "sqlx-mysql";
            optional = true;
          }
          {
            name = "sqlx-postgres";
            packageId = "sqlx-postgres";
            optional = true;
          }
          {
            name = "sqlx-sqlite";
            packageId = "sqlx-sqlite";
            optional = true;
          }
        ];
        features = {
          "_unstable-all-types" = ["bigdecimal" "rust_decimal" "json" "time" "chrono" "ipnet" "ipnetwork" "mac_address" "uuid" "bit-vec" "bstr"];
          "all-databases" = ["mysql" "sqlite" "postgres" "any"];
          "any" = ["sqlx-core/any" "sqlx-mysql?/any" "sqlx-postgres?/any" "sqlx-sqlite?/any"];
          "bigdecimal" = ["sqlx-core/bigdecimal" "sqlx-macros?/bigdecimal" "sqlx-mysql?/bigdecimal" "sqlx-postgres?/bigdecimal"];
          "bit-vec" = ["sqlx-core/bit-vec" "sqlx-macros?/bit-vec" "sqlx-postgres?/bit-vec"];
          "bstr" = ["sqlx-core/bstr"];
          "chrono" = ["sqlx-core/chrono" "sqlx-macros?/chrono" "sqlx-mysql?/chrono" "sqlx-postgres?/chrono" "sqlx-sqlite?/chrono"];
          "default" = ["any" "macros" "migrate" "json"];
          "derive" = ["sqlx-macros/derive"];
          "ipnet" = ["sqlx-core/ipnet" "sqlx-macros?/ipnet" "sqlx-postgres?/ipnet"];
          "ipnetwork" = ["sqlx-core/ipnetwork" "sqlx-macros?/ipnetwork" "sqlx-postgres?/ipnetwork"];
          "json" = ["sqlx-core/json" "sqlx-macros?/json" "sqlx-mysql?/json" "sqlx-postgres?/json" "sqlx-sqlite?/json"];
          "mac_address" = ["sqlx-core/mac_address" "sqlx-macros?/mac_address" "sqlx-postgres?/mac_address"];
          "macros" = ["derive" "sqlx-macros/macros"];
          "migrate" = ["sqlx-core/migrate" "sqlx-macros?/migrate" "sqlx-mysql?/migrate" "sqlx-postgres?/migrate" "sqlx-sqlite?/migrate"];
          "mysql" = ["sqlx-mysql" "sqlx-macros?/mysql"];
          "postgres" = ["sqlx-postgres" "sqlx-macros?/postgres"];
          "regexp" = ["sqlx-sqlite?/regexp"];
          "runtime-async-std" = ["_rt-async-std" "sqlx-core/_rt-async-std" "sqlx-macros?/_rt-async-std"];
          "runtime-async-std-native-tls" = ["runtime-async-std" "tls-native-tls"];
          "runtime-async-std-rustls" = ["runtime-async-std" "tls-rustls-ring"];
          "runtime-tokio" = ["_rt-tokio" "sqlx-core/_rt-tokio" "sqlx-macros?/_rt-tokio"];
          "runtime-tokio-native-tls" = ["runtime-tokio" "tls-native-tls"];
          "runtime-tokio-rustls" = ["runtime-tokio" "tls-rustls-ring"];
          "rust_decimal" = ["sqlx-core/rust_decimal" "sqlx-macros?/rust_decimal" "sqlx-mysql?/rust_decimal" "sqlx-postgres?/rust_decimal"];
          "sqlite" = ["_sqlite" "sqlx-sqlite/bundled" "sqlx-macros?/sqlite"];
          "sqlite-preupdate-hook" = ["sqlx-sqlite/preupdate-hook"];
          "sqlite-unbundled" = ["_sqlite" "sqlx-sqlite/unbundled" "sqlx-macros?/sqlite-unbundled"];
          "sqlx-macros" = ["dep:sqlx-macros"];
          "sqlx-mysql" = ["dep:sqlx-mysql"];
          "sqlx-postgres" = ["dep:sqlx-postgres"];
          "sqlx-sqlite" = ["dep:sqlx-sqlite"];
          "time" = ["sqlx-core/time" "sqlx-macros?/time" "sqlx-mysql?/time" "sqlx-postgres?/time" "sqlx-sqlite?/time"];
          "tls-native-tls" = ["sqlx-core/_tls-native-tls" "sqlx-macros?/_tls-native-tls"];
          "tls-rustls" = ["tls-rustls-ring"];
          "tls-rustls-aws-lc-rs" = ["sqlx-core/_tls-rustls-aws-lc-rs" "sqlx-macros?/_tls-rustls-aws-lc-rs"];
          "tls-rustls-ring" = ["tls-rustls-ring-webpki"];
          "tls-rustls-ring-native-roots" = ["sqlx-core/_tls-rustls-ring-native-roots" "sqlx-macros?/_tls-rustls-ring-native-roots"];
          "tls-rustls-ring-webpki" = ["sqlx-core/_tls-rustls-ring-webpki" "sqlx-macros?/_tls-rustls-ring-webpki"];
          "uuid" = ["sqlx-core/uuid" "sqlx-macros?/uuid" "sqlx-mysql?/uuid" "sqlx-postgres?/uuid" "sqlx-sqlite?/uuid"];
        };
        resolvedDefaultFeatures = ["_rt-tokio" "_sqlite" "any" "chrono" "default" "derive" "json" "macros" "migrate" "runtime-tokio" "sqlite" "sqlx-macros" "sqlx-sqlite" "uuid"];
      };
      "sqlx-core" = rec {
        crateName = "sqlx-core";
        version = "0.8.6";
        edition = "2021";
        sha256 = "1ildwsjy7lwfxsvfh174jwhk0rjqvyw37h87q1lhyslbhfqrhrzf";
        libName = "sqlx_core";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = ["clock"];
          }
          {
            name = "crc";
            packageId = "crc";
            optional = true;
          }
          {
            name = "crossbeam-queue";
            packageId = "crossbeam-queue";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "event-listener";
            packageId = "event-listener";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-intrusive";
            packageId = "futures-intrusive";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc" "sink" "io"];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
          }
          {
            name = "hashlink";
            packageId = "hashlink";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
          {
            name = "log";
            packageId = "log";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = ["derive" "rc"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            features = ["raw_value"];
          }
          {
            name = "sha2";
            packageId = "sha2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = ["time" "net" "sync" "fs" "io-util" "rt"];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
            features = ["fs"];
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = ["log"];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["rt"];
          }
        ];
        features = {
          "_rt-async-std" = ["async-std" "async-io"];
          "_rt-tokio" = ["tokio" "tokio-stream"];
          "_tls-native-tls" = ["native-tls"];
          "_tls-rustls" = ["rustls"];
          "_tls-rustls-aws-lc-rs" = ["_tls-rustls" "rustls/aws-lc-rs" "webpki-roots"];
          "_tls-rustls-ring-native-roots" = ["_tls-rustls" "rustls/ring" "rustls-native-certs"];
          "_tls-rustls-ring-webpki" = ["_tls-rustls" "rustls/ring" "webpki-roots"];
          "async-io" = ["dep:async-io"];
          "async-std" = ["dep:async-std"];
          "bigdecimal" = ["dep:bigdecimal"];
          "bit-vec" = ["dep:bit-vec"];
          "bstr" = ["dep:bstr"];
          "chrono" = ["dep:chrono"];
          "crc" = ["dep:crc"];
          "ipnet" = ["dep:ipnet"];
          "ipnetwork" = ["dep:ipnetwork"];
          "json" = ["serde" "serde_json"];
          "mac_address" = ["dep:mac_address"];
          "migrate" = ["sha2" "crc"];
          "native-tls" = ["dep:native-tls"];
          "offline" = ["serde" "either/serde"];
          "regex" = ["dep:regex"];
          "rust_decimal" = ["dep:rust_decimal"];
          "rustls" = ["dep:rustls"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "sha2" = ["dep:sha2"];
          "time" = ["dep:time"];
          "tokio" = ["dep:tokio"];
          "tokio-stream" = ["dep:tokio-stream"];
          "uuid" = ["dep:uuid"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["_rt-tokio" "any" "chrono" "crc" "default" "json" "migrate" "offline" "serde" "serde_json" "sha2" "tokio" "tokio-stream" "uuid"];
      };
      "sqlx-macros" = rec {
        crateName = "sqlx-macros";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0pbiwsv5ysv3qcx1g4p1pvsqlz0xp67k9g5xw3szpb6aijc55m52";
        procMacro = true;
        libName = "sqlx_macros";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = ["any"];
          }
          {
            name = "sqlx-macros-core";
            packageId = "sqlx-macros-core";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["parsing" "proc-macro"];
          }
        ];
        features = {
          "_rt-async-std" = ["sqlx-macros-core/_rt-async-std"];
          "_rt-tokio" = ["sqlx-macros-core/_rt-tokio"];
          "_tls-native-tls" = ["sqlx-macros-core/_tls-native-tls"];
          "_tls-rustls-aws-lc-rs" = ["sqlx-macros-core/_tls-rustls-aws-lc-rs"];
          "_tls-rustls-ring-native-roots" = ["sqlx-macros-core/_tls-rustls-ring-native-roots"];
          "_tls-rustls-ring-webpki" = ["sqlx-macros-core/_tls-rustls-ring-webpki"];
          "bigdecimal" = ["sqlx-macros-core/bigdecimal"];
          "bit-vec" = ["sqlx-macros-core/bit-vec"];
          "chrono" = ["sqlx-macros-core/chrono"];
          "derive" = ["sqlx-macros-core/derive"];
          "ipnet" = ["sqlx-macros-core/ipnet"];
          "ipnetwork" = ["sqlx-macros-core/ipnetwork"];
          "json" = ["sqlx-macros-core/json"];
          "mac_address" = ["sqlx-macros-core/mac_address"];
          "macros" = ["sqlx-macros-core/macros"];
          "migrate" = ["sqlx-macros-core/migrate"];
          "mysql" = ["sqlx-macros-core/mysql"];
          "postgres" = ["sqlx-macros-core/postgres"];
          "rust_decimal" = ["sqlx-macros-core/rust_decimal"];
          "sqlite" = ["sqlx-macros-core/sqlite"];
          "sqlite-unbundled" = ["sqlx-macros-core/sqlite-unbundled"];
          "time" = ["sqlx-macros-core/time"];
          "uuid" = ["sqlx-macros-core/uuid"];
        };
        resolvedDefaultFeatures = ["_rt-tokio" "chrono" "default" "derive" "json" "macros" "migrate" "sqlite" "uuid"];
      };
      "sqlx-macros-core" = rec {
        crateName = "sqlx-macros-core";
        version = "0.8.6";
        edition = "2021";
        sha256 = "16r1slvkzfdxjkc2v5i3yd5l4xzcwbcy35hzfihmmb14262c3a8r";
        libName = "sqlx_macros_core";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "dotenvy";
            packageId = "dotenvy";
            usesDefaultFeatures = false;
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = ["offline"];
          }
          {
            name = "sqlx-mysql";
            packageId = "sqlx-mysql";
            optional = true;
            features = ["offline" "migrate"];
          }
          {
            name = "sqlx-postgres";
            packageId = "sqlx-postgres";
            optional = true;
            features = ["offline" "migrate"];
          }
          {
            name = "sqlx-sqlite";
            packageId = "sqlx-sqlite";
            optional = true;
            features = ["offline" "migrate"];
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["full" "derive" "parsing" "printing" "clone-impls"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
            features = ["time" "net" "sync" "fs" "io-util" "rt"];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "_rt-async-std" = ["async-std" "sqlx-core/_rt-async-std"];
          "_rt-tokio" = ["tokio" "sqlx-core/_rt-tokio"];
          "_tls-native-tls" = ["sqlx-core/_tls-native-tls"];
          "_tls-rustls-aws-lc-rs" = ["sqlx-core/_tls-rustls-aws-lc-rs"];
          "_tls-rustls-ring-native-roots" = ["sqlx-core/_tls-rustls-ring-native-roots"];
          "_tls-rustls-ring-webpki" = ["sqlx-core/_tls-rustls-ring-webpki"];
          "async-std" = ["dep:async-std"];
          "bigdecimal" = ["sqlx-core/bigdecimal" "sqlx-mysql?/bigdecimal" "sqlx-postgres?/bigdecimal"];
          "bit-vec" = ["sqlx-core/bit-vec" "sqlx-postgres?/bit-vec"];
          "chrono" = ["sqlx-core/chrono" "sqlx-mysql?/chrono" "sqlx-postgres?/chrono" "sqlx-sqlite?/chrono"];
          "ipnet" = ["sqlx-core/ipnet" "sqlx-postgres?/ipnet"];
          "ipnetwork" = ["sqlx-core/ipnetwork" "sqlx-postgres?/ipnetwork"];
          "json" = ["sqlx-core/json" "sqlx-mysql?/json" "sqlx-postgres?/json" "sqlx-sqlite?/json"];
          "mac_address" = ["sqlx-core/mac_address" "sqlx-postgres?/mac_address"];
          "migrate" = ["sqlx-core/migrate"];
          "mysql" = ["sqlx-mysql"];
          "postgres" = ["sqlx-postgres"];
          "rust_decimal" = ["sqlx-core/rust_decimal" "sqlx-mysql?/rust_decimal" "sqlx-postgres?/rust_decimal"];
          "sqlite" = ["_sqlite" "sqlx-sqlite/bundled"];
          "sqlite-unbundled" = ["_sqlite" "sqlx-sqlite/unbundled"];
          "sqlx-mysql" = ["dep:sqlx-mysql"];
          "sqlx-postgres" = ["dep:sqlx-postgres"];
          "sqlx-sqlite" = ["dep:sqlx-sqlite"];
          "time" = ["sqlx-core/time" "sqlx-mysql?/time" "sqlx-postgres?/time" "sqlx-sqlite?/time"];
          "tokio" = ["dep:tokio"];
          "uuid" = ["sqlx-core/uuid" "sqlx-mysql?/uuid" "sqlx-postgres?/uuid" "sqlx-sqlite?/uuid"];
        };
        resolvedDefaultFeatures = ["_rt-tokio" "_sqlite" "chrono" "default" "derive" "json" "macros" "migrate" "sqlite" "sqlx-sqlite" "tokio" "uuid"];
      };
      "sqlx-mysql" = rec {
        crateName = "sqlx-mysql";
        version = "0.8.6";
        edition = "2021";
        sha256 = "09n5k60z9j1ilbdmggcla6s27np3zwxc3fnbzsw4wy6z7003y05a";
        libName = "sqlx_mysql";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "atoi";
            packageId = "atoi";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "bitflags";
            packageId = "bitflags";
            usesDefaultFeatures = false;
            features = ["serde"];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std" "clock"];
          }
          {
            name = "crc";
            packageId = "crc";
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "dotenvy";
            packageId = "dotenvy";
          }
          {
            name = "either";
            packageId = "either";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = ["sink" "alloc" "std"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc" "sink" "io"];
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "hmac";
            packageId = "hmac";
            usesDefaultFeatures = false;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "md-5";
            packageId = "md-5";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = ["std" "std_rng"];
          }
          {
            name = "rsa";
            packageId = "rsa";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
          }
          {
            name = "stringprep";
            packageId = "stringprep";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = ["log"];
          }
          {
            name = "uuid";
            packageId = "uuid";
            optional = true;
          }
          {
            name = "whoami";
            packageId = "whoami";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "any" = ["sqlx-core/any"];
          "bigdecimal" = ["dep:bigdecimal" "sqlx-core/bigdecimal"];
          "chrono" = ["dep:chrono" "sqlx-core/chrono"];
          "json" = ["sqlx-core/json" "serde"];
          "migrate" = ["sqlx-core/migrate"];
          "offline" = ["sqlx-core/offline" "serde/derive"];
          "rust_decimal" = ["dep:rust_decimal" "rust_decimal/maths" "sqlx-core/rust_decimal"];
          "serde" = ["dep:serde"];
          "time" = ["dep:time" "sqlx-core/time"];
          "uuid" = ["dep:uuid" "sqlx-core/uuid"];
        };
        resolvedDefaultFeatures = ["any" "chrono" "json" "migrate" "offline" "serde" "uuid"];
      };
      "sqlx-postgres" = rec {
        crateName = "sqlx-postgres";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0insvvaql0pz6nk64dbss4q4qzilj7zh2j0m9cc7rw1wlpazqn6v";
        libName = "sqlx_postgres";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "atoi";
            packageId = "atoi";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "bitflags";
            packageId = "bitflags";
            usesDefaultFeatures = false;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std" "clock"];
          }
          {
            name = "crc";
            packageId = "crc";
          }
          {
            name = "dotenvy";
            packageId = "dotenvy";
            usesDefaultFeatures = false;
          }
          {
            name = "etcetera";
            packageId = "etcetera";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = ["sink" "alloc" "std"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc" "sink" "io"];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "hmac";
            packageId = "hmac";
            usesDefaultFeatures = false;
            features = ["reset"];
          }
          {
            name = "home";
            packageId = "home";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "md-5";
            packageId = "md-5";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = ["std" "std_rng"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = ["raw_value"];
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = ["serde"];
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
            features = ["json"];
          }
          {
            name = "stringprep";
            packageId = "stringprep";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = ["log"];
          }
          {
            name = "uuid";
            packageId = "uuid";
            optional = true;
          }
          {
            name = "whoami";
            packageId = "whoami";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "any" = ["sqlx-core/any"];
          "bigdecimal" = ["dep:bigdecimal" "dep:num-bigint" "sqlx-core/bigdecimal"];
          "bit-vec" = ["dep:bit-vec" "sqlx-core/bit-vec"];
          "chrono" = ["dep:chrono" "sqlx-core/chrono"];
          "ipnet" = ["dep:ipnet" "sqlx-core/ipnet"];
          "ipnetwork" = ["dep:ipnetwork" "sqlx-core/ipnetwork"];
          "json" = ["sqlx-core/json"];
          "mac_address" = ["dep:mac_address" "sqlx-core/mac_address"];
          "migrate" = ["sqlx-core/migrate"];
          "offline" = ["sqlx-core/offline"];
          "rust_decimal" = ["dep:rust_decimal" "rust_decimal/maths" "sqlx-core/rust_decimal"];
          "time" = ["dep:time" "sqlx-core/time"];
          "uuid" = ["dep:uuid" "sqlx-core/uuid"];
        };
        resolvedDefaultFeatures = ["any" "chrono" "json" "migrate" "offline" "uuid"];
      };
      "sqlx-sqlite" = rec {
        crateName = "sqlx-sqlite";
        version = "0.8.6";
        edition = "2021";
        sha256 = "1siy1jhqf5flpxyrmy7rw66j0y0v2l7zjmc00c0l86rc1gkjzlf2";
        libName = "sqlx_sqlite";
        authors = [
          "Ryan Leckey <leckey.ryan@gmail.com>"
          "Austin Bonander <austin.bonander@gmail.com>"
          "Chloe Ross <orangesnowfox@gmail.com>"
          "Daniel Akhterov <akhterovd@gmail.com>"
        ];
        dependencies = [
          {
            name = "atoi";
            packageId = "atoi";
          }
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std" "clock"];
          }
          {
            name = "flume";
            packageId = "flume";
            usesDefaultFeatures = false;
            features = ["async"];
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = ["sink" "alloc" "std"];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-intrusive";
            packageId = "futures-intrusive";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["alloc" "sink"];
          }
          {
            name = "libsqlite3-sys";
            packageId = "libsqlite3-sys";
            usesDefaultFeatures = false;
            features = ["pkg-config" "vcpkg" "unlock_notify"];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = ["derive"];
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sqlx-core";
            packageId = "sqlx-core";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tracing";
            packageId = "tracing";
            features = ["log"];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid";
            optional = true;
          }
        ];
        features = {
          "any" = ["sqlx-core/any"];
          "bundled" = ["libsqlite3-sys/bundled"];
          "chrono" = ["dep:chrono" "sqlx-core/chrono"];
          "json" = ["sqlx-core/json" "serde"];
          "migrate" = ["sqlx-core/migrate"];
          "offline" = ["sqlx-core/offline" "serde"];
          "preupdate-hook" = ["libsqlite3-sys/preupdate_hook"];
          "regexp" = ["dep:regex"];
          "serde" = ["dep:serde"];
          "time" = ["dep:time" "sqlx-core/time"];
          "unbundled" = ["libsqlite3-sys/buildtime_bindgen"];
          "uuid" = ["dep:uuid" "sqlx-core/uuid"];
        };
        resolvedDefaultFeatures = ["any" "bundled" "chrono" "json" "migrate" "offline" "serde" "uuid"];
      };
      "sse-codec" = rec {
        crateName = "sse-codec";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0nh8b1y2k5lsvcva15da4by935bavirfpavs0d54pi2h2f0rz9c4";
        libName = "sse_codec";
        authors = [
          "Renée Kooi <renee@kooi.me>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 0.5.6";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures_codec";
            packageId = "futures_codec";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
        };
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc"];
      };
      "stacker" = rec {
        crateName = "stacker";
        version = "0.1.21";
        edition = "2021";
        sha256 = "0syhx9fiydyd901v464saqd6z8f31a6is24iv94hfxyv5pihgnyd";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Simonas Kazlauskas <stacker@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "psm";
            packageId = "psm";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_System_Memory" "Win32_System_Threading" "Win32_Foundation"];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
      };
      "static_assertions_next" = rec {
        crateName = "static_assertions_next";
        version = "1.1.2";
        edition = "2021";
        sha256 = "0rn7c362606jj1lp3ff3vsicjmpr2x1qra9zd25rlpjrh98sxgnp";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
          "proc" = ["proc_static_assertions_next"];
          "proc_static_assertions_next" = ["dep:proc_static_assertions_next"];
        };
      };
      "storekey" = rec {
        crateName = "storekey";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1cl5xwm7n3mmyhw2ki55cr3rkj8c9q8qf7gp8jrj6paahcrjii23";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
          "Michal Hornicky <mhornick@redhat.com>"
          "Dan Burkert <dan@danburkert.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
      };
      "string_cache" = rec {
        crateName = "string_cache";
        version = "0.8.9";
        edition = "2018";
        sha256 = "03z7km2kzlwiv2r2qifq5riv4g8phazwng9wnvs3py3lzainnxxz";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "new_debug_unreachable";
            packageId = "new_debug_unreachable";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "precomputed-hash";
            packageId = "precomputed-hash";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "default" = ["serde_support"];
          "malloc_size_of" = ["dep:malloc_size_of"];
          "serde" = ["dep:serde"];
          "serde_support" = ["serde"];
        };
        resolvedDefaultFeatures = ["default" "serde" "serde_support"];
      };
      "string_cache_codegen" = rec {
        crateName = "string_cache_codegen";
        version = "0.5.4";
        edition = "2018";
        sha256 = "181ir4d6y053s1kka2idpjx5g9d9jgll6fy517jhzzpi2n3r44f7";
        libPath = "lib.rs";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
      };
      "stringprep" = rec {
        crateName = "stringprep";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1cb3jis4h2b767csk272zw92lc6jzfzvh8d6m1cd86yqjb9z6kbv";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
          }
          {
            name = "unicode-properties";
            packageId = "unicode-properties";
          }
        ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];
      };
      "strum 0.26.3" = rec {
        crateName = "strum";
        version = "0.26.3";
        edition = "2018";
        sha256 = "01lgl6jvrf4j28v5kmx9bp480ygf1nhvac8b4p7rcj9hxw50zv4g";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
        ];
        features = {
          "default" = ["std"];
          "derive" = ["strum_macros"];
          "phf" = ["dep:phf"];
          "strum_macros" = ["dep:strum_macros"];
        };
        resolvedDefaultFeatures = ["default" "derive" "std" "strum_macros"];
      };
      "strum 0.27.2" = rec {
        crateName = "strum";
        version = "0.27.2";
        edition = "2021";
        sha256 = "1ksb9jssw4bg9kmv9nlgp2jqa4vnsa3y4q9zkppvl952q7vdc8xg";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.27.2";
            optional = true;
          }
        ];
        features = {
          "default" = ["std"];
          "derive" = ["strum_macros"];
          "phf" = ["dep:phf"];
          "strum_macros" = ["dep:strum_macros"];
        };
        resolvedDefaultFeatures = ["default" "derive" "std" "strum_macros"];
      };
      "strum_macros 0.26.4" = rec {
        crateName = "strum_macros";
        version = "0.26.4";
        edition = "2018";
        sha256 = "1gl1wmq24b8md527cpyd5bw9rkbqldd7k1h38kf5ajd2ln2ywssc";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["parsing" "extra-traits"];
          }
        ];
      };
      "strum_macros 0.27.2" = rec {
        crateName = "strum_macros";
        version = "0.27.2";
        edition = "2021";
        sha256 = "19xwikxma0yi70fxkcy1yxcv0ica8gf3jnh5gj936jza8lwcx5bn";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["parsing"];
          }
        ];
      };
      "stun-rs" = rec {
        crateName = "stun-rs";
        version = "0.1.11";
        edition = "2021";
        sha256 = "1b62k9m9zqahvk8issydxff1zgv7sgifjmb4mzhnjmkx7481z4pv";
        libName = "stun_rs";
        authors = [
          "Santiago Carot-Nemesio <sancane@gmail.com"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bounded-integer";
            packageId = "bounded-integer";
            features = ["types"];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "crc";
            packageId = "crc";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
          }
          {
            name = "fallible-iterator";
            packageId = "fallible-iterator";
          }
          {
            name = "hmac-sha1";
            packageId = "hmac-sha1";
          }
          {
            name = "hmac-sha256";
            packageId = "hmac-sha256";
          }
          {
            name = "hostname-validator";
            packageId = "hostname-validator";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "md5";
            packageId = "md5";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "precis-core";
            packageId = "precis-core";
          }
          {
            name = "precis-profiles";
            packageId = "precis-profiles";
          }
          {
            name = "quoted-string-parser";
            packageId = "quoted-string-parser";
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = ["std" "i128"];
        };
        resolvedDefaultFeatures = ["default" "i128" "std"];
      };
      "surge-ping" = rec {
        crateName = "surge-ping";
        version = "0.8.2";
        edition = "2018";
        sha256 = "15adckgkbls9wp1jqs33cj003s1lyr5cbp9iqcjvn5l07l87inkg";
        libName = "surge_ping";
        authors = [
          "kolapapa <kolapapa2021@gmail.com>"
        ];
        dependencies = [
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "pnet_packet";
            packageId = "pnet_packet";
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
          }
          {
            name = "socket2";
            packageId = "socket2 0.5.10";
            features = ["all"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["time" "sync" "net" "rt"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
        ];
      };
      "surrealdb" = rec {
        crateName = "surrealdb";
        version = "2.3.7";
        edition = "2021";
        sha256 = "1l6l3vv6q2icf3bhbf4mxvlig6ccqq2sim5x7zmz880rn8798iam";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = ["serde"];
          }
          {
            name = "dmp";
            packageId = "dmp";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "geo";
            packageId = "geo";
            features = ["use-serde"];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["wasm_js"];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = ["serde"];
          }
          {
            name = "path-clean";
            packageId = "path-clean";
          }
          {
            name = "pharos";
            packageId = "pharos";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
          }
          {
            name = "reblessive";
            packageId = "reblessive";
            features = ["tree"];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            usesDefaultFeatures = false;
            features = ["json" "multipart" "stream"];
          }
          {
            name = "revision";
            packageId = "revision 0.11.0";
            features = ["chrono" "geo" "roaring" "regex" "rust_decimal" "uuid"];
          }
          {
            name = "ring";
            packageId = "ring";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["wasm32_unknown_unknown_js"];
          }
          {
            name = "rust_decimal";
            packageId = "rust_decimal";
            features = ["maths" "serde-str"];
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = ["ring" "logging" "std" "tls12"];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["web"];
          }
          {
            name = "semver";
            packageId = "semver";
            features = ["serde"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde-content";
            packageId = "serde-content";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "surrealdb-core";
            packageId = "surrealdb-core";
            rename = "surrealdb-core";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["macros" "io-util" "io-std" "fs" "rt-multi-thread" "time" "sync"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["rt" "sync"];
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite";
            optional = true;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["url"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["compat"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "trice";
            packageId = "trice";
            optional = true;
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid";
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["serde" "v4" "v7"];
          }
          {
            name = "uuid";
            packageId = "uuid";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["serde" "js" "v4" "v7"];
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wasmtimer";
            packageId = "wasmtimer";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["tokio"];
          }
          {
            name = "ws_stream_wasm";
            packageId = "ws_stream_wasm";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["macros" "sync" "rt-multi-thread"];
          }
        ];
        features = {
          "allocation-tracking" = ["surrealdb-core/allocation-tracking"];
          "allocator" = ["surrealdb-core/allocator"];
          "arbitrary" = ["surrealdb-core/arbitrary"];
          "default" = ["protocol-ws" "rustls"];
          "http" = ["surrealdb-core/http"];
          "jwks" = ["surrealdb-core/jwks"];
          "kv-fdb-7_1" = ["surrealdb-core/kv-fdb-7_1"];
          "kv-fdb-7_3" = ["surrealdb-core/kv-fdb-7_3"];
          "kv-indxdb" = ["surrealdb-core/kv-indxdb"];
          "kv-mem" = ["surrealdb-core/kv-mem" "tokio/time"];
          "kv-rocksdb" = ["surrealdb-core/kv-rocksdb" "tokio/time"];
          "kv-surrealcs" = ["surrealdb-core/kv-surrealcs" "tokio/time"];
          "kv-surrealkv" = ["surrealdb-core/kv-surrealkv" "tokio/time"];
          "kv-tikv" = ["surrealdb-core/kv-tikv" "tokio/time"];
          "ml" = ["surrealdb-core/ml"];
          "native-tls" = ["dep:native-tls" "reqwest?/native-tls" "tokio-tungstenite?/native-tls"];
          "protocol-http" = ["dep:reqwest"];
          "protocol-ws" = ["dep:tokio-tungstenite" "dep:trice" "tokio/time"];
          "rustls" = ["dep:rustls" "reqwest?/rustls-tls" "tokio-tungstenite?/rustls-tls-webpki-roots"];
          "scripting" = ["surrealdb-core/scripting"];
        };
        resolvedDefaultFeatures = ["default" "kv-mem" "kv-surrealkv" "protocol-ws" "rustls"];
      };
      "surrealdb-core" = rec {
        crateName = "surrealdb-core";
        version = "2.3.7";
        edition = "2021";
        sha256 = "1lg625nx0y01mb2adglsx2bh2yhdwjw4dwg32lgnl5g8x39w7h04";
        libName = "surrealdb_core";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "addr";
            packageId = "addr";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "affinitypool";
            packageId = "affinitypool";
            optional = true;
          }
          {
            name = "ahash";
            packageId = "ahash 0.8.12";
          }
          {
            name = "ammonia";
            packageId = "ammonia";
          }
          {
            name = "any_ascii";
            packageId = "any_ascii";
            rename = "ascii";
          }
          {
            name = "argon2";
            packageId = "argon2";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-executor";
            packageId = "async-executor";
          }
          {
            name = "async-graphql";
            packageId = "async-graphql";
            usesDefaultFeatures = false;
            features = ["dynamic-schema"];
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bcrypt";
            packageId = "bcrypt";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "castaway";
            packageId = "castaway";
          }
          {
            name = "cedar-policy";
            packageId = "cedar-policy";
          }
          {
            name = "chrono";
            packageId = "chrono";
            features = ["serde"];
          }
          {
            name = "ciborium";
            packageId = "ciborium";
          }
          {
            name = "dashmap";
            packageId = "dashmap 5.5.3";
          }
          {
            name = "deunicode";
            packageId = "deunicode";
          }
          {
            name = "dmp";
            packageId = "dmp";
          }
          {
            name = "ext-sort";
            packageId = "ext-sort";
            optional = true;
          }
          {
            name = "fst";
            packageId = "fst";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "fuzzy-matcher";
            packageId = "fuzzy-matcher";
          }
          {
            name = "geo";
            packageId = "geo";
            features = ["use-serde"];
          }
          {
            name = "geo-types";
            packageId = "geo-types";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["wasm_js"];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
          }
          {
            name = "jsonwebtoken";
            packageId = "jsonwebtoken";
          }
          {
            name = "lexicmp";
            packageId = "lexicmp";
          }
          {
            name = "linfa-linalg";
            packageId = "linfa-linalg";
          }
          {
            name = "md-5";
            packageId = "md-5";
          }
          {
            name = "nanoid";
            packageId = "nanoid";
          }
          {
            name = "ndarray";
            packageId = "ndarray";
          }
          {
            name = "ndarray-stats";
            packageId = "ndarray-stats";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "object_store";
            packageId = "object_store";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2";
            features = ["simple"];
          }
          {
            name = "pharos";
            packageId = "pharos";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
          }
          {
            name = "phf";
            packageId = "phf";
            features = ["macros" "unicase"];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quick_cache";
            packageId = "quick_cache 0.5.2";
          }
          {
            name = "radix_trie";
            packageId = "radix_trie";
            features = ["serde"];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "reblessive";
            packageId = "reblessive";
            features = ["tree"];
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "revision";
            packageId = "revision 0.11.0";
            features = ["chrono" "geo" "roaring" "regex" "rust_decimal" "uuid"];
          }
          {
            name = "ring";
            packageId = "ring";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["wasm32_unknown_unknown_js"];
          }
          {
            name = "rmpv";
            packageId = "rmpv";
          }
          {
            name = "roaring";
            packageId = "roaring";
            features = ["serde"];
          }
          {
            name = "rust-stemmers";
            packageId = "rust-stemmers";
          }
          {
            name = "rust_decimal";
            packageId = "rust_decimal";
            features = ["maths" "serde-str"];
          }
          {
            name = "scrypt";
            packageId = "scrypt";
          }
          {
            name = "semver";
            packageId = "semver";
            features = ["serde"];
          }
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
          {
            name = "serde-content";
            packageId = "serde-content";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "snap";
            packageId = "snap";
          }
          {
            name = "storekey";
            packageId = "storekey";
          }
          {
            name = "strsim";
            packageId = "strsim";
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
          {
            name = "surrealkv";
            packageId = "surrealkv";
            optional = true;
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["macros" "io-util" "io-std" "fs" "rt-multi-thread" "time" "sync"];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["rt" "sync"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "trice";
            packageId = "trice";
          }
          {
            name = "ulid";
            packageId = "ulid";
            features = ["serde"];
          }
          {
            name = "unicase";
            packageId = "unicase";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "uuid";
            packageId = "uuid";
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["serde" "v4" "v7"];
          }
          {
            name = "uuid";
            packageId = "uuid";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["serde" "js" "v4" "v7"];
          }
          {
            name = "vart";
            packageId = "vart 0.8.1";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wasmtimer";
            packageId = "wasmtimer";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
            features = ["tokio"];
          }
          {
            name = "ws_stream_wasm";
            packageId = "ws_stream_wasm";
            target = {
              target,
              features,
            }: (builtins.elem "wasm" target."family");
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["macros" "sync" "rt-multi-thread"];
          }
        ];
        features = {
          "allocator" = ["dep:jemallocator" "dep:mimalloc"];
          "arbitrary" = ["dep:arbitrary" "dep:regex-syntax" "regex-syntax/arbitrary" "rust_decimal/rust-fuzz" "geo-types/arbitrary" "uuid/arbitrary"];
          "default" = ["kv-mem"];
          "http" = ["dep:reqwest"];
          "jwks" = ["dep:reqwest"];
          "kv-fdb" = ["dep:foundationdb" "tokio/time" "dep:tempfile" "dep:ext-sort"];
          "kv-fdb-7_1" = ["foundationdb/fdb-7_1" "kv-fdb"];
          "kv-fdb-7_3" = ["foundationdb/fdb-7_3" "kv-fdb"];
          "kv-indxdb" = ["dep:indxdb"];
          "kv-mem" = ["dep:surrealkv" "tokio/time" "dep:tempfile" "dep:ext-sort" "dep:affinitypool"];
          "kv-rocksdb" = ["dep:rocksdb" "tokio/time" "dep:tempfile" "dep:ext-sort" "dep:affinitypool"];
          "kv-surrealcs" = ["dep:surrealcs" "tokio/time" "dep:tempfile" "dep:ext-sort"];
          "kv-surrealkv" = ["dep:surrealkv" "tokio/time" "dep:tempfile" "dep:ext-sort" "dep:affinitypool"];
          "kv-tikv" = ["dep:tikv" "tokio/time" "dep:tempfile" "dep:ext-sort"];
          "ml" = ["dep:surrealml"];
          "scripting" = ["dep:js"];
          "tokio-tungstenite" = ["dep:tokio-tungstenite"];
        };
        resolvedDefaultFeatures = ["kv-mem" "kv-surrealkv"];
      };
      "surrealkv" = rec {
        crateName = "surrealkv";
        version = "0.9.3";
        edition = "2021";
        sha256 = "1lgpd4wjpb6x9xf4xa72cjbagfdccmrwpxnml6cqbzxxg4ch9988";
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash 0.8.12";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "double-ended-peekable";
            packageId = "double-ended-peekable";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["js"];
          }
          {
            name = "lru";
            packageId = "lru 0.12.5";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "quick_cache";
            packageId = "quick_cache 0.6.16";
          }
          {
            name = "revision";
            packageId = "revision 0.10.0";
          }
          {
            name = "vart";
            packageId = "vart 0.9.3";
          }
        ];
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = ["derive" "parsing" "printing" "clone-impls" "proc-macro"];
          "printing" = ["quote"];
          "proc-macro" = ["proc-macro2/proc-macro" "quote/proc-macro"];
          "quote" = ["dep:quote"];
          "test" = ["syn-test-suite/all-features"];
        };
        resolvedDefaultFeatures = ["clone-impls" "default" "derive" "full" "parsing" "printing" "proc-macro" "quote" "visit-mut"];
      };
      "syn 2.0.104" = rec {
        crateName = "syn";
        version = "2.0.104";
        edition = "2021";
        sha256 = "0h2s8cxh5dsh9h41dxnlzpifqqn59cqgm0kljawws61ljq2zgdhp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = ["derive" "parsing" "printing" "clone-impls" "proc-macro"];
          "printing" = ["dep:quote"];
          "proc-macro" = ["proc-macro2/proc-macro" "quote?/proc-macro"];
          "test" = ["syn-test-suite/all-features"];
        };
        resolvedDefaultFeatures = ["clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut"];
      };
      "sync_wrapper" = rec {
        crateName = "sync_wrapper";
        version = "1.0.2";
        edition = "2021";
        sha256 = "0qvjyasd6w18mjg5xlaq5jgy84jsjfsvmnn12c13gypxbv75dwhb";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "futures" = ["futures-core"];
          "futures-core" = ["dep:futures-core"];
        };
        resolvedDefaultFeatures = ["futures" "futures-core"];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.13.2";
        edition = "2018";
        sha256 = "1lh9lx3r3jb18f8sbj29am5hm9jymvbwh6jb1izsnnxgvgrp12kj";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["derive" "parsing" "printing" "clone-impls" "visit" "extra-traits"];
          }
        ];
        features = {
          "default" = ["proc-macro"];
          "proc-macro" = ["proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro"];
        };
        resolvedDefaultFeatures = ["default" "proc-macro"];
      };
      "sysinfo" = rec {
        crateName = "sysinfo";
        version = "0.33.1";
        edition = "2021";
        sha256 = "00bcbj9rk39n07ylclj9klggkshxyianv2lfkpqnc6x0iqj5ij2g";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = {
              target,
              features,
            }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (!(("unknown" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "ntapi";
            packageId = "ntapi";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "windows";
            packageId = "windows 0.57.0";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        features = {
          "apple-app-store" = ["apple-sandbox"];
          "c-interface" = ["default"];
          "component" = ["windows/Win32_Foundation" "windows/Win32_Security" "windows/Win32_System_Com" "windows/Win32_System_Rpc" "windows/Win32_System_Variant" "windows/Win32_System_Wmi"];
          "debug" = ["libc/extra_traits"];
          "default" = ["component" "disk" "network" "system" "user" "multithread"];
          "disk" = ["windows/Win32_Foundation" "windows/Win32_Storage_FileSystem" "windows/Win32_Security" "windows/Win32_System_IO" "windows/Win32_System_Ioctl" "windows/Win32_System_SystemServices" "windows/Win32_System_WindowsProgramming"];
          "multithread" = ["dep:rayon"];
          "network" = ["windows/Win32_Foundation" "windows/Win32_NetworkManagement_IpHelper" "windows/Win32_NetworkManagement_Ndis" "windows/Win32_Networking_WinSock"];
          "serde" = ["dep:serde"];
          "system" = ["windows/Win32_Foundation" "windows/Wdk_System_SystemInformation" "windows/Wdk_System_SystemServices" "windows/Wdk_System_Threading" "windows/Win32_Security_Authorization" "windows/Win32_System_Diagnostics_Debug" "windows/Win32_System_Kernel" "windows/Win32_System_Memory" "windows/Win32_System_Performance" "windows/Win32_System_Power" "windows/Win32_System_ProcessStatus" "windows/Win32_System_Registry" "windows/Win32_System_RemoteDesktop" "windows/Win32_System_SystemInformation" "windows/Win32_System_SystemServices" "windows/Win32_System_Threading" "windows/Win32_UI_Shell" "dep:ntapi" "dep:memchr"];
          "user" = ["windows/Win32_Foundation" "windows/Win32_NetworkManagement_NetManagement" "windows/Win32_Security" "windows/Win32_Security_Authentication_Identity" "windows/Win32_Security_Authorization"];
          "windows" = ["dep:windows"];
        };
        resolvedDefaultFeatures = ["component" "default" "disk" "multithread" "network" "system" "user" "windows"];
      };
      "system-configuration" = rec {
        crateName = "system-configuration";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0sxslml567zm0v8g732314vd2gk9sd3k4xj22xk6p64xir29v1rw";
        libName = "system_configuration";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "system-configuration-sys";
            packageId = "system-configuration-sys";
          }
        ];
      };
      "system-configuration-sys" = rec {
        crateName = "system-configuration-sys";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1i5sqrmgy58l4704hibjbl36hclddglh73fb3wx95jnmrq81n7cf";
        libName = "system_configuration_sys";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
      };
      "tagptr" = rec {
        crateName = "tagptr";
        version = "0.2.0";
        edition = "2018";
        sha256 = "05r4mwvlsclx1ayj65hpzjv3dn4wpi8j4xm695vydccf9k7r683v";
        authors = [
          "Oliver Giersch"
        ];
      };
      "tap" = rec {
        crateName = "tap";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0sc3gl4nldqpvyhqi3bbd0l9k7fngrcl4zs47n314nqqk4bpx4sm";
        authors = [
          "Elliott Linder <elliott.darfink@gmail.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.21.0";
        edition = "2021";
        sha256 = "07kx58ibjk3ydq1gcb7q637fs5zkxaa550lxckhgg9p3427izdhm";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = {
              target,
              features,
            }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = ["fs"];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Storage_FileSystem" "Win32_Foundation"];
          }
        ];
        features = {
          "default" = ["getrandom"];
          "getrandom" = ["dep:getrandom"];
        };
        resolvedDefaultFeatures = ["default" "getrandom"];
      };
      "tendril" = rec {
        crateName = "tendril";
        version = "0.4.3";
        edition = "2015";
        sha256 = "1c3vip59sqwxn148i714nmkrvjzbk7105vj0h92s6r64bw614jnj";
        authors = [
          "Keegan McAllister <mcallister.keegan@gmail.com>"
          "Simon Sapin <simon.sapin@exyr.org>"
          "Chris Morgan <me@chrismorgan.info>"
        ];
        dependencies = [
          {
            name = "futf";
            packageId = "futf";
          }
          {
            name = "mac";
            packageId = "mac";
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        features = {
          "encoding" = ["dep:encoding"];
          "encoding_rs" = ["dep:encoding_rs"];
        };
      };
      "term" = rec {
        crateName = "term";
        version = "0.7.0";
        edition = "2018";
        sha256 = "07xzxmg7dbhlirpyfq09v7cfb9gxn0077sqqvszgjvyrjnngi7f5";
        authors = [
          "The Rust Project Developers"
          "Steven Allen"
        ];
        dependencies = [
          {
            name = "dirs-next";
            packageId = "dirs-next";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["consoleapi" "wincon" "handleapi" "fileapi"];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0mappjh3fj3p2nmrg4y7qv94rchwi9mzmgmfflr8p2awdj7lyy86";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
      };
      "thiserror 1.0.69" = rec {
        crateName = "thiserror";
        version = "1.0.69";
        edition = "2021";
        sha256 = "0lizjay08agcr5hs9yfzzj6axs53a2rgx070a1dsi3jpkcrzbamn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 1.0.69";
          }
        ];
      };
      "thiserror 2.0.12" = rec {
        crateName = "thiserror";
        version = "2.0.12";
        edition = "2021";
        sha256 = "024791nsc0np63g2pq30cjf9acj38z3jwx9apvvi8qsqmqnqlysn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 2.0.12";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "thiserror-impl 1.0.69" = rec {
        crateName = "thiserror-impl";
        version = "1.0.69";
        edition = "2021";
        sha256 = "1h84fmn2nai41cxbhk6pqf46bxqq1b344v8yz089w1chzi76rvjg";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "thiserror-impl 2.0.12" = rec {
        crateName = "thiserror-impl";
        version = "2.0.12";
        edition = "2021";
        sha256 = "07bsn7shydaidvyyrm7jz29vp78vrxr9cr9044rfmn078lmz8z3z";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.9";
        edition = "2021";
        sha256 = "1191jvl8d63agnq06pcnarivf63qzgpws5xa33hgc92gjjj4c0pn";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
        };
      };
      "time" = rec {
        crateName = "time";
        version = "0.3.41";
        edition = "2021";
        sha256 = "0h0cpiyya8cjlrh00d2r72bmgg4lsdcncs76qpwy0rn2kghijxla";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = ["powerfmt"];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = ["serde?/alloc"];
          "default" = ["std"];
          "formatting" = ["dep:itoa" "std" "time-macros?/formatting"];
          "large-dates" = ["time-macros?/large-dates"];
          "local-offset" = ["std" "dep:libc" "dep:num_threads"];
          "macros" = ["dep:time-macros"];
          "parsing" = ["time-macros?/parsing"];
          "quickcheck" = ["dep:quickcheck" "alloc" "deranged/quickcheck"];
          "rand" = ["dep:rand" "deranged/rand"];
          "serde" = ["dep:serde" "time-macros?/serde" "deranged/serde"];
          "serde-human-readable" = ["serde" "formatting" "parsing"];
          "serde-well-known" = ["serde" "formatting" "parsing"];
          "std" = ["alloc" "deranged/std"];
          "wasm-bindgen" = ["dep:js-sys"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "formatting" "macros" "parsing" "serde" "serde-well-known" "std" "wasm-bindgen"];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0z5h9fknvdvbs2k2s1chpi3ab3jvgkfhdnqwrvixjngm263s7sf9";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.22";
        edition = "2021";
        sha256 = "0jcaxpw220han2bzbrdlpqhy1s5k9i8ri3lw6n5zv4zcja9p69im";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = ["formatting" "parsing" "serde"];
      };
      "tiny-keccak" = rec {
        crateName = "tiny-keccak";
        version = "2.0.2";
        edition = "2018";
        sha256 = "0dq2x0hjffmixgyf6xv9wgsbcxkd65ld0wrfqmagji8a829kg79c";
        libName = "tiny_keccak";
        authors = [
          "debris <marek.kotewicz@gmail.com>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "fips202" = ["keccak" "shake" "sha3"];
          "kmac" = ["cshake"];
          "parallel_hash" = ["cshake"];
          "sp800" = ["cshake" "kmac" "tuple_hash"];
          "tuple_hash" = ["cshake"];
        };
        resolvedDefaultFeatures = ["default" "sha3"];
      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.8.1";
        edition = "2021";
        sha256 = "12sc6h3hnn6x78iycm5v6wrs2xhxph0ydm43yyn7gdfw8l8nsksx";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["zerovec?/alloc"];
          "databake" = ["dep:databake"];
          "default" = ["alloc"];
          "serde" = ["dep:serde"];
          "zerovec" = ["dep:zerovec"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "zerovec"];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.9.0";
        edition = "2018";
        sha256 = "0w9w8qcifns9lzvlbfwa01y0skhr542anwa3rpn28rg82wgndcq9";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = ["tinyvec_macros"];
          "arbitrary" = ["dep:arbitrary"];
          "borsh" = ["dep:borsh"];
          "generic-array" = ["dep:generic-array"];
          "latest_stable_rust" = ["rustc_1_61"];
          "real_blackbox" = ["criterion/real_blackbox"];
          "rustc_1_55" = ["rustc_1_40"];
          "rustc_1_57" = ["rustc_1_55"];
          "rustc_1_61" = ["rustc_1_57"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
          "tinyvec_macros" = ["dep:tinyvec_macros"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "tinyvec_macros"];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];
      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.47.1";
        edition = "2021";
        sha256 = "0f2hp5v3payg6x04ijj67si1wsdhksskhmjs2k9p5f7bmpyrmr49";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = {
              target,
              features,
            }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
            optional = true;
          }
          {
            name = "io-uring";
            packageId = "io-uring";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "mio";
            packageId = "mio";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
            features = ["os-poll" "os-ext"];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            target = {
              target,
              features,
            }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "socket2";
            packageId = "socket2 0.6.0";
            optional = true;
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
            features = ["all"];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."tokio_unstable" or false);
            features = ["std"];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            optional = true;
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {
              target,
              features,
            }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2 0.6.0";
            target = {
              target,
              features,
            }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Security_Authorization"];
          }
        ];
        features = {
          "bytes" = ["dep:bytes"];
          "full" = ["fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time"];
          "io-util" = ["bytes"];
          "libc" = ["dep:libc"];
          "macros" = ["tokio-macros"];
          "mio" = ["dep:mio"];
          "net" = ["libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices"];
          "parking_lot" = ["dep:parking_lot"];
          "process" = ["bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming"];
          "rt-multi-thread" = ["rt"];
          "signal" = ["libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console"];
          "signal-hook-registry" = ["dep:signal-hook-registry"];
          "socket2" = ["dep:socket2"];
          "test-util" = ["rt" "sync" "time"];
          "tokio-macros" = ["dep:tokio-macros"];
          "tracing" = ["dep:tracing"];
          "windows-sys" = ["dep:windows-sys"];
        };
        resolvedDefaultFeatures = ["bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "time" "tokio-macros" "tracing" "windows-sys"];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1f6az2xbvqp7am417b78d1za8axbvjvxnmkakz9vr8s52czx81kf";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
      };
      "tokio-rustls" = rec {
        crateName = "tokio-rustls";
        version = "0.26.2";
        edition = "2021";
        sha256 = "16wf007q3584j46wc4s0zc4szj6280g23hka6x6bgs50l4v7nwlf";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
        ];
        features = {
          "aws-lc-rs" = ["aws_lc_rs"];
          "aws_lc_rs" = ["rustls/aws_lc_rs"];
          "default" = ["logging" "tls12" "aws_lc_rs"];
          "fips" = ["rustls/fips"];
          "logging" = ["rustls/logging"];
          "ring" = ["rustls/ring"];
          "tls12" = ["rustls/tls12"];
        };
        resolvedDefaultFeatures = ["logging" "ring" "tls12"];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.17";
        edition = "2021";
        sha256 = "0ix0770hfp4x5rh5bl7vsnr3d4iz4ms43i522xw70xaap9xqv9gc";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full" "test-util"];
          }
        ];
        features = {
          "default" = ["time"];
          "fs" = ["tokio/fs"];
          "full" = ["time" "net" "io-util" "fs" "sync" "signal"];
          "io-util" = ["tokio/io-util"];
          "net" = ["tokio/net"];
          "signal" = ["tokio/signal"];
          "sync" = ["tokio/sync" "tokio-util"];
          "time" = ["tokio/time"];
          "tokio-util" = ["dep:tokio-util"];
        };
        resolvedDefaultFeatures = ["default" "fs" "sync" "time" "tokio-util"];
      };
      "tokio-tungstenite" = rec {
        crateName = "tokio-tungstenite";
        version = "0.23.1";
        edition = "2018";
        sha256 = "1k9ijv208hsps5qhq2ii2cl8lwik7lpasssfy6m9016irr09b666";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = ["sink" "std"];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["io-util"];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tungstenite";
            packageId = "tungstenite";
            usesDefaultFeatures = false;
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.26.11";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["io-std" "macros" "net" "rt-multi-thread" "time"];
          }
        ];
        features = {
          "__rustls-tls" = ["rustls" "rustls-pki-types" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake"];
          "connect" = ["stream" "tokio/net" "handshake"];
          "default" = ["connect" "handshake"];
          "handshake" = ["tungstenite/handshake"];
          "native-tls" = ["native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake"];
          "native-tls-crate" = ["dep:native-tls-crate"];
          "native-tls-vendored" = ["native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored"];
          "rustls" = ["dep:rustls"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "rustls-pki-types" = ["dep:rustls-pki-types"];
          "rustls-tls-native-roots" = ["__rustls-tls" "rustls-native-certs"];
          "rustls-tls-webpki-roots" = ["__rustls-tls" "webpki-roots"];
          "tokio-native-tls" = ["dep:tokio-native-tls"];
          "tokio-rustls" = ["dep:tokio-rustls"];
          "url" = ["tungstenite/url"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["__rustls-tls" "connect" "default" "handshake" "rustls" "rustls-pki-types" "rustls-tls-webpki-roots" "stream" "tokio-rustls" "url" "webpki-roots"];
      };
      "tokio-util" = rec {
        crateName = "tokio-util";
        version = "0.7.16";
        edition = "2021";
        sha256 = "1r9wdrg1k5hna3m0kc8kcb8jdb6n52g7vnw93kw2xxw4cyc7qc0l";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["sync"];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = ["full"];
          }
        ];
        features = {
          "__docs_rs" = ["futures-util"];
          "compat" = ["futures-io"];
          "full" = ["codec" "compat" "io-util" "time" "net" "rt" "join-map"];
          "futures-io" = ["dep:futures-io"];
          "futures-util" = ["dep:futures-util"];
          "hashbrown" = ["dep:hashbrown"];
          "io-util" = ["io" "tokio/rt" "tokio/io-util"];
          "join-map" = ["rt" "hashbrown"];
          "net" = ["tokio/net"];
          "rt" = ["tokio/rt" "tokio/sync" "futures-util"];
          "slab" = ["dep:slab"];
          "time" = ["tokio/time" "slab"];
          "tracing" = ["dep:tracing"];
        };
        resolvedDefaultFeatures = ["codec" "compat" "default" "futures-io" "futures-util" "io" "io-util" "rt"];
      };
      "tokio-websockets" = rec {
        crateName = "tokio-websockets";
        version = "0.12.0";
        edition = "2021";
        sha256 = "00szc201qv23lnpznvws5yw6apsglss199abhv4yqfxl9q4bla9z";
        libName = "tokio_websockets";
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.9.2";
            optional = true;
            usesDefaultFeatures = false;
            features = ["thread_rng"];
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "simdutf8";
            packageId = "simdutf8";
            usesDefaultFeatures = false;
            features = ["std" "aarch64_neon"];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = ["codec" "io"];
          }
        ];
        devDependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = ["net" "macros" "rt-multi-thread" "time"];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            usesDefaultFeatures = false;
            features = ["ring"];
          }
        ];
        features = {
          "aws_lc_rs" = ["dep:aws-lc-rs"];
          "client" = ["dep:base64" "dep:http" "dep:httparse" "tokio/net" "tokio/io-util"];
          "fastrand" = ["dep:fastrand"];
          "getrandom" = ["dep:getrandom"];
          "native-tls" = ["dep:tokio-native-tls"];
          "nightly" = ["simdutf8/aarch64_neon_prefetch"];
          "openssl" = ["dep:openssl"];
          "rand" = ["dep:rand"];
          "ring" = ["dep:ring"];
          "rustls-bring-your-own-connector" = ["dep:rustls-pki-types" "dep:tokio-rustls"];
          "rustls-native-roots" = ["dep:rustls-pki-types" "dep:tokio-rustls" "dep:rustls-native-certs"];
          "rustls-platform-verifier" = ["dep:rustls-pki-types" "dep:tokio-rustls" "dep:rustls-platform-verifier"];
          "rustls-tls12" = ["tokio-rustls?/tls12"];
          "rustls-webpki-roots" = ["dep:rustls-pki-types" "dep:tokio-rustls" "dep:webpki-roots"];
          "server" = ["dep:base64" "dep:http" "dep:httparse" "tokio/io-util"];
          "sha1_smol" = ["dep:sha1_smol"];
        };
        resolvedDefaultFeatures = ["client" "getrandom" "rand" "ring" "rustls-bring-your-own-connector"];
      };
      "tokio_with_wasm" = rec {
        crateName = "tokio_with_wasm";
        version = "0.8.7";
        edition = "2021";
        sha256 = "1rlpg350s7y3sjn65jg4pyqdyk0765k5gksdavxl16a58swskysd";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio_with_wasm_proc";
            packageId = "tokio_with_wasm_proc";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = ["Worker" "WorkerOptions" "WorkerType" "DedicatedWorkerGlobalScope" "MessageEvent" "ErrorEvent" "Blob" "BlobPropertyBag" "Url"];
          }
        ];
        features = {
          "full" = ["macros" "sync" "time" "rt" "rt-multi-thread"];
          "macros" = ["tokio/macros"];
          "sync" = ["tokio/sync"];
        };
        resolvedDefaultFeatures = ["default" "macros" "rt" "sync" "time"];
      };
      "tokio_with_wasm_proc" = rec {
        crateName = "tokio_with_wasm_proc";
        version = "0.8.7";
        edition = "2021";
        sha256 = "1fxaw9w2iy2ck01vflzyxfzamzbgyywkqqygbjg170f2clc4rq1p";
        procMacro = true;
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = ["dep:indexmap"];
          "preserve_order" = ["indexmap"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.11";
        edition = "2021";
        sha256 = "077ix2hb1dcya49hmi1avalwbixmrs75zgzb3b2i7g2gizwdmk92";
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "toml_edit" = rec {
        crateName = "toml_edit";
        version = "0.22.27";
        edition = "2021";
        sha256 = "16l15xm40404asih8vyjvnka9g0xs9i4hfb6ry3ph9g419k8rzj1";
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = ["std"];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
          }
        ];
        features = {
          "default" = ["parse" "display"];
          "display" = ["dep:toml_write"];
          "parse" = ["dep:winnow"];
          "perf" = ["dep:kstring"];
          "serde" = ["dep:serde" "toml_datetime/serde" "dep:serde_spanned"];
          "unstable-debug" = ["winnow?/debug"];
        };
        resolvedDefaultFeatures = ["parse"];
      };
      "tower" = rec {
        crateName = "tower";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1ybmd59nm4abl9bsvy6rx31m4zvzp5rja2slzpn712y9b68ssffh";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = ["sync"];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = ["macros" "sync" "test-util" "rt-multi-thread"];
          }
        ];
        features = {
          "__common" = ["futures-core" "pin-project-lite"];
          "balance" = ["discover" "load" "ready-cache" "make" "slab" "util"];
          "buffer" = ["__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing"];
          "discover" = ["__common"];
          "filter" = ["__common" "futures-util"];
          "full" = ["balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util"];
          "futures-core" = ["dep:futures-core"];
          "futures-util" = ["dep:futures-util"];
          "hdrhistogram" = ["dep:hdrhistogram"];
          "hedge" = ["util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing"];
          "indexmap" = ["dep:indexmap"];
          "limit" = ["__common" "tokio/time" "tokio/sync" "tokio-util" "tracing"];
          "load" = ["__common" "tokio/time" "tracing"];
          "load-shed" = ["__common"];
          "log" = ["tracing/log"];
          "make" = ["futures-util" "pin-project-lite" "tokio/io-std"];
          "pin-project-lite" = ["dep:pin-project-lite"];
          "ready-cache" = ["futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite"];
          "reconnect" = ["make" "tokio/io-std" "tracing"];
          "retry" = ["__common" "tokio/time" "util"];
          "slab" = ["dep:slab"];
          "spawn-ready" = ["__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing"];
          "sync_wrapper" = ["dep:sync_wrapper"];
          "timeout" = ["pin-project-lite" "tokio/time"];
          "tokio" = ["dep:tokio"];
          "tokio-stream" = ["dep:tokio-stream"];
          "tokio-util" = ["dep:tokio-util"];
          "tracing" = ["dep:tracing"];
          "util" = ["__common" "futures-util" "pin-project-lite" "sync_wrapper"];
        };
        resolvedDefaultFeatures = ["__common" "futures-core" "futures-util" "pin-project-lite" "sync_wrapper" "timeout" "tokio" "util"];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.6.6";
        edition = "2018";
        sha256 = "1wh51y4rf03f91c6rvli6nwzsarx7097yx6sqlm75ag27pbjzj5d";
        libName = "tower_http";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
            optional = true;
          }
          {
            name = "iri-string";
            packageId = "iri-string";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tower";
            packageId = "tower";
            optional = true;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "tower";
            packageId = "tower";
            features = ["buffer" "util" "retry" "make" "timeout"];
          }
        ];
        features = {
          "async-compression" = ["dep:async-compression"];
          "auth" = ["base64" "validate-request"];
          "base64" = ["dep:base64"];
          "catch-panic" = ["tracing" "futures-util/std" "dep:http-body" "dep:http-body-util"];
          "compression-br" = ["async-compression/brotli" "futures-core" "dep:http-body" "tokio-util" "tokio"];
          "compression-deflate" = ["async-compression/zlib" "futures-core" "dep:http-body" "tokio-util" "tokio"];
          "compression-full" = ["compression-br" "compression-deflate" "compression-gzip" "compression-zstd"];
          "compression-gzip" = ["async-compression/gzip" "futures-core" "dep:http-body" "tokio-util" "tokio"];
          "compression-zstd" = ["async-compression/zstd" "futures-core" "dep:http-body" "tokio-util" "tokio"];
          "decompression-br" = ["async-compression/brotli" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio"];
          "decompression-deflate" = ["async-compression/zlib" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio"];
          "decompression-full" = ["decompression-br" "decompression-deflate" "decompression-gzip" "decompression-zstd"];
          "decompression-gzip" = ["async-compression/gzip" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio"];
          "decompression-zstd" = ["async-compression/zstd" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio"];
          "follow-redirect" = ["futures-util" "dep:http-body" "iri-string" "tower/util"];
          "fs" = ["futures-core" "futures-util" "dep:http-body" "dep:http-body-util" "tokio/fs" "tokio-util/io" "tokio/io-util" "dep:http-range-header" "mime_guess" "mime" "percent-encoding" "httpdate" "set-status" "futures-util/alloc" "tracing"];
          "full" = ["add-extension" "auth" "catch-panic" "compression-full" "cors" "decompression-full" "follow-redirect" "fs" "limit" "map-request-body" "map-response-body" "metrics" "normalize-path" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "trace" "util" "validate-request"];
          "futures-core" = ["dep:futures-core"];
          "futures-util" = ["dep:futures-util"];
          "httpdate" = ["dep:httpdate"];
          "iri-string" = ["dep:iri-string"];
          "limit" = ["dep:http-body" "dep:http-body-util"];
          "metrics" = ["dep:http-body" "tokio/time"];
          "mime" = ["dep:mime"];
          "mime_guess" = ["dep:mime_guess"];
          "percent-encoding" = ["dep:percent-encoding"];
          "request-id" = ["uuid"];
          "timeout" = ["dep:http-body" "tokio/time"];
          "tokio" = ["dep:tokio"];
          "tokio-util" = ["dep:tokio-util"];
          "tower" = ["dep:tower"];
          "trace" = ["dep:http-body" "tracing"];
          "tracing" = ["dep:tracing"];
          "util" = ["tower"];
          "uuid" = ["dep:uuid"];
          "validate-request" = ["mime"];
        };
        resolvedDefaultFeatures = ["follow-redirect" "futures-util" "iri-string" "tower"];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.3";
        edition = "2018";
        sha256 = "03kq92fdzxin51w8iqix06dcfgydyvx7yr6izjq0p626v9n2l70j";
        libName = "tower_layer";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.41";
        edition = "2018";
        sha256 = "1l5xrzyjfyayrwhvhldfnwdyligi1mpqm8mzbi2m1d6y6p2hlkkq";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = ["tracing-attributes"];
          "default" = ["std" "attributes"];
          "log" = ["dep:log"];
          "log-always" = ["log"];
          "std" = ["tracing-core/std"];
          "tracing-attributes" = ["dep:tracing-attributes"];
          "valuable" = ["tracing-core/valuable"];
        };
        resolvedDefaultFeatures = ["attributes" "default" "log" "std" "tracing-attributes"];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.30";
        edition = "2018";
        sha256 = "00v9bhfgfg3v101nmmy7s3vdwadb7ngc8c1iw6wai9vj9sv3lf41";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro"];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.34";
        edition = "2018";
        sha256 = "0y3nc4mpnr79rzkrcylv5f5bnjjp19lsxwis9l4kzs97ya0jbldr";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = ["std" "valuable?/std"];
          "once_cell" = ["dep:once_cell"];
          "std" = ["once_cell"];
          "valuable" = ["dep:valuable"];
        };
        resolvedDefaultFeatures = ["default" "once_cell" "std"];
      };
      "tracing-error" = rec {
        crateName = "tracing-error";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1nzk6qcvhmxxy3lw1nj71anmfmvxlnk78l5lym1389vs1l1825cb";
        libName = "tracing_error";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Jane Lusby <jlusby@yaah.dev>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = ["registry" "fmt"];
          }
        ];
        features = {
          "default" = ["traced-error"];
        };
        resolvedDefaultFeatures = ["default" "traced-error"];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        libName = "tracing_log";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = ["dep:ahash"];
          "default" = ["log-tracer" "std"];
          "interest-cache" = ["lru" "ahash"];
          "lru" = ["dep:lru"];
          "std" = ["log/std"];
        };
        resolvedDefaultFeatures = ["log-tracer" "std"];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.19";
        edition = "2018";
        sha256 = "0220rignck8072i89jjsh140vmh14ydwpdwnifyaf3xcnpn9s678";
        libName = "tracing_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std" "unicode-case" "unicode-perl"];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = ["log-tracer" "std"];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = ["fmt" "nu-ansi-term"];
          "chrono" = ["dep:chrono"];
          "default" = ["smallvec" "fmt" "ansi" "tracing-log" "std"];
          "env-filter" = ["matchers" "regex" "once_cell" "tracing" "std" "thread_local"];
          "fmt" = ["registry" "std"];
          "json" = ["tracing-serde" "serde" "serde_json"];
          "local-time" = ["time/local-offset"];
          "matchers" = ["dep:matchers"];
          "nu-ansi-term" = ["dep:nu-ansi-term"];
          "once_cell" = ["dep:once_cell"];
          "parking_lot" = ["dep:parking_lot"];
          "regex" = ["dep:regex"];
          "registry" = ["sharded-slab" "thread_local" "std"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
          "sharded-slab" = ["dep:sharded-slab"];
          "smallvec" = ["dep:smallvec"];
          "std" = ["alloc" "tracing-core/std"];
          "thread_local" = ["dep:thread_local"];
          "time" = ["dep:time"];
          "tracing" = ["dep:tracing"];
          "tracing-log" = ["dep:tracing-log"];
          "tracing-serde" = ["dep:tracing-serde"];
          "valuable" = ["tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable"];
          "valuable-serde" = ["dep:valuable-serde"];
          "valuable_crate" = ["dep:valuable_crate"];
        };
        resolvedDefaultFeatures = ["alloc" "ansi" "default" "env-filter" "fmt" "matchers" "nu-ansi-term" "once_cell" "regex" "registry" "sharded-slab" "smallvec" "std" "thread_local" "tracing" "tracing-log"];
      };
      "trice" = rec {
        crateName = "trice";
        version = "0.4.0";
        edition = "2021";
        sha256 = "0njibc87nlz8674zwdwhyd2hilhgdzsjnxcjyc80pb4zmq8apank";
        authors = [
          "Tobie Morgan Hitchcock <tobie@surrealdb.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = {
              target,
              features,
            }: ("wasm32" == target."arch" or null);
            features = ["Window" "Performance" "PerformanceTiming"];
          }
        ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
      };
      "tungstenite" = rec {
        crateName = "tungstenite";
        version = "0.23.0";
        edition = "2018";
        sha256 = "1j6rxlcdky8lrwkl1qsyvnmlr38033vch11vsi7rklkywkhjqbkf";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes 1.10.1";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = ["std"];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "__rustls-tls" = ["rustls" "rustls-pki-types"];
          "data-encoding" = ["dep:data-encoding"];
          "default" = ["handshake"];
          "handshake" = ["data-encoding" "http" "httparse" "sha1"];
          "http" = ["dep:http"];
          "httparse" = ["dep:httparse"];
          "native-tls" = ["native-tls-crate"];
          "native-tls-crate" = ["dep:native-tls-crate"];
          "native-tls-vendored" = ["native-tls" "native-tls-crate/vendored"];
          "rustls" = ["dep:rustls"];
          "rustls-native-certs" = ["dep:rustls-native-certs"];
          "rustls-pki-types" = ["dep:rustls-pki-types"];
          "rustls-tls-native-roots" = ["__rustls-tls" "rustls-native-certs"];
          "rustls-tls-webpki-roots" = ["__rustls-tls" "webpki-roots"];
          "sha1" = ["dep:sha1"];
          "url" = ["dep:url"];
          "webpki-roots" = ["dep:webpki-roots"];
        };
        resolvedDefaultFeatures = ["__rustls-tls" "data-encoding" "handshake" "http" "httparse" "rustls" "rustls-pki-types" "sha1" "url"];
      };
      "type-map" = rec {
        crateName = "type-map";
        version = "0.5.1";
        edition = "2018";
        sha256 = "143v32wwgpymxfy4y8s694vyq0wdi7li4s5dmms5w59nj2yxnc6b";
        libName = "type_map";
        authors = [
          "Jacob Brown <kardeiz@gmail.com>"
        ];
        dependencies = [
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
        ];
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.18.0";
        edition = "2018";
        sha256 = "0gwgz8n91pv40gabrr1lzji0b0hsmg0817njpy397bq7rvizzk0x";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = ["dep:scale-info"];
          "scale_info" = ["scale-info/derive"];
        };
      };
      "ucd-parse" = rec {
        crateName = "ucd-parse";
        version = "0.1.13";
        edition = "2021";
        sha256 = "1fbryah32sswz34kfi61mvkmhq1kwgvia2v6q7s4vgzw488zhvy0";
        libName = "ucd_parse";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-lite";
            packageId = "regex-lite";
          }
        ];
      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.7";
        edition = "2021";
        sha256 = "0wc9p07sqwz320848i52nvyjvpsxkx3kv5bfbmm6s35809fdk5i8";
        libName = "ucd_trie";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "ulid" = rec {
        crateName = "ulid";
        version = "1.2.1";
        edition = "2018";
        sha256 = "1ghzggz7194hw345idz8afd8g1lw8qmknlhl7ka3j6ysj5jvy3a7";
        authors = [
          "dylanhart <dylan96hart@gmail.com>"
        ];
        dependencies = [
          {
            name = "rand";
            packageId = "rand 0.9.2";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "wasm32-unknown-unknown");
          }
        ];
        features = {
          "default" = ["std"];
          "postgres" = ["dep:postgres-types" "dep:bytes"];
          "rand" = ["dep:rand"];
          "rkyv" = ["dep:rkyv"];
          "serde" = ["dep:serde"];
          "std" = ["rand"];
          "uuid" = ["dep:uuid"];
        };
        resolvedDefaultFeatures = ["default" "rand" "serde" "std"];
      };
      "uncased" = rec {
        crateName = "uncased";
        version = "0.9.10";
        edition = "2018";
        sha256 = "15q6r6g4fszr8c2lzg9z9k9g52h8g29h24awda3d72cyw37qzf71";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = ["alloc"];
          "serde" = ["dep:serde"];
          "with-serde" = ["serde"];
          "with-serde-alloc" = ["serde" "serde/alloc" "alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default"];
      };
      "unic-langid" = rec {
        crateName = "unic-langid";
        version = "0.9.6";
        edition = "2021";
        sha256 = "01bx59sqsx2jz4z7ppxq9kldcjq9dzadkmb2dr7iyc85kcnab2x2";
        libName = "unic_langid";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "unic-langid-impl";
            packageId = "unic-langid-impl";
          }
        ];
        features = {
          "likelysubtags" = ["unic-langid-impl/likelysubtags"];
          "macros" = ["unic-langid-macros"];
          "serde" = ["unic-langid-impl/serde"];
          "unic-langid-macros" = ["dep:unic-langid-macros"];
        };
        resolvedDefaultFeatures = ["default" "serde"];
      };
      "unic-langid-impl" = rec {
        crateName = "unic-langid-impl";
        version = "0.9.6";
        edition = "2021";
        crateBin = [];
        sha256 = "0n66kdan4cz99n8ra18i27f7w136hmppi4wc0aa7ljsd0h4bzqfw";
        libName = "unic_langid_impl";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "binary" = ["serde" "serde_json"];
          "serde" = ["dep:serde"];
          "serde_json" = ["dep:serde_json"];
        };
        resolvedDefaultFeatures = ["serde"];
      };
      "unicase" = rec {
        crateName = "unicase";
        version = "2.8.1";
        edition = "2018";
        sha256 = "0fd5ddbhpva7wrln2iah054ar2pc1drqjcll0f493vj3fv8l9f3m";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
        };
      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.18";
        edition = "2018";
        sha256 = "1xcxwbsqa24b8vfchhzyyzgj0l6bn51ib5v8j6krha0m77dva72w";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = ["std" "hardcoded-data"];
          "flame" = ["dep:flame"];
          "flame_it" = ["flame" "flamer"];
          "flamer" = ["dep:flamer"];
          "serde" = ["dep:serde"];
          "smallvec" = ["dep:smallvec"];
          "with_serde" = ["serde"];
        };
        resolvedDefaultFeatures = ["default" "hardcoded-data" "std"];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.24";
        edition = "2018";
        sha256 = "0mnrk809z3ix1wspcqy97ld5wxdb31f3xz6nsvg5qcv289ycjcsh";
        libName = "unicode_normalization";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = ["alloc"];
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "unicode-properties" = rec {
        crateName = "unicode-properties";
        version = "0.1.3";
        edition = "2021";
        sha256 = "1l3mbgzwz8g14xcs09p4ww3hjkjcf0i1ih13nsg72bhj8n5jl3z7";
        libName = "unicode_properties";
        authors = [
          "Charles Lew <crlf0710@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "default" = ["general-category" "emoji"];
        };
        resolvedDefaultFeatures = ["default" "emoji" "general-category"];
      };
      "unicode-script" = rec {
        crateName = "unicode-script";
        version = "0.5.7";
        edition = "2018";
        sha256 = "07vwr9iddw5xwrj57hc6ig0mwmlzjdajj9lyfxqz9by9a2rj3d4z";
        libName = "unicode_script";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["std" "core" "compiler_builtins"];
          "std" = ["dep:std"];
        };
      };
      "unicode-security" = rec {
        crateName = "unicode-security";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0l2yidnwc7g791pyqz44p3jg9msmf5miclhwnvc5xlsxafhxnk9f";
        libName = "unicode_security";
        authors = [
          "Charles Lew <crlf0710@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-script";
            packageId = "unicode-script";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "rustc-dep-of-std" = ["std" "core" "compiler_builtins"];
          "std" = ["dep:std"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.14";
        edition = "2021";
        sha256 = "1bzn2zv0gp8xxbxbhifw778a7fc93pa6a1kj24jgg9msj07f7mkx";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["cjk"];
          "rustc-dep-of-std" = ["std" "core" "compiler_builtins"];
          "std" = ["dep:std"];
        };
        resolvedDefaultFeatures = ["cjk" "default"];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.6";
        edition = "2015";
        sha256 = "0lzqaky89fq0bcrh6jj6bhlz37scfd8c7dsj5dq7y32if56c1hgb";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "universal-hash" = rec {
        crateName = "universal-hash";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1sh79x677zkncasa95wz05b36134822w6qxmi1ck05fwi33f47gw";
        libName = "universal_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = ["crypto-common/std"];
        };
      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];
      };
      "url" = rec {
        crateName = "url";
        version = "2.5.4";
        edition = "2018";
        sha256 = "0q6sgznyy2n4l5lm16zahkisvc9nip9aa5q1pps7656xra3bdy1j";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "idna";
            packageId = "idna";
            usesDefaultFeatures = false;
            features = ["alloc" "compiled_data"];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
            features = ["alloc"];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = ["derive"];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = ["derive"];
          }
        ];
        features = {
          "default" = ["std"];
          "serde" = ["dep:serde"];
          "std" = ["idna/std" "percent-encoding/std" "form_urlencoded/std"];
        };
        resolvedDefaultFeatures = ["default" "serde" "std"];
      };
      "urlencoding" = rec {
        crateName = "urlencoding";
        version = "2.1.3";
        edition = "2021";
        sha256 = "1nj99jp37k47n0hvaz5fvz7z6jd0sb4ppvfy3nphr1zbnyixpy6s";
        authors = [
          "Kornel <kornel@geekhood.net>"
          "Bertram Truong <b@bertramtruong.com>"
        ];
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];
      };
      "utf8_iter" = rec {
        crateName = "utf8_iter";
        version = "1.0.4";
        edition = "2021";
        sha256 = "1gmna9flnj8dbyd8ba17zigrp9c4c3zclngf5lnb5yvz1ri41hdn";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = ["default"];
      };
      "uuid" = rec {
        crateName = "uuid";
        version = "1.18.0";
        edition = "2018";
        sha256 = "1gn1vlggiwrdpizqcpc5hyxsqz9s5215bbay1b182mqn7rj9ccgk";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
            target = {
              target,
              features,
            }: (!(("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null))));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)) && (builtins.elem "atomics" targetFeatures));
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
            features = ["msrv"];
          }
        ];
        devDependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
          }
        ];
        features = {
          "arbitrary" = ["dep:arbitrary"];
          "atomic" = ["dep:atomic"];
          "borsh" = ["dep:borsh" "dep:borsh-derive"];
          "bytemuck" = ["dep:bytemuck"];
          "default" = ["std"];
          "fast-rng" = ["rng" "dep:rand"];
          "js" = ["dep:wasm-bindgen" "dep:js-sys"];
          "macro-diagnostics" = ["dep:uuid-macro-internal"];
          "md5" = ["dep:md-5"];
          "rng" = ["dep:getrandom"];
          "rng-getrandom" = ["rng" "dep:getrandom" "uuid-rng-internal-lib" "uuid-rng-internal-lib/getrandom"];
          "rng-rand" = ["rng" "dep:rand" "uuid-rng-internal-lib" "uuid-rng-internal-lib/rand"];
          "serde" = ["dep:serde"];
          "sha1" = ["dep:sha1_smol"];
          "slog" = ["dep:slog"];
          "std" = ["wasm-bindgen?/std" "js-sys?/std"];
          "uuid-rng-internal-lib" = ["dep:uuid-rng-internal-lib"];
          "v1" = ["atomic"];
          "v3" = ["md5"];
          "v4" = ["rng"];
          "v5" = ["sha1"];
          "v6" = ["atomic"];
          "v7" = ["rng"];
          "zerocopy" = ["dep:zerocopy"];
        };
        resolvedDefaultFeatures = ["default" "js" "rng" "serde" "std" "v4" "v7"];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0r9srp55v7g27s5bg7a2m095fzckrcdca5maih6dy9bay6fflwxs";
        features = {
          "default" = ["std"];
          "derive" = ["valuable-derive"];
          "std" = ["alloc"];
          "valuable-derive" = ["dep:valuable-derive"];
        };
        resolvedDefaultFeatures = ["alloc" "std"];
      };
      "vart 0.8.1" = rec {
        crateName = "vart";
        version = "0.8.1";
        edition = "2021";
        sha256 = "1bmv9laa3cvi1khflixx1gamh3fy72xzl3iwx6b965wqz1s2ny47";
      };
      "vart 0.9.3" = rec {
        crateName = "vart";
        version = "0.9.3";
        edition = "2021";
        sha256 = "1bjmnnszh34kgxlasxh6d3lg2k12x4b5ywq9hx4ldmjpks4jv65i";
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = {
              target,
              features,
            }: (target."windows" or false);
          }
        ];
      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];
      };
      "wasi 0.11.1+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.1+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "0jx49r7nbkbhyfrfyhz0bm4817yrnxgd3jiwwwfv0zl439jyrwyc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["core" "rustc-std-workspace-alloc"];
          "rustc-std-workspace-alloc" = ["dep:rustc-std-workspace-alloc"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "wasi 0.14.2+wasi-0.2.4" = rec {
        crateName = "wasi";
        version = "0.14.2+wasi-0.2.4";
        edition = "2021";
        sha256 = "1cwcqjr3dgdq8j325awgk8a715h0hg0f7jqzsb077n4qm6jzk0wn";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "wit-bindgen-rt";
            packageId = "wit-bindgen-rt";
            features = ["bitflags"];
          }
        ];
        features = {
          "compiler_builtins" = ["dep:compiler_builtins"];
          "core" = ["dep:core"];
          "default" = ["std"];
          "rustc-dep-of-std" = ["compiler_builtins" "core" "rustc-std-workspace-alloc"];
          "rustc-std-workspace-alloc" = ["dep:rustc-std-workspace-alloc"];
        };
      };
      "wasite" = rec {
        crateName = "wasite";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0nw5h9nmcl4fyf4j5d4mfdjfgvwi1cakpi349wc4zrr59wxxinmq";
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1x8ymcm6yi3i1rwj78myl1agqv2m86i648myy3lc97s9swlqkp0y";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            optional = true;
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = ["std" "msrv"];
          "enable-interning" = ["std"];
          "msrv" = ["rustversion"];
          "rustversion" = ["dep:rustversion"];
          "serde" = ["dep:serde"];
          "serde-serialize" = ["serde" "serde_json" "std"];
          "serde_json" = ["dep:serde_json"];
          "strict-macro" = ["wasm-bindgen-macro/strict-macro"];
          "xxx_debug_only_print_generated_code" = ["wasm-bindgen-macro/xxx_debug_only_print_generated_code"];
        };
        resolvedDefaultFeatures = ["default" "msrv" "rustversion" "std"];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1ihbf1hq3y81c4md9lyh6lcwbx6a5j0fw4fygd423g62lm8hc2ig";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = ["syn/extra-traits"];
        };
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.50";
        edition = "2021";
        sha256 = "0q8ymi6i9r3vxly551dhxcyai7nc491mspj0j1wbafxwq074fpam";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (builtins.elem "atomics" targetFeatures);
            features = ["MessageEvent" "Worker"];
          }
        ];
        features = {
          "default" = ["std"];
          "futures-core" = ["dep:futures-core"];
          "futures-core-03-stream" = ["futures-core"];
          "std" = ["wasm-bindgen/std" "js-sys/std" "web-sys/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.100";
        edition = "2021";
        sha256 = "01xls2dvzh38yj17jgrbiib1d3nyad7k2yw9s0mpklwys333zrkz";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "strict-macro" = ["wasm-bindgen-macro-support/strict-macro"];
        };
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1plm8dh20jg2id0320pbmrlsv6cazfv6b6907z19ys4z1jj7xs4a";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["visit" "visit-mut" "full"];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = ["syn/extra-traits"];
        };
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.100";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "0gffxvqgbh9r9xl36gprkfnh3w9gl8wgia6xrin7v11sjcxxf18s";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
      };
      "wasm-streams" = rec {
        crateName = "wasm-streams";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0rddn007hp6k2cm91mm9y33n79b0jxv0c3znzszcvv67hn6ks18m";
        libName = "wasm_streams";
        type = ["cdylib" "rlib"];
        authors = [
          "Mattias Buelens <mattias@buelens.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            features = ["io" "sink"];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = ["AbortSignal" "QueuingStrategy" "ReadableStream" "ReadableStreamType" "ReadableWritablePair" "ReadableStreamByobReader" "ReadableStreamReaderMode" "ReadableStreamReadResult" "ReadableStreamByobRequest" "ReadableStreamDefaultReader" "ReadableByteStreamController" "ReadableStreamGetReaderOptions" "ReadableStreamDefaultController" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter"];
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            features = ["console" "AbortSignal" "ErrorEvent" "PromiseRejectionEvent" "Response" "ReadableStream" "Window"];
          }
        ];
      };
      "wasmtimer" = rec {
        crateName = "wasmtimer";
        version = "0.2.1";
        edition = "2021";
        sha256 = "1vl0dxzr7xbnycrak4yd6f9h5lpkfsibbd5zf96mkyy72n5rvvf7";
        authors = [
          "WhizSid <whizsid@aol.com>"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
            optional = true;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "default" = ["tokio" "tokio-util"];
          "futures" = ["dep:futures"];
          "parking_lot" = ["dep:parking_lot"];
          "pin-utils" = ["dep:pin-utils"];
          "serde" = ["serde_crate"];
          "serde_crate" = ["dep:serde_crate"];
          "slab" = ["dep:slab"];
          "tokio" = ["futures" "parking_lot" "pin-utils"];
          "tokio-test-util" = ["tokio"];
          "tokio-util" = ["slab" "tokio"];
        };
        resolvedDefaultFeatures = ["futures" "parking_lot" "pin-utils" "tokio"];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "1lnmc1ffbq34qw91nndklqqm75rasaffj2g4f8h1yvqqz4pdvdik";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "AbortSignal" = ["EventTarget"];
          "AnalyserNode" = ["AudioNode" "EventTarget"];
          "Animation" = ["EventTarget"];
          "AnimationEvent" = ["Event"];
          "AnimationPlaybackEvent" = ["Event"];
          "Attr" = ["EventTarget" "Node"];
          "AudioBufferSourceNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "AudioContext" = ["BaseAudioContext" "EventTarget"];
          "AudioDestinationNode" = ["AudioNode" "EventTarget"];
          "AudioNode" = ["EventTarget"];
          "AudioProcessingEvent" = ["Event"];
          "AudioScheduledSourceNode" = ["AudioNode" "EventTarget"];
          "AudioStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "AudioTrackList" = ["EventTarget"];
          "AudioWorklet" = ["Worklet"];
          "AudioWorkletGlobalScope" = ["WorkletGlobalScope"];
          "AudioWorkletNode" = ["AudioNode" "EventTarget"];
          "AuthenticatorAssertionResponse" = ["AuthenticatorResponse"];
          "AuthenticatorAttestationResponse" = ["AuthenticatorResponse"];
          "BaseAudioContext" = ["EventTarget"];
          "BatteryManager" = ["EventTarget"];
          "BeforeUnloadEvent" = ["Event"];
          "BiquadFilterNode" = ["AudioNode" "EventTarget"];
          "BlobEvent" = ["Event"];
          "Bluetooth" = ["EventTarget"];
          "BluetoothAdvertisingEvent" = ["Event"];
          "BluetoothDevice" = ["EventTarget"];
          "BluetoothPermissionResult" = ["EventTarget" "PermissionStatus"];
          "BluetoothRemoteGattCharacteristic" = ["EventTarget"];
          "BluetoothRemoteGattService" = ["EventTarget"];
          "BroadcastChannel" = ["EventTarget"];
          "CanvasCaptureMediaStream" = ["EventTarget" "MediaStream"];
          "CanvasCaptureMediaStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "CdataSection" = ["CharacterData" "EventTarget" "Node" "Text"];
          "ChannelMergerNode" = ["AudioNode" "EventTarget"];
          "ChannelSplitterNode" = ["AudioNode" "EventTarget"];
          "CharacterData" = ["EventTarget" "Node"];
          "ChromeWorker" = ["EventTarget" "Worker"];
          "Clipboard" = ["EventTarget"];
          "ClipboardEvent" = ["Event"];
          "CloseEvent" = ["Event"];
          "Comment" = ["CharacterData" "EventTarget" "Node"];
          "CompositionEvent" = ["Event" "UiEvent"];
          "ConstantSourceNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "ConvolverNode" = ["AudioNode" "EventTarget"];
          "CssAnimation" = ["Animation" "EventTarget"];
          "CssConditionRule" = ["CssGroupingRule" "CssRule"];
          "CssCounterStyleRule" = ["CssRule"];
          "CssFontFaceRule" = ["CssRule"];
          "CssFontFeatureValuesRule" = ["CssRule"];
          "CssGroupingRule" = ["CssRule"];
          "CssImportRule" = ["CssRule"];
          "CssKeyframeRule" = ["CssRule"];
          "CssKeyframesRule" = ["CssRule"];
          "CssMediaRule" = ["CssConditionRule" "CssGroupingRule" "CssRule"];
          "CssNamespaceRule" = ["CssRule"];
          "CssPageRule" = ["CssRule"];
          "CssStyleRule" = ["CssRule"];
          "CssStyleSheet" = ["StyleSheet"];
          "CssSupportsRule" = ["CssConditionRule" "CssGroupingRule" "CssRule"];
          "CssTransition" = ["Animation" "EventTarget"];
          "CustomEvent" = ["Event"];
          "DedicatedWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "DelayNode" = ["AudioNode" "EventTarget"];
          "DeviceLightEvent" = ["Event"];
          "DeviceMotionEvent" = ["Event"];
          "DeviceOrientationEvent" = ["Event"];
          "DeviceProximityEvent" = ["Event"];
          "Document" = ["EventTarget" "Node"];
          "DocumentFragment" = ["EventTarget" "Node"];
          "DocumentTimeline" = ["AnimationTimeline"];
          "DocumentType" = ["EventTarget" "Node"];
          "DomMatrix" = ["DomMatrixReadOnly"];
          "DomPoint" = ["DomPointReadOnly"];
          "DomRect" = ["DomRectReadOnly"];
          "DomRequest" = ["EventTarget"];
          "DragEvent" = ["Event" "MouseEvent" "UiEvent"];
          "DynamicsCompressorNode" = ["AudioNode" "EventTarget"];
          "Element" = ["EventTarget" "Node"];
          "ErrorEvent" = ["Event"];
          "EventSource" = ["EventTarget"];
          "ExtendableEvent" = ["Event"];
          "ExtendableMessageEvent" = ["Event" "ExtendableEvent"];
          "FetchEvent" = ["Event" "ExtendableEvent"];
          "FetchObserver" = ["EventTarget"];
          "File" = ["Blob"];
          "FileReader" = ["EventTarget"];
          "FileSystemDirectoryEntry" = ["FileSystemEntry"];
          "FileSystemDirectoryHandle" = ["FileSystemHandle"];
          "FileSystemFileEntry" = ["FileSystemEntry"];
          "FileSystemFileHandle" = ["FileSystemHandle"];
          "FileSystemWritableFileStream" = ["WritableStream"];
          "FocusEvent" = ["Event" "UiEvent"];
          "FontFaceSet" = ["EventTarget"];
          "FontFaceSetLoadEvent" = ["Event"];
          "GainNode" = ["AudioNode" "EventTarget"];
          "GamepadEvent" = ["Event"];
          "GpuDevice" = ["EventTarget"];
          "GpuInternalError" = ["GpuError"];
          "GpuOutOfMemoryError" = ["GpuError"];
          "GpuPipelineError" = ["DomException"];
          "GpuUncapturedErrorEvent" = ["Event"];
          "GpuValidationError" = ["GpuError"];
          "HashChangeEvent" = ["Event"];
          "Hid" = ["EventTarget"];
          "HidConnectionEvent" = ["Event"];
          "HidDevice" = ["EventTarget"];
          "HidInputReportEvent" = ["Event"];
          "HtmlAnchorElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlAreaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlAudioElement" = ["Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node"];
          "HtmlBaseElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlBodyElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlBrElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlButtonElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlCanvasElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDataElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDataListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDetailsElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDialogElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDirectoryElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDivElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlDocument" = ["Document" "EventTarget" "Node"];
          "HtmlElement" = ["Element" "EventTarget" "Node"];
          "HtmlEmbedElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFieldSetElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFontElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFormControlsCollection" = ["HtmlCollection"];
          "HtmlFormElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFrameElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlFrameSetElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHeadElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHeadingElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHrElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlHtmlElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlIFrameElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlImageElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlInputElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLabelElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLegendElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLiElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlLinkElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMapElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMediaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMenuElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMenuItemElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMetaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlMeterElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlModElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlObjectElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptGroupElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlOptionsCollection" = ["HtmlCollection"];
          "HtmlOutputElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlParagraphElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlParamElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlPictureElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlPreElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlProgressElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlQuoteElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlScriptElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSelectElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSlotElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSourceElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlSpanElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlStyleElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableCaptionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableCellElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableColElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableRowElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTableSectionElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTemplateElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTextAreaElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTimeElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTitleElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlTrackElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlUListElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlUnknownElement" = ["Element" "EventTarget" "HtmlElement" "Node"];
          "HtmlVideoElement" = ["Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node"];
          "IdbCursorWithValue" = ["IdbCursor"];
          "IdbDatabase" = ["EventTarget"];
          "IdbFileHandle" = ["EventTarget"];
          "IdbFileRequest" = ["DomRequest" "EventTarget"];
          "IdbLocaleAwareKeyRange" = ["IdbKeyRange"];
          "IdbMutableFile" = ["EventTarget"];
          "IdbOpenDbRequest" = ["EventTarget" "IdbRequest"];
          "IdbRequest" = ["EventTarget"];
          "IdbTransaction" = ["EventTarget"];
          "IdbVersionChangeEvent" = ["Event"];
          "IirFilterNode" = ["AudioNode" "EventTarget"];
          "ImageCaptureErrorEvent" = ["Event"];
          "ImageTrack" = ["EventTarget"];
          "InputDeviceInfo" = ["MediaDeviceInfo"];
          "InputEvent" = ["Event" "UiEvent"];
          "KeyFrameRequestEvent" = ["Event"];
          "KeyboardEvent" = ["Event" "UiEvent"];
          "KeyframeEffect" = ["AnimationEffect"];
          "LocalMediaStream" = ["EventTarget" "MediaStream"];
          "MathMlElement" = ["Element" "EventTarget" "Node"];
          "MediaDevices" = ["EventTarget"];
          "MediaElementAudioSourceNode" = ["AudioNode" "EventTarget"];
          "MediaEncryptedEvent" = ["Event"];
          "MediaKeyError" = ["Event"];
          "MediaKeyMessageEvent" = ["Event"];
          "MediaKeySession" = ["EventTarget"];
          "MediaQueryList" = ["EventTarget"];
          "MediaQueryListEvent" = ["Event"];
          "MediaRecorder" = ["EventTarget"];
          "MediaRecorderErrorEvent" = ["Event"];
          "MediaSource" = ["EventTarget"];
          "MediaStream" = ["EventTarget"];
          "MediaStreamAudioDestinationNode" = ["AudioNode" "EventTarget"];
          "MediaStreamAudioSourceNode" = ["AudioNode" "EventTarget"];
          "MediaStreamEvent" = ["Event"];
          "MediaStreamTrack" = ["EventTarget"];
          "MediaStreamTrackEvent" = ["Event"];
          "MediaStreamTrackGenerator" = ["EventTarget" "MediaStreamTrack"];
          "MessageEvent" = ["Event"];
          "MessagePort" = ["EventTarget"];
          "MidiAccess" = ["EventTarget"];
          "MidiConnectionEvent" = ["Event"];
          "MidiInput" = ["EventTarget" "MidiPort"];
          "MidiMessageEvent" = ["Event"];
          "MidiOutput" = ["EventTarget" "MidiPort"];
          "MidiPort" = ["EventTarget"];
          "MouseEvent" = ["Event" "UiEvent"];
          "MouseScrollEvent" = ["Event" "MouseEvent" "UiEvent"];
          "MutationEvent" = ["Event"];
          "NetworkInformation" = ["EventTarget"];
          "Node" = ["EventTarget"];
          "Notification" = ["EventTarget"];
          "NotificationEvent" = ["Event" "ExtendableEvent"];
          "OfflineAudioCompletionEvent" = ["Event"];
          "OfflineAudioContext" = ["BaseAudioContext" "EventTarget"];
          "OfflineResourceList" = ["EventTarget"];
          "OffscreenCanvas" = ["EventTarget"];
          "OscillatorNode" = ["AudioNode" "AudioScheduledSourceNode" "EventTarget"];
          "PageTransitionEvent" = ["Event"];
          "PaintWorkletGlobalScope" = ["WorkletGlobalScope"];
          "PannerNode" = ["AudioNode" "EventTarget"];
          "PaymentMethodChangeEvent" = ["Event" "PaymentRequestUpdateEvent"];
          "PaymentRequestUpdateEvent" = ["Event"];
          "Performance" = ["EventTarget"];
          "PerformanceMark" = ["PerformanceEntry"];
          "PerformanceMeasure" = ["PerformanceEntry"];
          "PerformanceNavigationTiming" = ["PerformanceEntry" "PerformanceResourceTiming"];
          "PerformanceResourceTiming" = ["PerformanceEntry"];
          "PermissionStatus" = ["EventTarget"];
          "PointerEvent" = ["Event" "MouseEvent" "UiEvent"];
          "PopStateEvent" = ["Event"];
          "PopupBlockedEvent" = ["Event"];
          "PresentationAvailability" = ["EventTarget"];
          "PresentationConnection" = ["EventTarget"];
          "PresentationConnectionAvailableEvent" = ["Event"];
          "PresentationConnectionCloseEvent" = ["Event"];
          "PresentationConnectionList" = ["EventTarget"];
          "PresentationRequest" = ["EventTarget"];
          "ProcessingInstruction" = ["CharacterData" "EventTarget" "Node"];
          "ProgressEvent" = ["Event"];
          "PromiseRejectionEvent" = ["Event"];
          "PublicKeyCredential" = ["Credential"];
          "PushEvent" = ["Event" "ExtendableEvent"];
          "RadioNodeList" = ["NodeList"];
          "RtcDataChannel" = ["EventTarget"];
          "RtcDataChannelEvent" = ["Event"];
          "RtcPeerConnection" = ["EventTarget"];
          "RtcPeerConnectionIceErrorEvent" = ["Event"];
          "RtcPeerConnectionIceEvent" = ["Event"];
          "RtcRtpScriptTransformer" = ["EventTarget"];
          "RtcTrackEvent" = ["Event"];
          "RtcTransformEvent" = ["Event"];
          "RtcdtmfSender" = ["EventTarget"];
          "RtcdtmfToneChangeEvent" = ["Event"];
          "SFrameTransform" = ["EventTarget"];
          "SFrameTransformErrorEvent" = ["Event"];
          "Screen" = ["EventTarget"];
          "ScreenOrientation" = ["EventTarget"];
          "ScriptProcessorNode" = ["AudioNode" "EventTarget"];
          "ScrollAreaEvent" = ["Event" "UiEvent"];
          "SecurityPolicyViolationEvent" = ["Event"];
          "Serial" = ["EventTarget"];
          "SerialPort" = ["EventTarget"];
          "ServiceWorker" = ["EventTarget"];
          "ServiceWorkerContainer" = ["EventTarget"];
          "ServiceWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "ServiceWorkerRegistration" = ["EventTarget"];
          "ShadowRoot" = ["DocumentFragment" "EventTarget" "Node"];
          "SharedWorker" = ["EventTarget"];
          "SharedWorkerGlobalScope" = ["EventTarget" "WorkerGlobalScope"];
          "SourceBuffer" = ["EventTarget"];
          "SourceBufferList" = ["EventTarget"];
          "SpeechRecognition" = ["EventTarget"];
          "SpeechRecognitionError" = ["Event"];
          "SpeechRecognitionEvent" = ["Event"];
          "SpeechSynthesis" = ["EventTarget"];
          "SpeechSynthesisErrorEvent" = ["Event" "SpeechSynthesisEvent"];
          "SpeechSynthesisEvent" = ["Event"];
          "SpeechSynthesisUtterance" = ["EventTarget"];
          "StereoPannerNode" = ["AudioNode" "EventTarget"];
          "StorageEvent" = ["Event"];
          "SubmitEvent" = ["Event"];
          "SvgAnimateElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimateMotionElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimateTransformElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgAnimationElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgCircleElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgClipPathElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgComponentTransferFunctionElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgDefsElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgDescElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgElement" = ["Element" "EventTarget" "Node"];
          "SvgEllipseElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgFilterElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgForeignObjectElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgGeometryElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgGradientElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgGraphicsElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgImageElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgLineElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgLinearGradientElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement"];
          "SvgMarkerElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgMaskElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgMetadataElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgPathElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgPathSegArcAbs" = ["SvgPathSeg"];
          "SvgPathSegArcRel" = ["SvgPathSeg"];
          "SvgPathSegClosePath" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicSmoothAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoCubicSmoothRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticRel" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = ["SvgPathSeg"];
          "SvgPathSegCurvetoQuadraticSmoothRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoHorizontalAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoHorizontalRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoRel" = ["SvgPathSeg"];
          "SvgPathSegLinetoVerticalAbs" = ["SvgPathSeg"];
          "SvgPathSegLinetoVerticalRel" = ["SvgPathSeg"];
          "SvgPathSegMovetoAbs" = ["SvgPathSeg"];
          "SvgPathSegMovetoRel" = ["SvgPathSeg"];
          "SvgPatternElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgPolygonElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgPolylineElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgRadialGradientElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement"];
          "SvgRectElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement"];
          "SvgScriptElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgSetElement" = ["Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement"];
          "SvgStopElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgStyleElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgSwitchElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgSymbolElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgTextContentElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgTextElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement"];
          "SvgTextPathElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement"];
          "SvgTextPositioningElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement"];
          "SvgTitleElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgUseElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgViewElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgaElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgfeBlendElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeColorMatrixElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeComponentTransferElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeCompositeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeConvolveMatrixElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDiffuseLightingElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDisplacementMapElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDistantLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeDropShadowElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeFloodElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeFuncAElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncBElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncGElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeFuncRElement" = ["Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement"];
          "SvgfeGaussianBlurElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeImageElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMergeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMergeNodeElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeMorphologyElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeOffsetElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfePointLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeSpecularLightingElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeSpotLightElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeTileElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgfeTurbulenceElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvggElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgmPathElement" = ["Element" "EventTarget" "Node" "SvgElement"];
          "SvgsvgElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement"];
          "SvgtSpanElement" = ["Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement"];
          "TaskController" = ["AbortController"];
          "TaskPriorityChangeEvent" = ["Event"];
          "TaskSignal" = ["AbortSignal" "EventTarget"];
          "TcpServerSocket" = ["EventTarget"];
          "TcpServerSocketEvent" = ["Event"];
          "TcpSocket" = ["EventTarget"];
          "TcpSocketErrorEvent" = ["Event"];
          "TcpSocketEvent" = ["Event"];
          "Text" = ["CharacterData" "EventTarget" "Node"];
          "TextTrack" = ["EventTarget"];
          "TextTrackCue" = ["EventTarget"];
          "TextTrackList" = ["EventTarget"];
          "TimeEvent" = ["Event"];
          "ToggleEvent" = ["Event"];
          "TouchEvent" = ["Event" "UiEvent"];
          "TrackEvent" = ["Event"];
          "TransitionEvent" = ["Event"];
          "UiEvent" = ["Event"];
          "Usb" = ["EventTarget"];
          "UsbConnectionEvent" = ["Event"];
          "UsbPermissionResult" = ["EventTarget" "PermissionStatus"];
          "UserProximityEvent" = ["Event"];
          "ValueEvent" = ["Event"];
          "VideoStreamTrack" = ["EventTarget" "MediaStreamTrack"];
          "VideoTrackList" = ["EventTarget"];
          "VisualViewport" = ["EventTarget"];
          "VrDisplay" = ["EventTarget"];
          "VttCue" = ["EventTarget" "TextTrackCue"];
          "WakeLockSentinel" = ["EventTarget"];
          "WaveShaperNode" = ["AudioNode" "EventTarget"];
          "WebGlContextEvent" = ["Event"];
          "WebKitCssMatrix" = ["DomMatrix" "DomMatrixReadOnly"];
          "WebSocket" = ["EventTarget"];
          "WebTransportError" = ["DomException"];
          "WebTransportReceiveStream" = ["ReadableStream"];
          "WebTransportSendStream" = ["WritableStream"];
          "WheelEvent" = ["Event" "MouseEvent" "UiEvent"];
          "Window" = ["EventTarget"];
          "WindowClient" = ["Client"];
          "Worker" = ["EventTarget"];
          "WorkerDebuggerGlobalScope" = ["EventTarget"];
          "WorkerGlobalScope" = ["EventTarget"];
          "XmlDocument" = ["Document" "EventTarget" "Node"];
          "XmlHttpRequest" = ["EventTarget" "XmlHttpRequestEventTarget"];
          "XmlHttpRequestEventTarget" = ["EventTarget"];
          "XmlHttpRequestUpload" = ["EventTarget" "XmlHttpRequestEventTarget"];
          "XrBoundedReferenceSpace" = ["EventTarget" "XrReferenceSpace" "XrSpace"];
          "XrInputSourceEvent" = ["Event"];
          "XrInputSourcesChangeEvent" = ["Event"];
          "XrJointPose" = ["XrPose"];
          "XrJointSpace" = ["EventTarget" "XrSpace"];
          "XrLayer" = ["EventTarget"];
          "XrPermissionStatus" = ["EventTarget" "PermissionStatus"];
          "XrReferenceSpace" = ["EventTarget" "XrSpace"];
          "XrReferenceSpaceEvent" = ["Event"];
          "XrSession" = ["EventTarget"];
          "XrSessionEvent" = ["Event"];
          "XrSpace" = ["EventTarget"];
          "XrSystem" = ["EventTarget"];
          "XrViewerPose" = ["XrPose"];
          "XrWebGlLayer" = ["EventTarget" "XrLayer"];
          "default" = ["std"];
          "std" = ["wasm-bindgen/std" "js-sys/std"];
        };
        resolvedDefaultFeatures = ["AbortController" "AbortSignal" "BinaryType" "Blob" "BlobPropertyBag" "CloseEvent" "DedicatedWorkerGlobalScope" "DomException" "ErrorEvent" "Event" "EventListener" "EventTarget" "File" "FormData" "Headers" "MessageEvent" "Performance" "PerformanceTiming" "QueuingStrategy" "ReadableByteStreamController" "ReadableStream" "ReadableStreamByobReader" "ReadableStreamByobRequest" "ReadableStreamDefaultController" "ReadableStreamDefaultReader" "ReadableStreamGetReaderOptions" "ReadableStreamReadResult" "ReadableStreamReaderMode" "ReadableStreamType" "ReadableWritablePair" "Request" "RequestCredentials" "RequestInit" "RequestMode" "Response" "ServiceWorkerGlobalScope" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "Url" "WebSocket" "Window" "Worker" "WorkerGlobalScope" "WorkerOptions" "WorkerType" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter" "console" "default" "std"];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1fx05yqx83dhx628wb70fyy10yjfq1jpl20qfqhdkymi13rq0ras";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "web_atoms" = rec {
        crateName = "web_atoms";
        version = "0.1.3";
        edition = "2021";
        sha256 = "056lg00xm67d2yiyi1fh3x15jpi3idk0acifk7wvsh0jq0fxxzsp";
        libPath = "lib.rs";
        authors = [
          "The html5ever Project Developers"
        ];
        dependencies = [
          {
            name = "phf";
            packageId = "phf";
          }
          {
            name = "string_cache";
            packageId = "string_cache";
          }
        ];
        buildDependencies = [
          {
            name = "phf_codegen";
            packageId = "phf_codegen";
          }
          {
            name = "string_cache_codegen";
            packageId = "string_cache_codegen";
          }
        ];
      };
      "webpki-roots 0.26.11" = rec {
        crateName = "webpki-roots";
        version = "0.26.11";
        edition = "2021";
        sha256 = "1agpayg5zzf7m1a01q30jahlgmn5nwggbabdhq0in008pf5c66sj";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.2";
            rename = "parent";
          }
        ];
      };
      "webpki-roots 1.0.2" = rec {
        crateName = "webpki-roots";
        version = "1.0.2";
        edition = "2021";
        sha256 = "1ck1wa1prinrvz3q34c3xp4cpa2f3i4x5npwgj0gpmikmg1q72by";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];
      };
      "whoami" = rec {
        crateName = "whoami";
        version = "1.6.1";
        edition = "2018";
        sha256 = "0zg9sz669vhqyxysn4lymnianj29jxs2vl6k2lqcl0kp0yslsjjx";
        dependencies = [
          {
            name = "libredox";
            packageId = "libredox";
            target = {
              target,
              features,
            }: (("redox" == target."os" or null) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "wasite";
            packageId = "wasite";
            target = {
              target,
              features,
            }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = ["web"];
          "web" = ["web-sys"];
          "web-sys" = ["dep:web-sys"];
        };
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "1.2.0";
        edition = "2021";
        sha256 = "0zg04qvpk2xysbbwhdgyilgn4p9igvyj9fhzl7pckam1khvz6z6x";
        features = {
          "debugger_visualizer" = ["alloc"];
          "default" = ["std"];
          "std" = ["alloc"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "wildmatch" = rec {
        crateName = "wildmatch";
        version = "2.4.0";
        edition = "2018";
        sha256 = "1zbi3q4djhlli496mg45sfacy1g5c6f5h3rmw7mma9n6z2qimkk8";
        authors = [
          "Armin Becher <armin.becher@gmail.com>"
        ];
        features = {
          "serde" = ["dep:serde"];
        };
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = ["impl-debug"];
        };
        resolvedDefaultFeatures = ["basetsd" "cfg" "consoleapi" "dbghelp" "errhandlingapi" "evntrace" "fileapi" "handleapi" "in6addr" "inaddr" "knownfolders" "libloaderapi" "minwinbase" "minwindef" "ntsecapi" "objbase" "processenv" "processthreadsapi" "shlobj" "winbase" "wincon" "windef" "winerror" "winioctl" "winnt"];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = {
              target,
              features,
            }: (target."windows" or false);
            features = ["Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation"];
          }
        ];
      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
      };
      "windows 0.57.0" = rec {
        crateName = "windows";
        version = "0.57.0";
        edition = "2021";
        sha256 = "0hqid10bqvxa3pbpgvrh2cilf950lxsd9zqfv3rldc73v2s2qd0j";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.57.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "AI" = ["Foundation"];
          "AI_MachineLearning" = ["AI"];
          "ApplicationModel" = ["Foundation"];
          "ApplicationModel_Activation" = ["ApplicationModel"];
          "ApplicationModel_AppExtensions" = ["ApplicationModel"];
          "ApplicationModel_AppService" = ["ApplicationModel"];
          "ApplicationModel_Appointments" = ["ApplicationModel"];
          "ApplicationModel_Appointments_AppointmentsProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Appointments_DataProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Background" = ["ApplicationModel"];
          "ApplicationModel_Calls" = ["ApplicationModel"];
          "ApplicationModel_Calls_Background" = ["ApplicationModel_Calls"];
          "ApplicationModel_Calls_Provider" = ["ApplicationModel_Calls"];
          "ApplicationModel_Chat" = ["ApplicationModel"];
          "ApplicationModel_CommunicationBlocking" = ["ApplicationModel"];
          "ApplicationModel_Contacts" = ["ApplicationModel"];
          "ApplicationModel_Contacts_DataProvider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_Contacts_Provider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_ConversationalAgent" = ["ApplicationModel"];
          "ApplicationModel_Core" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer_DragDrop" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_DataTransfer_DragDrop_Core" = ["ApplicationModel_DataTransfer_DragDrop"];
          "ApplicationModel_DataTransfer_ShareTarget" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_Email" = ["ApplicationModel"];
          "ApplicationModel_Email_DataProvider" = ["ApplicationModel_Email"];
          "ApplicationModel_ExtendedExecution" = ["ApplicationModel"];
          "ApplicationModel_ExtendedExecution_Foreground" = ["ApplicationModel_ExtendedExecution"];
          "ApplicationModel_Holographic" = ["ApplicationModel"];
          "ApplicationModel_LockScreen" = ["ApplicationModel"];
          "ApplicationModel_Payments" = ["ApplicationModel"];
          "ApplicationModel_Payments_Provider" = ["ApplicationModel_Payments"];
          "ApplicationModel_Preview" = ["ApplicationModel"];
          "ApplicationModel_Preview_Holographic" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_InkWorkspace" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_Notes" = ["ApplicationModel_Preview"];
          "ApplicationModel_Resources" = ["ApplicationModel"];
          "ApplicationModel_Resources_Core" = ["ApplicationModel_Resources"];
          "ApplicationModel_Resources_Management" = ["ApplicationModel_Resources"];
          "ApplicationModel_Search" = ["ApplicationModel"];
          "ApplicationModel_Search_Core" = ["ApplicationModel_Search"];
          "ApplicationModel_UserActivities" = ["ApplicationModel"];
          "ApplicationModel_UserActivities_Core" = ["ApplicationModel_UserActivities"];
          "ApplicationModel_UserDataAccounts" = ["ApplicationModel"];
          "ApplicationModel_UserDataAccounts_Provider" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataAccounts_SystemAccess" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataTasks" = ["ApplicationModel"];
          "ApplicationModel_UserDataTasks_DataProvider" = ["ApplicationModel_UserDataTasks"];
          "ApplicationModel_VoiceCommands" = ["ApplicationModel"];
          "ApplicationModel_Wallet" = ["ApplicationModel"];
          "ApplicationModel_Wallet_System" = ["ApplicationModel_Wallet"];
          "Data" = ["Foundation"];
          "Data_Html" = ["Data"];
          "Data_Json" = ["Data"];
          "Data_Pdf" = ["Data"];
          "Data_Text" = ["Data"];
          "Data_Xml" = ["Data"];
          "Data_Xml_Dom" = ["Data_Xml"];
          "Data_Xml_Xsl" = ["Data_Xml"];
          "Devices" = ["Foundation"];
          "Devices_Adc" = ["Devices"];
          "Devices_Adc_Provider" = ["Devices_Adc"];
          "Devices_Background" = ["Devices"];
          "Devices_Bluetooth" = ["Devices"];
          "Devices_Bluetooth_Advertisement" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Background" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_GenericAttributeProfile" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Rfcomm" = ["Devices_Bluetooth"];
          "Devices_Custom" = ["Devices"];
          "Devices_Display" = ["Devices"];
          "Devices_Display_Core" = ["Devices_Display"];
          "Devices_Enumeration" = ["Devices"];
          "Devices_Enumeration_Pnp" = ["Devices_Enumeration"];
          "Devices_Geolocation" = ["Devices"];
          "Devices_Geolocation_Geofencing" = ["Devices_Geolocation"];
          "Devices_Geolocation_Provider" = ["Devices_Geolocation"];
          "Devices_Gpio" = ["Devices"];
          "Devices_Gpio_Provider" = ["Devices_Gpio"];
          "Devices_Haptics" = ["Devices"];
          "Devices_HumanInterfaceDevice" = ["Devices"];
          "Devices_I2c" = ["Devices"];
          "Devices_I2c_Provider" = ["Devices_I2c"];
          "Devices_Input" = ["Devices"];
          "Devices_Input_Preview" = ["Devices_Input"];
          "Devices_Lights" = ["Devices"];
          "Devices_Lights_Effects" = ["Devices_Lights"];
          "Devices_Midi" = ["Devices"];
          "Devices_PointOfService" = ["Devices"];
          "Devices_PointOfService_Provider" = ["Devices_PointOfService"];
          "Devices_Portable" = ["Devices"];
          "Devices_Power" = ["Devices"];
          "Devices_Printers" = ["Devices"];
          "Devices_Printers_Extensions" = ["Devices_Printers"];
          "Devices_Pwm" = ["Devices"];
          "Devices_Pwm_Provider" = ["Devices_Pwm"];
          "Devices_Radios" = ["Devices"];
          "Devices_Scanners" = ["Devices"];
          "Devices_Sensors" = ["Devices"];
          "Devices_Sensors_Custom" = ["Devices_Sensors"];
          "Devices_SerialCommunication" = ["Devices"];
          "Devices_SmartCards" = ["Devices"];
          "Devices_Sms" = ["Devices"];
          "Devices_Spi" = ["Devices"];
          "Devices_Spi_Provider" = ["Devices_Spi"];
          "Devices_Usb" = ["Devices"];
          "Devices_WiFi" = ["Devices"];
          "Devices_WiFiDirect" = ["Devices"];
          "Devices_WiFiDirect_Services" = ["Devices_WiFiDirect"];
          "Embedded" = ["Foundation"];
          "Embedded_DeviceLockdown" = ["Embedded"];
          "Foundation_Collections" = ["Foundation"];
          "Foundation_Diagnostics" = ["Foundation"];
          "Foundation_Metadata" = ["Foundation"];
          "Foundation_Numerics" = ["Foundation"];
          "Gaming" = ["Foundation"];
          "Gaming_Input" = ["Gaming"];
          "Gaming_Input_Custom" = ["Gaming_Input"];
          "Gaming_Input_ForceFeedback" = ["Gaming_Input"];
          "Gaming_Input_Preview" = ["Gaming_Input"];
          "Gaming_Preview" = ["Gaming"];
          "Gaming_Preview_GamesEnumeration" = ["Gaming_Preview"];
          "Gaming_UI" = ["Gaming"];
          "Gaming_XboxLive" = ["Gaming"];
          "Gaming_XboxLive_Storage" = ["Gaming_XboxLive"];
          "Globalization" = ["Foundation"];
          "Globalization_Collation" = ["Globalization"];
          "Globalization_DateTimeFormatting" = ["Globalization"];
          "Globalization_Fonts" = ["Globalization"];
          "Globalization_NumberFormatting" = ["Globalization"];
          "Globalization_PhoneNumberFormatting" = ["Globalization"];
          "Graphics" = ["Foundation"];
          "Graphics_Capture" = ["Graphics"];
          "Graphics_DirectX" = ["Graphics"];
          "Graphics_DirectX_Direct3D11" = ["Graphics_DirectX"];
          "Graphics_Display" = ["Graphics"];
          "Graphics_Display_Core" = ["Graphics_Display"];
          "Graphics_Effects" = ["Graphics"];
          "Graphics_Holographic" = ["Graphics"];
          "Graphics_Imaging" = ["Graphics"];
          "Graphics_Printing" = ["Graphics"];
          "Graphics_Printing3D" = ["Graphics"];
          "Graphics_Printing_OptionDetails" = ["Graphics_Printing"];
          "Graphics_Printing_PrintSupport" = ["Graphics_Printing"];
          "Graphics_Printing_PrintTicket" = ["Graphics_Printing"];
          "Graphics_Printing_Workflow" = ["Graphics_Printing"];
          "Management" = ["Foundation"];
          "Management_Core" = ["Management"];
          "Management_Deployment" = ["Management"];
          "Management_Deployment_Preview" = ["Management_Deployment"];
          "Management_Policies" = ["Management"];
          "Management_Update" = ["Management"];
          "Management_Workplace" = ["Management"];
          "Media" = ["Foundation"];
          "Media_AppBroadcasting" = ["Media"];
          "Media_AppRecording" = ["Media"];
          "Media_Audio" = ["Media"];
          "Media_Capture" = ["Media"];
          "Media_Capture_Core" = ["Media_Capture"];
          "Media_Capture_Frames" = ["Media_Capture"];
          "Media_Casting" = ["Media"];
          "Media_ClosedCaptioning" = ["Media"];
          "Media_ContentRestrictions" = ["Media"];
          "Media_Control" = ["Media"];
          "Media_Core" = ["Media"];
          "Media_Core_Preview" = ["Media_Core"];
          "Media_Devices" = ["Media"];
          "Media_Devices_Core" = ["Media_Devices"];
          "Media_DialProtocol" = ["Media"];
          "Media_Editing" = ["Media"];
          "Media_Effects" = ["Media"];
          "Media_FaceAnalysis" = ["Media"];
          "Media_Import" = ["Media"];
          "Media_MediaProperties" = ["Media"];
          "Media_Miracast" = ["Media"];
          "Media_Ocr" = ["Media"];
          "Media_PlayTo" = ["Media"];
          "Media_Playback" = ["Media"];
          "Media_Playlists" = ["Media"];
          "Media_Protection" = ["Media"];
          "Media_Protection_PlayReady" = ["Media_Protection"];
          "Media_Render" = ["Media"];
          "Media_SpeechRecognition" = ["Media"];
          "Media_SpeechSynthesis" = ["Media"];
          "Media_Streaming" = ["Media"];
          "Media_Streaming_Adaptive" = ["Media_Streaming"];
          "Media_Transcoding" = ["Media"];
          "Networking" = ["Foundation"];
          "Networking_BackgroundTransfer" = ["Networking"];
          "Networking_Connectivity" = ["Networking"];
          "Networking_NetworkOperators" = ["Networking"];
          "Networking_Proximity" = ["Networking"];
          "Networking_PushNotifications" = ["Networking"];
          "Networking_ServiceDiscovery" = ["Networking"];
          "Networking_ServiceDiscovery_Dnssd" = ["Networking_ServiceDiscovery"];
          "Networking_Sockets" = ["Networking"];
          "Networking_Vpn" = ["Networking"];
          "Networking_XboxLive" = ["Networking"];
          "Perception" = ["Foundation"];
          "Perception_Automation" = ["Perception"];
          "Perception_Automation_Core" = ["Perception_Automation"];
          "Perception_People" = ["Perception"];
          "Perception_Spatial" = ["Perception"];
          "Perception_Spatial_Preview" = ["Perception_Spatial"];
          "Perception_Spatial_Surfaces" = ["Perception_Spatial"];
          "Phone" = ["Foundation"];
          "Phone_ApplicationModel" = ["Phone"];
          "Phone_Devices" = ["Phone"];
          "Phone_Devices_Notification" = ["Phone_Devices"];
          "Phone_Devices_Power" = ["Phone_Devices"];
          "Phone_Management" = ["Phone"];
          "Phone_Management_Deployment" = ["Phone_Management"];
          "Phone_Media" = ["Phone"];
          "Phone_Media_Devices" = ["Phone_Media"];
          "Phone_Notification" = ["Phone"];
          "Phone_Notification_Management" = ["Phone_Notification"];
          "Phone_PersonalInformation" = ["Phone"];
          "Phone_PersonalInformation_Provisioning" = ["Phone_PersonalInformation"];
          "Phone_Speech" = ["Phone"];
          "Phone_Speech_Recognition" = ["Phone_Speech"];
          "Phone_StartScreen" = ["Phone"];
          "Phone_System" = ["Phone"];
          "Phone_System_Power" = ["Phone_System"];
          "Phone_System_Profile" = ["Phone_System"];
          "Phone_System_UserProfile" = ["Phone_System"];
          "Phone_System_UserProfile_GameServices" = ["Phone_System_UserProfile"];
          "Phone_System_UserProfile_GameServices_Core" = ["Phone_System_UserProfile_GameServices"];
          "Phone_UI" = ["Phone"];
          "Phone_UI_Input" = ["Phone_UI"];
          "Security" = ["Foundation"];
          "Security_Authentication" = ["Security"];
          "Security_Authentication_Identity" = ["Security_Authentication"];
          "Security_Authentication_Identity_Core" = ["Security_Authentication_Identity"];
          "Security_Authentication_OnlineId" = ["Security_Authentication"];
          "Security_Authentication_Web" = ["Security_Authentication"];
          "Security_Authentication_Web_Core" = ["Security_Authentication_Web"];
          "Security_Authentication_Web_Provider" = ["Security_Authentication_Web"];
          "Security_Authorization" = ["Security"];
          "Security_Authorization_AppCapabilityAccess" = ["Security_Authorization"];
          "Security_Credentials" = ["Security"];
          "Security_Credentials_UI" = ["Security_Credentials"];
          "Security_Cryptography" = ["Security"];
          "Security_Cryptography_Certificates" = ["Security_Cryptography"];
          "Security_Cryptography_Core" = ["Security_Cryptography"];
          "Security_Cryptography_DataProtection" = ["Security_Cryptography"];
          "Security_DataProtection" = ["Security"];
          "Security_EnterpriseData" = ["Security"];
          "Security_ExchangeActiveSyncProvisioning" = ["Security"];
          "Security_Isolation" = ["Security"];
          "Services" = ["Foundation"];
          "Services_Maps" = ["Services"];
          "Services_Maps_Guidance" = ["Services_Maps"];
          "Services_Maps_LocalSearch" = ["Services_Maps"];
          "Services_Maps_OfflineMaps" = ["Services_Maps"];
          "Services_Store" = ["Services"];
          "Services_TargetedContent" = ["Services"];
          "Storage" = ["Foundation"];
          "Storage_AccessCache" = ["Storage"];
          "Storage_BulkAccess" = ["Storage"];
          "Storage_Compression" = ["Storage"];
          "Storage_FileProperties" = ["Storage"];
          "Storage_Pickers" = ["Storage"];
          "Storage_Pickers_Provider" = ["Storage_Pickers"];
          "Storage_Provider" = ["Storage"];
          "Storage_Search" = ["Storage"];
          "Storage_Streams" = ["Storage"];
          "System" = ["Foundation"];
          "System_Diagnostics" = ["System"];
          "System_Diagnostics_DevicePortal" = ["System_Diagnostics"];
          "System_Diagnostics_Telemetry" = ["System_Diagnostics"];
          "System_Diagnostics_TraceReporting" = ["System_Diagnostics"];
          "System_Display" = ["System"];
          "System_Implementation" = ["System"];
          "System_Implementation_FileExplorer" = ["System_Implementation"];
          "System_Inventory" = ["System"];
          "System_Power" = ["System"];
          "System_Profile" = ["System"];
          "System_Profile_SystemManufacturers" = ["System_Profile"];
          "System_RemoteDesktop" = ["System"];
          "System_RemoteDesktop_Input" = ["System_RemoteDesktop"];
          "System_RemoteDesktop_Provider" = ["System_RemoteDesktop"];
          "System_RemoteSystems" = ["System"];
          "System_Threading" = ["System"];
          "System_Threading_Core" = ["System_Threading"];
          "System_Update" = ["System"];
          "System_UserProfile" = ["System"];
          "UI" = ["Foundation"];
          "UI_Accessibility" = ["UI"];
          "UI_ApplicationSettings" = ["UI"];
          "UI_Composition" = ["UI"];
          "UI_Composition_Core" = ["UI_Composition"];
          "UI_Composition_Desktop" = ["UI_Composition"];
          "UI_Composition_Diagnostics" = ["UI_Composition"];
          "UI_Composition_Effects" = ["UI_Composition"];
          "UI_Composition_Interactions" = ["UI_Composition"];
          "UI_Composition_Scenes" = ["UI_Composition"];
          "UI_Core" = ["UI"];
          "UI_Core_AnimationMetrics" = ["UI_Core"];
          "UI_Core_Preview" = ["UI_Core"];
          "UI_Input" = ["UI"];
          "UI_Input_Core" = ["UI_Input"];
          "UI_Input_Inking" = ["UI_Input"];
          "UI_Input_Inking_Analysis" = ["UI_Input_Inking"];
          "UI_Input_Inking_Core" = ["UI_Input_Inking"];
          "UI_Input_Inking_Preview" = ["UI_Input_Inking"];
          "UI_Input_Preview" = ["UI_Input"];
          "UI_Input_Preview_Injection" = ["UI_Input_Preview"];
          "UI_Input_Spatial" = ["UI_Input"];
          "UI_Notifications" = ["UI"];
          "UI_Notifications_Management" = ["UI_Notifications"];
          "UI_Notifications_Preview" = ["UI_Notifications"];
          "UI_Popups" = ["UI"];
          "UI_Shell" = ["UI"];
          "UI_StartScreen" = ["UI"];
          "UI_Text" = ["UI"];
          "UI_Text_Core" = ["UI_Text"];
          "UI_UIAutomation" = ["UI"];
          "UI_UIAutomation_Core" = ["UI_UIAutomation"];
          "UI_ViewManagement" = ["UI"];
          "UI_ViewManagement_Core" = ["UI_ViewManagement"];
          "UI_WebUI" = ["UI"];
          "UI_WebUI_Core" = ["UI_WebUI"];
          "UI_WindowManagement" = ["UI"];
          "UI_WindowManagement_Preview" = ["UI_WindowManagement"];
          "Wdk" = ["Win32_Foundation"];
          "Wdk_Devices" = ["Wdk"];
          "Wdk_Devices_HumanInterfaceDevice" = ["Wdk_Devices"];
          "Wdk_Foundation" = ["Wdk"];
          "Wdk_Graphics" = ["Wdk"];
          "Wdk_Graphics_Direct3D" = ["Wdk_Graphics"];
          "Wdk_NetworkManagement" = ["Wdk"];
          "Wdk_NetworkManagement_Ndis" = ["Wdk_NetworkManagement"];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = ["Wdk_NetworkManagement"];
          "Wdk_Storage" = ["Wdk"];
          "Wdk_Storage_FileSystem" = ["Wdk_Storage"];
          "Wdk_Storage_FileSystem_Minifilters" = ["Wdk_Storage_FileSystem"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_IO" = ["Wdk_System"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Wdk_System_Registry" = ["Wdk_System"];
          "Wdk_System_SystemInformation" = ["Wdk_System"];
          "Wdk_System_SystemServices" = ["Wdk_System"];
          "Wdk_System_Threading" = ["Wdk_System"];
          "Web" = ["Foundation"];
          "Web_AtomPub" = ["Web"];
          "Web_Http" = ["Web"];
          "Web_Http_Diagnostics" = ["Web_Http"];
          "Web_Http_Filters" = ["Web_Http"];
          "Web_Http_Headers" = ["Web_Http"];
          "Web_Syndication" = ["Web"];
          "Web_UI" = ["Web"];
          "Web_UI_Interop" = ["Web_UI"];
          "Win32" = ["Win32_Foundation"];
          "Win32_AI" = ["Win32"];
          "Win32_AI_MachineLearning" = ["Win32_AI"];
          "Win32_AI_MachineLearning_DirectML" = ["Win32_AI_MachineLearning"];
          "Win32_AI_MachineLearning_WinML" = ["Win32_AI_MachineLearning"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Data_Xml" = ["Win32_Data"];
          "Win32_Data_Xml_MsXml" = ["Win32_Data_Xml"];
          "Win32_Data_Xml_XmlLite" = ["Win32_Data_Xml"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAccess" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_FunctionDiscovery" = ["Win32_Devices"];
          "Win32_Devices_Geolocation" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_ImageAcquisition" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_CompositionSwapchain" = ["Win32_Graphics"];
          "Win32_Graphics_DXCore" = ["Win32_Graphics"];
          "Win32_Graphics_Direct2D" = ["Win32_Graphics"];
          "Win32_Graphics_Direct2D_Common" = ["Win32_Graphics_Direct2D"];
          "Win32_Graphics_Direct3D" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D10" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D11" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D11on12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D9" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D9on12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D_Dxc" = ["Win32_Graphics_Direct3D"];
          "Win32_Graphics_Direct3D_Fxc" = ["Win32_Graphics_Direct3D"];
          "Win32_Graphics_DirectComposition" = ["Win32_Graphics"];
          "Win32_Graphics_DirectDraw" = ["Win32_Graphics"];
          "Win32_Graphics_DirectManipulation" = ["Win32_Graphics"];
          "Win32_Graphics_DirectWrite" = ["Win32_Graphics"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Dxgi" = ["Win32_Graphics"];
          "Win32_Graphics_Dxgi_Common" = ["Win32_Graphics_Dxgi"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_GdiPlus" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_Imaging" = ["Win32_Graphics"];
          "Win32_Graphics_Imaging_D2D" = ["Win32_Graphics_Imaging"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_Audio_Apo" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectMusic" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectSound" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_Endpoints" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_XAudio2" = ["Win32_Media_Audio"];
          "Win32_Media_DeviceManager" = ["Win32_Media"];
          "Win32_Media_DirectShow" = ["Win32_Media"];
          "Win32_Media_DirectShow_Tv" = ["Win32_Media_DirectShow"];
          "Win32_Media_DirectShow_Xml" = ["Win32_Media_DirectShow"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_LibrarySharingServices" = ["Win32_Media"];
          "Win32_Media_MediaFoundation" = ["Win32_Media"];
          "Win32_Media_MediaPlayer" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_PictureAcquisition" = ["Win32_Media"];
          "Win32_Media_Speech" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_MobileBroadband" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkPolicyServer" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectNow" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_BackgroundIntelligentTransferService" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_NetworkListManager" = ["Win32_Networking"];
          "Win32_Networking_RemoteDifferentialCompression" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authentication_Identity_Provider" = ["Win32_Security_Authentication_Identity"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Authorization_UI" = ["Win32_Security_Authorization"];
          "Win32_Security_ConfigurationSnapin" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_Tpm" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DataDeduplication" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_EnhancedStorage" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileServerResourceManager" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_Nvme" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_Packaging_Opc" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_VirtualDiskService" = ["Win32_Storage"];
          "Win32_Storage_Vss" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_Storage_Xps_Printing" = ["Win32_Storage_Xps"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_AssessmentTool" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_CallObj" = ["Win32_System_Com"];
          "Win32_System_Com_ChannelCredentials" = ["Win32_System_Com"];
          "Win32_System_Com_Events" = ["Win32_System_Com"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_UI" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_Contacts" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DesktopSharing" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ClrProfiling" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_ActiveScript" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_TraceLogging" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Mmc" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_ParentalControls" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_RealTimeCommunications" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteAssistance" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_ServerBackup" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SettingsManagementInfrastructure" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_SideShow" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_TaskScheduler" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_TransactionServer" = ["Win32_System"];
          "Win32_System_UpdateAgent" = ["Win32_System"];
          "Win32_System_UpdateAssessment" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_Variant" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WinRT" = ["Win32_System"];
          "Win32_System_WinRT_AllJoyn" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Composition" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_CoreInputView" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Direct3D11" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Display" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Graphics" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Graphics_Capture" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Graphics_Direct2D" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Graphics_Imaging" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Holographic" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Isolation" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_ML" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Media" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Metadata" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Pdf" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Printing" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Shell" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Storage" = ["Win32_System_WinRT"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_WindowsSync" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_Animation" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_Controls_RichEdit" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_Ink" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Radial" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Notifications" = ["Win32_UI"];
          "Win32_UI_Ribbon" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_UI_Wpf" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
          "default" = ["std"];
          "std" = ["windows-core/std"];
        };
        resolvedDefaultFeatures = ["Wdk" "Wdk_System" "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_NetworkManagement_NetManagement" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI" "Win32_UI_Shell" "default" "std"];
      };
      "windows 0.61.3" = rec {
        crateName = "windows";
        version = "0.61.3";
        edition = "2021";
        sha256 = "14v8dln7i4ccskd8danzri22bkjkbmgzh284j3vaxhd4cykx7awv";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-collections";
            packageId = "windows-collections";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-future";
            packageId = "windows-future";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-numerics";
            packageId = "windows-numerics";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "AI" = ["Foundation"];
          "AI_MachineLearning" = ["AI"];
          "ApplicationModel" = ["Foundation"];
          "ApplicationModel_Activation" = ["ApplicationModel"];
          "ApplicationModel_AppExtensions" = ["ApplicationModel"];
          "ApplicationModel_AppService" = ["ApplicationModel"];
          "ApplicationModel_Appointments" = ["ApplicationModel"];
          "ApplicationModel_Appointments_AppointmentsProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Appointments_DataProvider" = ["ApplicationModel_Appointments"];
          "ApplicationModel_Background" = ["ApplicationModel"];
          "ApplicationModel_Calls" = ["ApplicationModel"];
          "ApplicationModel_Calls_Background" = ["ApplicationModel_Calls"];
          "ApplicationModel_Calls_Provider" = ["ApplicationModel_Calls"];
          "ApplicationModel_Chat" = ["ApplicationModel"];
          "ApplicationModel_CommunicationBlocking" = ["ApplicationModel"];
          "ApplicationModel_Contacts" = ["ApplicationModel"];
          "ApplicationModel_Contacts_DataProvider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_Contacts_Provider" = ["ApplicationModel_Contacts"];
          "ApplicationModel_ConversationalAgent" = ["ApplicationModel"];
          "ApplicationModel_Core" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer" = ["ApplicationModel"];
          "ApplicationModel_DataTransfer_DragDrop" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_DataTransfer_DragDrop_Core" = ["ApplicationModel_DataTransfer_DragDrop"];
          "ApplicationModel_DataTransfer_ShareTarget" = ["ApplicationModel_DataTransfer"];
          "ApplicationModel_Email" = ["ApplicationModel"];
          "ApplicationModel_Email_DataProvider" = ["ApplicationModel_Email"];
          "ApplicationModel_ExtendedExecution" = ["ApplicationModel"];
          "ApplicationModel_ExtendedExecution_Foreground" = ["ApplicationModel_ExtendedExecution"];
          "ApplicationModel_Holographic" = ["ApplicationModel"];
          "ApplicationModel_LockScreen" = ["ApplicationModel"];
          "ApplicationModel_PackageExtensions" = ["ApplicationModel"];
          "ApplicationModel_Payments" = ["ApplicationModel"];
          "ApplicationModel_Payments_Provider" = ["ApplicationModel_Payments"];
          "ApplicationModel_Preview" = ["ApplicationModel"];
          "ApplicationModel_Preview_Holographic" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_InkWorkspace" = ["ApplicationModel_Preview"];
          "ApplicationModel_Preview_Notes" = ["ApplicationModel_Preview"];
          "ApplicationModel_Resources" = ["ApplicationModel"];
          "ApplicationModel_Resources_Core" = ["ApplicationModel_Resources"];
          "ApplicationModel_Resources_Management" = ["ApplicationModel_Resources"];
          "ApplicationModel_Search" = ["ApplicationModel"];
          "ApplicationModel_Search_Core" = ["ApplicationModel_Search"];
          "ApplicationModel_UserActivities" = ["ApplicationModel"];
          "ApplicationModel_UserActivities_Core" = ["ApplicationModel_UserActivities"];
          "ApplicationModel_UserDataAccounts" = ["ApplicationModel"];
          "ApplicationModel_UserDataAccounts_Provider" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataAccounts_SystemAccess" = ["ApplicationModel_UserDataAccounts"];
          "ApplicationModel_UserDataTasks" = ["ApplicationModel"];
          "ApplicationModel_UserDataTasks_DataProvider" = ["ApplicationModel_UserDataTasks"];
          "ApplicationModel_VoiceCommands" = ["ApplicationModel"];
          "ApplicationModel_Wallet" = ["ApplicationModel"];
          "ApplicationModel_Wallet_System" = ["ApplicationModel_Wallet"];
          "Data" = ["Foundation"];
          "Data_Html" = ["Data"];
          "Data_Json" = ["Data"];
          "Data_Pdf" = ["Data"];
          "Data_Text" = ["Data"];
          "Data_Xml" = ["Data"];
          "Data_Xml_Dom" = ["Data_Xml"];
          "Data_Xml_Xsl" = ["Data_Xml"];
          "Devices" = ["Foundation"];
          "Devices_Adc" = ["Devices"];
          "Devices_Adc_Provider" = ["Devices_Adc"];
          "Devices_Background" = ["Devices"];
          "Devices_Bluetooth" = ["Devices"];
          "Devices_Bluetooth_Advertisement" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Background" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_GenericAttributeProfile" = ["Devices_Bluetooth"];
          "Devices_Bluetooth_Rfcomm" = ["Devices_Bluetooth"];
          "Devices_Custom" = ["Devices"];
          "Devices_Display" = ["Devices"];
          "Devices_Display_Core" = ["Devices_Display"];
          "Devices_Enumeration" = ["Devices"];
          "Devices_Enumeration_Pnp" = ["Devices_Enumeration"];
          "Devices_Geolocation" = ["Devices"];
          "Devices_Geolocation_Geofencing" = ["Devices_Geolocation"];
          "Devices_Geolocation_Provider" = ["Devices_Geolocation"];
          "Devices_Gpio" = ["Devices"];
          "Devices_Gpio_Provider" = ["Devices_Gpio"];
          "Devices_Haptics" = ["Devices"];
          "Devices_HumanInterfaceDevice" = ["Devices"];
          "Devices_I2c" = ["Devices"];
          "Devices_I2c_Provider" = ["Devices_I2c"];
          "Devices_Input" = ["Devices"];
          "Devices_Input_Preview" = ["Devices_Input"];
          "Devices_Lights" = ["Devices"];
          "Devices_Lights_Effects" = ["Devices_Lights"];
          "Devices_Midi" = ["Devices"];
          "Devices_PointOfService" = ["Devices"];
          "Devices_PointOfService_Provider" = ["Devices_PointOfService"];
          "Devices_Portable" = ["Devices"];
          "Devices_Power" = ["Devices"];
          "Devices_Printers" = ["Devices"];
          "Devices_Printers_Extensions" = ["Devices_Printers"];
          "Devices_Pwm" = ["Devices"];
          "Devices_Pwm_Provider" = ["Devices_Pwm"];
          "Devices_Radios" = ["Devices"];
          "Devices_Scanners" = ["Devices"];
          "Devices_Sensors" = ["Devices"];
          "Devices_Sensors_Custom" = ["Devices_Sensors"];
          "Devices_SerialCommunication" = ["Devices"];
          "Devices_SmartCards" = ["Devices"];
          "Devices_Sms" = ["Devices"];
          "Devices_Spi" = ["Devices"];
          "Devices_Spi_Provider" = ["Devices_Spi"];
          "Devices_Usb" = ["Devices"];
          "Devices_WiFi" = ["Devices"];
          "Devices_WiFiDirect" = ["Devices"];
          "Devices_WiFiDirect_Services" = ["Devices_WiFiDirect"];
          "Embedded" = ["Foundation"];
          "Embedded_DeviceLockdown" = ["Embedded"];
          "Foundation_Collections" = ["Foundation"];
          "Foundation_Diagnostics" = ["Foundation"];
          "Foundation_Metadata" = ["Foundation"];
          "Foundation_Numerics" = ["Foundation"];
          "Gaming" = ["Foundation"];
          "Gaming_Input" = ["Gaming"];
          "Gaming_Input_Custom" = ["Gaming_Input"];
          "Gaming_Input_ForceFeedback" = ["Gaming_Input"];
          "Gaming_Input_Preview" = ["Gaming_Input"];
          "Gaming_Preview" = ["Gaming"];
          "Gaming_Preview_GamesEnumeration" = ["Gaming_Preview"];
          "Gaming_UI" = ["Gaming"];
          "Gaming_XboxLive" = ["Gaming"];
          "Gaming_XboxLive_Storage" = ["Gaming_XboxLive"];
          "Globalization" = ["Foundation"];
          "Globalization_Collation" = ["Globalization"];
          "Globalization_DateTimeFormatting" = ["Globalization"];
          "Globalization_Fonts" = ["Globalization"];
          "Globalization_NumberFormatting" = ["Globalization"];
          "Globalization_PhoneNumberFormatting" = ["Globalization"];
          "Graphics" = ["Foundation"];
          "Graphics_Capture" = ["Graphics"];
          "Graphics_DirectX" = ["Graphics"];
          "Graphics_DirectX_Direct3D11" = ["Graphics_DirectX"];
          "Graphics_Display" = ["Graphics"];
          "Graphics_Display_Core" = ["Graphics_Display"];
          "Graphics_Effects" = ["Graphics"];
          "Graphics_Holographic" = ["Graphics"];
          "Graphics_Imaging" = ["Graphics"];
          "Graphics_Printing" = ["Graphics"];
          "Graphics_Printing3D" = ["Graphics"];
          "Graphics_Printing_OptionDetails" = ["Graphics_Printing"];
          "Graphics_Printing_PrintSupport" = ["Graphics_Printing"];
          "Graphics_Printing_PrintTicket" = ["Graphics_Printing"];
          "Graphics_Printing_Workflow" = ["Graphics_Printing"];
          "Management" = ["Foundation"];
          "Management_Core" = ["Management"];
          "Management_Deployment" = ["Management"];
          "Management_Deployment_Preview" = ["Management_Deployment"];
          "Management_Policies" = ["Management"];
          "Management_Setup" = ["Management"];
          "Management_Update" = ["Management"];
          "Management_Workplace" = ["Management"];
          "Media" = ["Foundation"];
          "Media_AppBroadcasting" = ["Media"];
          "Media_AppRecording" = ["Media"];
          "Media_Audio" = ["Media"];
          "Media_Capture" = ["Media"];
          "Media_Capture_Core" = ["Media_Capture"];
          "Media_Capture_Frames" = ["Media_Capture"];
          "Media_Casting" = ["Media"];
          "Media_ClosedCaptioning" = ["Media"];
          "Media_ContentRestrictions" = ["Media"];
          "Media_Control" = ["Media"];
          "Media_Core" = ["Media"];
          "Media_Core_Preview" = ["Media_Core"];
          "Media_Devices" = ["Media"];
          "Media_Devices_Core" = ["Media_Devices"];
          "Media_DialProtocol" = ["Media"];
          "Media_Editing" = ["Media"];
          "Media_Effects" = ["Media"];
          "Media_FaceAnalysis" = ["Media"];
          "Media_Import" = ["Media"];
          "Media_MediaProperties" = ["Media"];
          "Media_Miracast" = ["Media"];
          "Media_Ocr" = ["Media"];
          "Media_PlayTo" = ["Media"];
          "Media_Playback" = ["Media"];
          "Media_Playlists" = ["Media"];
          "Media_Protection" = ["Media"];
          "Media_Protection_PlayReady" = ["Media_Protection"];
          "Media_Render" = ["Media"];
          "Media_SpeechRecognition" = ["Media"];
          "Media_SpeechSynthesis" = ["Media"];
          "Media_Streaming" = ["Media"];
          "Media_Streaming_Adaptive" = ["Media_Streaming"];
          "Media_Transcoding" = ["Media"];
          "Networking" = ["Foundation"];
          "Networking_BackgroundTransfer" = ["Networking"];
          "Networking_Connectivity" = ["Networking"];
          "Networking_NetworkOperators" = ["Networking"];
          "Networking_Proximity" = ["Networking"];
          "Networking_PushNotifications" = ["Networking"];
          "Networking_ServiceDiscovery" = ["Networking"];
          "Networking_ServiceDiscovery_Dnssd" = ["Networking_ServiceDiscovery"];
          "Networking_Sockets" = ["Networking"];
          "Networking_Vpn" = ["Networking"];
          "Networking_XboxLive" = ["Networking"];
          "Perception" = ["Foundation"];
          "Perception_Automation" = ["Perception"];
          "Perception_Automation_Core" = ["Perception_Automation"];
          "Perception_People" = ["Perception"];
          "Perception_Spatial" = ["Perception"];
          "Perception_Spatial_Preview" = ["Perception_Spatial"];
          "Perception_Spatial_Surfaces" = ["Perception_Spatial"];
          "Phone" = ["Foundation"];
          "Phone_ApplicationModel" = ["Phone"];
          "Phone_Devices" = ["Phone"];
          "Phone_Devices_Notification" = ["Phone_Devices"];
          "Phone_Devices_Power" = ["Phone_Devices"];
          "Phone_Management" = ["Phone"];
          "Phone_Management_Deployment" = ["Phone_Management"];
          "Phone_Media" = ["Phone"];
          "Phone_Media_Devices" = ["Phone_Media"];
          "Phone_Notification" = ["Phone"];
          "Phone_Notification_Management" = ["Phone_Notification"];
          "Phone_PersonalInformation" = ["Phone"];
          "Phone_PersonalInformation_Provisioning" = ["Phone_PersonalInformation"];
          "Phone_Speech" = ["Phone"];
          "Phone_Speech_Recognition" = ["Phone_Speech"];
          "Phone_StartScreen" = ["Phone"];
          "Phone_System" = ["Phone"];
          "Phone_System_Power" = ["Phone_System"];
          "Phone_System_Profile" = ["Phone_System"];
          "Phone_System_UserProfile" = ["Phone_System"];
          "Phone_System_UserProfile_GameServices" = ["Phone_System_UserProfile"];
          "Phone_System_UserProfile_GameServices_Core" = ["Phone_System_UserProfile_GameServices"];
          "Phone_UI" = ["Phone"];
          "Phone_UI_Input" = ["Phone_UI"];
          "Security" = ["Foundation"];
          "Security_Authentication" = ["Security"];
          "Security_Authentication_Identity" = ["Security_Authentication"];
          "Security_Authentication_Identity_Core" = ["Security_Authentication_Identity"];
          "Security_Authentication_OnlineId" = ["Security_Authentication"];
          "Security_Authentication_Web" = ["Security_Authentication"];
          "Security_Authentication_Web_Core" = ["Security_Authentication_Web"];
          "Security_Authentication_Web_Provider" = ["Security_Authentication_Web"];
          "Security_Authorization" = ["Security"];
          "Security_Authorization_AppCapabilityAccess" = ["Security_Authorization"];
          "Security_Credentials" = ["Security"];
          "Security_Credentials_UI" = ["Security_Credentials"];
          "Security_Cryptography" = ["Security"];
          "Security_Cryptography_Certificates" = ["Security_Cryptography"];
          "Security_Cryptography_Core" = ["Security_Cryptography"];
          "Security_Cryptography_DataProtection" = ["Security_Cryptography"];
          "Security_DataProtection" = ["Security"];
          "Security_EnterpriseData" = ["Security"];
          "Security_ExchangeActiveSyncProvisioning" = ["Security"];
          "Security_Isolation" = ["Security"];
          "Services" = ["Foundation"];
          "Services_Maps" = ["Services"];
          "Services_Maps_Guidance" = ["Services_Maps"];
          "Services_Maps_LocalSearch" = ["Services_Maps"];
          "Services_Maps_OfflineMaps" = ["Services_Maps"];
          "Services_Store" = ["Services"];
          "Services_TargetedContent" = ["Services"];
          "Storage" = ["Foundation"];
          "Storage_AccessCache" = ["Storage"];
          "Storage_BulkAccess" = ["Storage"];
          "Storage_Compression" = ["Storage"];
          "Storage_FileProperties" = ["Storage"];
          "Storage_Pickers" = ["Storage"];
          "Storage_Pickers_Provider" = ["Storage_Pickers"];
          "Storage_Provider" = ["Storage"];
          "Storage_Search" = ["Storage"];
          "Storage_Streams" = ["Storage"];
          "System" = ["Foundation"];
          "System_Diagnostics" = ["System"];
          "System_Diagnostics_DevicePortal" = ["System_Diagnostics"];
          "System_Diagnostics_Telemetry" = ["System_Diagnostics"];
          "System_Diagnostics_TraceReporting" = ["System_Diagnostics"];
          "System_Display" = ["System"];
          "System_Implementation" = ["System"];
          "System_Implementation_FileExplorer" = ["System_Implementation"];
          "System_Inventory" = ["System"];
          "System_Power" = ["System"];
          "System_Profile" = ["System"];
          "System_Profile_SystemManufacturers" = ["System_Profile"];
          "System_RemoteDesktop" = ["System"];
          "System_RemoteDesktop_Input" = ["System_RemoteDesktop"];
          "System_RemoteDesktop_Provider" = ["System_RemoteDesktop"];
          "System_RemoteSystems" = ["System"];
          "System_Threading" = ["System"];
          "System_Threading_Core" = ["System_Threading"];
          "System_Update" = ["System"];
          "System_UserProfile" = ["System"];
          "UI" = ["Foundation"];
          "UI_Accessibility" = ["UI"];
          "UI_ApplicationSettings" = ["UI"];
          "UI_Composition" = ["UI"];
          "UI_Composition_Core" = ["UI_Composition"];
          "UI_Composition_Desktop" = ["UI_Composition"];
          "UI_Composition_Diagnostics" = ["UI_Composition"];
          "UI_Composition_Effects" = ["UI_Composition"];
          "UI_Composition_Interactions" = ["UI_Composition"];
          "UI_Composition_Scenes" = ["UI_Composition"];
          "UI_Core" = ["UI"];
          "UI_Core_AnimationMetrics" = ["UI_Core"];
          "UI_Core_Preview" = ["UI_Core"];
          "UI_Input" = ["UI"];
          "UI_Input_Core" = ["UI_Input"];
          "UI_Input_Inking" = ["UI_Input"];
          "UI_Input_Inking_Analysis" = ["UI_Input_Inking"];
          "UI_Input_Inking_Core" = ["UI_Input_Inking"];
          "UI_Input_Inking_Preview" = ["UI_Input_Inking"];
          "UI_Input_Preview" = ["UI_Input"];
          "UI_Input_Preview_Injection" = ["UI_Input_Preview"];
          "UI_Input_Spatial" = ["UI_Input"];
          "UI_Notifications" = ["UI"];
          "UI_Notifications_Management" = ["UI_Notifications"];
          "UI_Notifications_Preview" = ["UI_Notifications"];
          "UI_Popups" = ["UI"];
          "UI_Shell" = ["UI"];
          "UI_StartScreen" = ["UI"];
          "UI_Text" = ["UI"];
          "UI_Text_Core" = ["UI_Text"];
          "UI_UIAutomation" = ["UI"];
          "UI_UIAutomation_Core" = ["UI_UIAutomation"];
          "UI_ViewManagement" = ["UI"];
          "UI_ViewManagement_Core" = ["UI_ViewManagement"];
          "UI_WebUI" = ["UI"];
          "UI_WebUI_Core" = ["UI_WebUI"];
          "UI_WindowManagement" = ["UI"];
          "UI_WindowManagement_Preview" = ["UI_WindowManagement"];
          "Wdk" = ["Win32_Foundation"];
          "Wdk_Devices" = ["Wdk"];
          "Wdk_Devices_Bluetooth" = ["Wdk_Devices"];
          "Wdk_Devices_HumanInterfaceDevice" = ["Wdk_Devices"];
          "Wdk_Foundation" = ["Wdk"];
          "Wdk_Graphics" = ["Wdk"];
          "Wdk_Graphics_Direct3D" = ["Wdk_Graphics"];
          "Wdk_NetworkManagement" = ["Wdk"];
          "Wdk_NetworkManagement_Ndis" = ["Wdk_NetworkManagement"];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = ["Wdk_NetworkManagement"];
          "Wdk_Storage" = ["Wdk"];
          "Wdk_Storage_FileSystem" = ["Wdk_Storage"];
          "Wdk_Storage_FileSystem_Minifilters" = ["Wdk_Storage_FileSystem"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_IO" = ["Wdk_System"];
          "Wdk_System_Memory" = ["Wdk_System"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Wdk_System_Registry" = ["Wdk_System"];
          "Wdk_System_SystemInformation" = ["Wdk_System"];
          "Wdk_System_SystemServices" = ["Wdk_System"];
          "Wdk_System_Threading" = ["Wdk_System"];
          "Web" = ["Foundation"];
          "Web_AtomPub" = ["Web"];
          "Web_Http" = ["Web"];
          "Web_Http_Diagnostics" = ["Web_Http"];
          "Web_Http_Filters" = ["Web_Http"];
          "Web_Http_Headers" = ["Web_Http"];
          "Web_Syndication" = ["Web"];
          "Web_UI" = ["Web"];
          "Web_UI_Interop" = ["Web_UI"];
          "Win32" = ["Win32_Foundation"];
          "Win32_AI" = ["Win32"];
          "Win32_AI_MachineLearning" = ["Win32_AI"];
          "Win32_AI_MachineLearning_DirectML" = ["Win32_AI_MachineLearning"];
          "Win32_AI_MachineLearning_WinML" = ["Win32_AI_MachineLearning"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Data_Xml" = ["Win32_Data"];
          "Win32_Data_Xml_MsXml" = ["Win32_Data_Xml"];
          "Win32_Data_Xml_XmlLite" = ["Win32_Data_Xml"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_Beep" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Cdrom" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAccess" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Dvd" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_FunctionDiscovery" = ["Win32_Devices"];
          "Win32_Devices_Geolocation" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_ImageAcquisition" = ["Win32_Devices"];
          "Win32_Devices_Nfc" = ["Win32_Devices"];
          "Win32_Devices_Nfp" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_CompositionSwapchain" = ["Win32_Graphics"];
          "Win32_Graphics_DXCore" = ["Win32_Graphics"];
          "Win32_Graphics_Direct2D" = ["Win32_Graphics"];
          "Win32_Graphics_Direct2D_Common" = ["Win32_Graphics_Direct2D"];
          "Win32_Graphics_Direct3D" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D10" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D11" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D11on12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D9" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D9on12" = ["Win32_Graphics"];
          "Win32_Graphics_Direct3D_Dxc" = ["Win32_Graphics_Direct3D"];
          "Win32_Graphics_Direct3D_Fxc" = ["Win32_Graphics_Direct3D"];
          "Win32_Graphics_DirectComposition" = ["Win32_Graphics"];
          "Win32_Graphics_DirectDraw" = ["Win32_Graphics"];
          "Win32_Graphics_DirectManipulation" = ["Win32_Graphics"];
          "Win32_Graphics_DirectWrite" = ["Win32_Graphics"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Dxgi" = ["Win32_Graphics"];
          "Win32_Graphics_Dxgi_Common" = ["Win32_Graphics_Dxgi"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_GdiPlus" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_Imaging" = ["Win32_Graphics"];
          "Win32_Graphics_Imaging_D2D" = ["Win32_Graphics_Imaging"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_Audio_Apo" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectMusic" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectSound" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_Endpoints" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_XAudio2" = ["Win32_Media_Audio"];
          "Win32_Media_DeviceManager" = ["Win32_Media"];
          "Win32_Media_DirectShow" = ["Win32_Media"];
          "Win32_Media_DirectShow_Tv" = ["Win32_Media_DirectShow"];
          "Win32_Media_DirectShow_Xml" = ["Win32_Media_DirectShow"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_LibrarySharingServices" = ["Win32_Media"];
          "Win32_Media_MediaFoundation" = ["Win32_Media"];
          "Win32_Media_MediaPlayer" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_PictureAcquisition" = ["Win32_Media"];
          "Win32_Media_Speech" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_MobileBroadband" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkPolicyServer" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectNow" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_BackgroundIntelligentTransferService" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_NetworkListManager" = ["Win32_Networking"];
          "Win32_Networking_RemoteDifferentialCompression" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authentication_Identity_Provider" = ["Win32_Security_Authentication_Identity"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Authorization_UI" = ["Win32_Security_Authorization"];
          "Win32_Security_ConfigurationSnapin" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_Tpm" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DataDeduplication" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_EnhancedStorage" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileServerResourceManager" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_Nvme" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_Packaging_Opc" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_VirtualDiskService" = ["Win32_Storage"];
          "Win32_Storage_Vss" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_Storage_Xps_Printing" = ["Win32_Storage_Xps"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_AssessmentTool" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_CallObj" = ["Win32_System_Com"];
          "Win32_System_Com_ChannelCredentials" = ["Win32_System_Com"];
          "Win32_System_Com_Events" = ["Win32_System_Com"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_UI" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_Contacts" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DesktopSharing" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ClrProfiling" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_ActiveScript" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_TraceLogging" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Mmc" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_ParentalControls" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_RealTimeCommunications" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteAssistance" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_ServerBackup" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SettingsManagementInfrastructure" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_SideShow" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_TaskScheduler" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_TransactionServer" = ["Win32_System"];
          "Win32_System_UpdateAgent" = ["Win32_System"];
          "Win32_System_UpdateAssessment" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_Variant" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WinRT" = ["Win32_System"];
          "Win32_System_WinRT_AllJoyn" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Composition" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_CoreInputView" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Direct3D11" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Display" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Graphics" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Graphics_Capture" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Graphics_Direct2D" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Graphics_Imaging" = ["Win32_System_WinRT_Graphics"];
          "Win32_System_WinRT_Holographic" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Isolation" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_ML" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Media" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Metadata" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Pdf" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Printing" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Shell" = ["Win32_System_WinRT"];
          "Win32_System_WinRT_Storage" = ["Win32_System_WinRT"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_WindowsSync" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_Animation" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_Controls_RichEdit" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_Ink" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Radial" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Notifications" = ["Win32_UI"];
          "Win32_UI_Ribbon" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_UI_Wpf" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
          "default" = ["std"];
          "std" = ["windows-core/std"];
        };
        resolvedDefaultFeatures = ["Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_Variant" "Win32_System_Wmi" "default" "std"];
      };
      "windows-collections" = rec {
        crateName = "windows-collections";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1s65anr609qvsjga7w971p6iq964h87670dkfqfypnfgwnswxviv";
        libName = "windows_collections";
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
        };
      };
      "windows-core 0.57.0" = rec {
        crateName = "windows-core";
        version = "0.57.0";
        edition = "2021";
        sha256 = "0bc3jxw2jw76xkk3ddvnp5b2m76qmbzv1qncgvb6qrlhl8wj9vfj";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement 0.57.0";
          }
          {
            name = "windows-interface";
            packageId = "windows-interface 0.57.0";
          }
          {
            name = "windows-result";
            packageId = "windows-result 0.1.2";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "windows-core 0.61.2" = rec {
        crateName = "windows-core";
        version = "0.61.2";
        edition = "2021";
        sha256 = "1qsa3iw14wk4ngfl7ipcvdf9xyq456ms7cx2i9iwf406p7fx7zf0";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement 0.60.0";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-interface";
            packageId = "windows-interface 0.59.1";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-result";
            packageId = "windows-result 0.3.4";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
          "std" = ["windows-result/std" "windows-strings/std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "windows-future" = rec {
        crateName = "windows-future";
        version = "0.2.1";
        edition = "2021";
        sha256 = "13mdzcdn51ckpzp3frb8glnmkyjr1c30ym9wnzj9zc97hkll2spw";
        libName = "windows_future";
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-threading";
            packageId = "windows-threading";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
        };
      };
      "windows-implement 0.57.0" = rec {
        crateName = "windows-implement";
        version = "0.57.0";
        edition = "2021";
        sha256 = "1mqs7qypclnmx5r8yq5jy3g2d8i27vzag9yzzzxzpdnmb70ds1wi";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["parsing" "proc-macro" "printing" "full" "derive"];
          }
        ];
      };
      "windows-implement 0.60.0" = rec {
        crateName = "windows-implement";
        version = "0.60.0";
        edition = "2021";
        sha256 = "0dm88k3hlaax85xkls4gf597ar4z8m5vzjjagzk910ph7b8xszx4";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["parsing" "proc-macro" "printing" "full" "clone-impls"];
          }
        ];
      };
      "windows-interface 0.57.0" = rec {
        crateName = "windows-interface";
        version = "0.57.0";
        edition = "2021";
        sha256 = "19zwlzr0q1z9s692681yb5w2lhvwcyx4v95s25hfdkd3isry9gi9";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["parsing" "proc-macro" "printing" "full" "derive" "clone-impls"];
          }
        ];
      };
      "windows-interface 0.59.1" = rec {
        crateName = "windows-interface";
        version = "0.59.1";
        edition = "2021";
        sha256 = "1a4zr8740gyzzhq02xgl6vx8l669jwfby57xgf0zmkcdkyv134mx";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = ["parsing" "proc-macro" "printing" "full" "clone-impls"];
          }
        ];
      };
      "windows-link" = rec {
        crateName = "windows-link";
        version = "0.1.3";
        edition = "2021";
        sha256 = "12kr1p46dbhpijr4zbwr2spfgq8i8c5x55mvvfmyl96m01cx4sjy";
        libName = "windows_link";
        authors = [
          "Microsoft"
        ];
      };
      "windows-numerics" = rec {
        crateName = "windows-numerics";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1cf2j8nbqf0hqqa7chnyid91wxsl2m131kn0vl3mqk3c0rlayl4i";
        libName = "windows_numerics";
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
        };
      };
      "windows-result 0.1.2" = rec {
        crateName = "windows-result";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1y274q1v0vy21lhkgslpxpq1m08hvr1mcs2l88h1b1gcx0136f2y";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "windows-result 0.3.4" = rec {
        crateName = "windows-result";
        version = "0.3.4";
        edition = "2021";
        sha256 = "1il60l6idrc6hqsij0cal0mgva6n3w6gq4ziban8wv6c6b9jpx2n";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["default" "std"];
      };
      "windows-strings" = rec {
        crateName = "windows-strings";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0mrv3plibkla4v5kaakc2rfksdd0b14plcmidhbkcfqc78zwkrjn";
        libName = "windows_strings";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["std"];
        };
        resolvedDefaultFeatures = ["std"];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = ["Wdk"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Data_Xml" = ["Win32_Data"];
          "Win32_Data_Xml_MsXml" = ["Win32_Data_Xml"];
          "Win32_Data_Xml_XmlLite" = ["Win32_Data_Xml"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAccess" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_FunctionDiscovery" = ["Win32_Devices"];
          "Win32_Devices_Geolocation" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_ImageAcquisition" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_Audio_Apo" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_DirectMusic" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_Endpoints" = ["Win32_Media_Audio"];
          "Win32_Media_Audio_XAudio2" = ["Win32_Media_Audio"];
          "Win32_Media_DeviceManager" = ["Win32_Media"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_LibrarySharingServices" = ["Win32_Media"];
          "Win32_Media_MediaPlayer" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_Speech" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_MobileBroadband" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkPolicyServer" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectNow" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_BackgroundIntelligentTransferService" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_NetworkListManager" = ["Win32_Networking"];
          "Win32_Networking_RemoteDifferentialCompression" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authentication_Identity_Provider" = ["Win32_Security_Authentication_Identity"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Authorization_UI" = ["Win32_Security_Authorization"];
          "Win32_Security_ConfigurationSnapin" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_Tpm" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DataDeduplication" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_EnhancedStorage" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileServerResourceManager" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_Packaging_Opc" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_VirtualDiskService" = ["Win32_Storage"];
          "Win32_Storage_Vss" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_Storage_Xps_Printing" = ["Win32_Storage_Xps"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_AssessmentTool" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_CallObj" = ["Win32_System_Com"];
          "Win32_System_Com_ChannelCredentials" = ["Win32_System_Com"];
          "Win32_System_Com_Events" = ["Win32_System_Com"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_UI" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_Contacts" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DesktopSharing" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ClrProfiling" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_ActiveScript" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Mmc" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_ParentalControls" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_RealTimeCommunications" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteAssistance" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_ServerBackup" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SettingsManagementInfrastructure" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_TaskScheduler" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_UpdateAgent" = ["Win32_System"];
          "Win32_System_UpdateAssessment" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_WindowsSync" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_Animation" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_Controls_RichEdit" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_Ink" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Radial" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Notifications" = ["Win32_UI"];
          "Win32_UI_Ribbon" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_UI_Wpf" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
        };
        resolvedDefaultFeatures = ["Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Registry" "Win32_System_Time" "Win32_UI" "Win32_UI_Shell" "default"];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = ["Wdk"];
          "Wdk_Graphics" = ["Wdk"];
          "Wdk_Graphics_Direct3D" = ["Wdk_Graphics"];
          "Wdk_Storage" = ["Wdk"];
          "Wdk_Storage_FileSystem" = ["Wdk_Storage"];
          "Wdk_Storage_FileSystem_Minifilters" = ["Wdk_Storage_FileSystem"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_IO" = ["Wdk_System"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Wdk_System_Registry" = ["Wdk_System"];
          "Wdk_System_SystemInformation" = ["Wdk_System"];
          "Wdk_System_SystemServices" = ["Wdk_System"];
          "Wdk_System_Threading" = ["Wdk_System"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_GdiPlus" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_Nvme" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_Variant" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
        };
        resolvedDefaultFeatures = ["Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_System" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default"];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = ["Win32_Foundation"];
          "Wdk_Devices" = ["Wdk"];
          "Wdk_Devices_Bluetooth" = ["Wdk_Devices"];
          "Wdk_Devices_HumanInterfaceDevice" = ["Wdk_Devices"];
          "Wdk_Foundation" = ["Wdk"];
          "Wdk_Graphics" = ["Wdk"];
          "Wdk_Graphics_Direct3D" = ["Wdk_Graphics"];
          "Wdk_NetworkManagement" = ["Wdk"];
          "Wdk_NetworkManagement_Ndis" = ["Wdk_NetworkManagement"];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = ["Wdk_NetworkManagement"];
          "Wdk_Storage" = ["Wdk"];
          "Wdk_Storage_FileSystem" = ["Wdk_Storage"];
          "Wdk_Storage_FileSystem_Minifilters" = ["Wdk_Storage_FileSystem"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_IO" = ["Wdk_System"];
          "Wdk_System_Memory" = ["Wdk_System"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Wdk_System_Registry" = ["Wdk_System"];
          "Wdk_System_SystemInformation" = ["Wdk_System"];
          "Wdk_System_SystemServices" = ["Wdk_System"];
          "Wdk_System_Threading" = ["Wdk_System"];
          "Win32" = ["Win32_Foundation"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_GdiPlus" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_Nvme" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_TraceLogging" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_Variant" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
        };
        resolvedDefaultFeatures = ["Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Console" "Win32_System_IO" "Win32_System_Memory" "Win32_System_Pipes" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Shell" "default"];
      };
      "windows-sys 0.60.2" = rec {
        crateName = "windows-sys";
        version = "0.60.2";
        edition = "2021";
        sha256 = "1jrbc615ihqnhjhxplr2kw7rasrskv9wj3lr80hgfd42sbj01xgj";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.53.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "Wdk" = ["Win32_Foundation"];
          "Wdk_Devices" = ["Wdk"];
          "Wdk_Devices_Bluetooth" = ["Wdk_Devices"];
          "Wdk_Devices_HumanInterfaceDevice" = ["Wdk_Devices"];
          "Wdk_Foundation" = ["Wdk"];
          "Wdk_Graphics" = ["Wdk"];
          "Wdk_Graphics_Direct3D" = ["Wdk_Graphics"];
          "Wdk_NetworkManagement" = ["Wdk"];
          "Wdk_NetworkManagement_Ndis" = ["Wdk_NetworkManagement"];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = ["Wdk_NetworkManagement"];
          "Wdk_Storage" = ["Wdk"];
          "Wdk_Storage_FileSystem" = ["Wdk_Storage"];
          "Wdk_Storage_FileSystem_Minifilters" = ["Wdk_Storage_FileSystem"];
          "Wdk_System" = ["Wdk"];
          "Wdk_System_IO" = ["Wdk_System"];
          "Wdk_System_Memory" = ["Wdk_System"];
          "Wdk_System_OfflineRegistry" = ["Wdk_System"];
          "Wdk_System_Registry" = ["Wdk_System"];
          "Wdk_System_SystemInformation" = ["Wdk_System"];
          "Wdk_System_SystemServices" = ["Wdk_System"];
          "Wdk_System_Threading" = ["Wdk_System"];
          "Win32" = ["Win32_Foundation"];
          "Win32_Data" = ["Win32"];
          "Win32_Data_HtmlHelp" = ["Win32_Data"];
          "Win32_Data_RightsManagement" = ["Win32_Data"];
          "Win32_Devices" = ["Win32"];
          "Win32_Devices_AllJoyn" = ["Win32_Devices"];
          "Win32_Devices_Beep" = ["Win32_Devices"];
          "Win32_Devices_BiometricFramework" = ["Win32_Devices"];
          "Win32_Devices_Bluetooth" = ["Win32_Devices"];
          "Win32_Devices_Cdrom" = ["Win32_Devices"];
          "Win32_Devices_Communication" = ["Win32_Devices"];
          "Win32_Devices_DeviceAndDriverInstallation" = ["Win32_Devices"];
          "Win32_Devices_DeviceQuery" = ["Win32_Devices"];
          "Win32_Devices_Display" = ["Win32_Devices"];
          "Win32_Devices_Dvd" = ["Win32_Devices"];
          "Win32_Devices_Enumeration" = ["Win32_Devices"];
          "Win32_Devices_Enumeration_Pnp" = ["Win32_Devices_Enumeration"];
          "Win32_Devices_Fax" = ["Win32_Devices"];
          "Win32_Devices_HumanInterfaceDevice" = ["Win32_Devices"];
          "Win32_Devices_Nfc" = ["Win32_Devices"];
          "Win32_Devices_Nfp" = ["Win32_Devices"];
          "Win32_Devices_PortableDevices" = ["Win32_Devices"];
          "Win32_Devices_Properties" = ["Win32_Devices"];
          "Win32_Devices_Pwm" = ["Win32_Devices"];
          "Win32_Devices_Sensors" = ["Win32_Devices"];
          "Win32_Devices_SerialCommunication" = ["Win32_Devices"];
          "Win32_Devices_Tapi" = ["Win32_Devices"];
          "Win32_Devices_Usb" = ["Win32_Devices"];
          "Win32_Devices_WebServicesOnDevices" = ["Win32_Devices"];
          "Win32_Foundation" = ["Win32"];
          "Win32_Gaming" = ["Win32"];
          "Win32_Globalization" = ["Win32"];
          "Win32_Graphics" = ["Win32"];
          "Win32_Graphics_Dwm" = ["Win32_Graphics"];
          "Win32_Graphics_Gdi" = ["Win32_Graphics"];
          "Win32_Graphics_GdiPlus" = ["Win32_Graphics"];
          "Win32_Graphics_Hlsl" = ["Win32_Graphics"];
          "Win32_Graphics_OpenGL" = ["Win32_Graphics"];
          "Win32_Graphics_Printing" = ["Win32_Graphics"];
          "Win32_Graphics_Printing_PrintTicket" = ["Win32_Graphics_Printing"];
          "Win32_Management" = ["Win32"];
          "Win32_Management_MobileDeviceManagementRegistration" = ["Win32_Management"];
          "Win32_Media" = ["Win32"];
          "Win32_Media_Audio" = ["Win32_Media"];
          "Win32_Media_DxMediaObjects" = ["Win32_Media"];
          "Win32_Media_KernelStreaming" = ["Win32_Media"];
          "Win32_Media_Multimedia" = ["Win32_Media"];
          "Win32_Media_Streaming" = ["Win32_Media"];
          "Win32_Media_WindowsMediaFormat" = ["Win32_Media"];
          "Win32_NetworkManagement" = ["Win32"];
          "Win32_NetworkManagement_Dhcp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Dns" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_InternetConnectionWizard" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_IpHelper" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Multicast" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Ndis" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetBios" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetManagement" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetShell" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_P2P" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_QoS" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Rras" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_Snmp" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WNet" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WebDav" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WiFi" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsConnectionManager" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsFirewall" = ["Win32_NetworkManagement"];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = ["Win32_NetworkManagement"];
          "Win32_Networking" = ["Win32"];
          "Win32_Networking_ActiveDirectory" = ["Win32_Networking"];
          "Win32_Networking_Clustering" = ["Win32_Networking"];
          "Win32_Networking_HttpServer" = ["Win32_Networking"];
          "Win32_Networking_Ldap" = ["Win32_Networking"];
          "Win32_Networking_WebSocket" = ["Win32_Networking"];
          "Win32_Networking_WinHttp" = ["Win32_Networking"];
          "Win32_Networking_WinInet" = ["Win32_Networking"];
          "Win32_Networking_WinSock" = ["Win32_Networking"];
          "Win32_Networking_WindowsWebServices" = ["Win32_Networking"];
          "Win32_Security" = ["Win32"];
          "Win32_Security_AppLocker" = ["Win32_Security"];
          "Win32_Security_Authentication" = ["Win32_Security"];
          "Win32_Security_Authentication_Identity" = ["Win32_Security_Authentication"];
          "Win32_Security_Authorization" = ["Win32_Security"];
          "Win32_Security_Credentials" = ["Win32_Security"];
          "Win32_Security_Cryptography" = ["Win32_Security"];
          "Win32_Security_Cryptography_Catalog" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Certificates" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_Sip" = ["Win32_Security_Cryptography"];
          "Win32_Security_Cryptography_UI" = ["Win32_Security_Cryptography"];
          "Win32_Security_DiagnosticDataQuery" = ["Win32_Security"];
          "Win32_Security_DirectoryServices" = ["Win32_Security"];
          "Win32_Security_EnterpriseData" = ["Win32_Security"];
          "Win32_Security_ExtensibleAuthenticationProtocol" = ["Win32_Security"];
          "Win32_Security_Isolation" = ["Win32_Security"];
          "Win32_Security_LicenseProtection" = ["Win32_Security"];
          "Win32_Security_NetworkAccessProtection" = ["Win32_Security"];
          "Win32_Security_WinTrust" = ["Win32_Security"];
          "Win32_Security_WinWlx" = ["Win32_Security"];
          "Win32_Storage" = ["Win32"];
          "Win32_Storage_Cabinets" = ["Win32_Storage"];
          "Win32_Storage_CloudFilters" = ["Win32_Storage"];
          "Win32_Storage_Compression" = ["Win32_Storage"];
          "Win32_Storage_DistributedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_FileHistory" = ["Win32_Storage"];
          "Win32_Storage_FileSystem" = ["Win32_Storage"];
          "Win32_Storage_Imapi" = ["Win32_Storage"];
          "Win32_Storage_IndexServer" = ["Win32_Storage"];
          "Win32_Storage_InstallableFileSystems" = ["Win32_Storage"];
          "Win32_Storage_IscsiDisc" = ["Win32_Storage"];
          "Win32_Storage_Jet" = ["Win32_Storage"];
          "Win32_Storage_Nvme" = ["Win32_Storage"];
          "Win32_Storage_OfflineFiles" = ["Win32_Storage"];
          "Win32_Storage_OperationRecorder" = ["Win32_Storage"];
          "Win32_Storage_Packaging" = ["Win32_Storage"];
          "Win32_Storage_Packaging_Appx" = ["Win32_Storage_Packaging"];
          "Win32_Storage_ProjectedFileSystem" = ["Win32_Storage"];
          "Win32_Storage_StructuredStorage" = ["Win32_Storage"];
          "Win32_Storage_Vhd" = ["Win32_Storage"];
          "Win32_Storage_Xps" = ["Win32_Storage"];
          "Win32_System" = ["Win32"];
          "Win32_System_AddressBook" = ["Win32_System"];
          "Win32_System_Antimalware" = ["Win32_System"];
          "Win32_System_ApplicationInstallationAndServicing" = ["Win32_System"];
          "Win32_System_ApplicationVerifier" = ["Win32_System"];
          "Win32_System_ClrHosting" = ["Win32_System"];
          "Win32_System_Com" = ["Win32_System"];
          "Win32_System_Com_Marshal" = ["Win32_System_Com"];
          "Win32_System_Com_StructuredStorage" = ["Win32_System_Com"];
          "Win32_System_Com_Urlmon" = ["Win32_System_Com"];
          "Win32_System_ComponentServices" = ["Win32_System"];
          "Win32_System_Console" = ["Win32_System"];
          "Win32_System_CorrelationVector" = ["Win32_System"];
          "Win32_System_DataExchange" = ["Win32_System"];
          "Win32_System_DeploymentServices" = ["Win32_System"];
          "Win32_System_DeveloperLicensing" = ["Win32_System"];
          "Win32_System_Diagnostics" = ["Win32_System"];
          "Win32_System_Diagnostics_Ceip" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_Debug_Extensions" = ["Win32_System_Diagnostics_Debug"];
          "Win32_System_Diagnostics_Etw" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ProcessSnapshotting" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_ToolHelp" = ["Win32_System_Diagnostics"];
          "Win32_System_Diagnostics_TraceLogging" = ["Win32_System_Diagnostics"];
          "Win32_System_DistributedTransactionCoordinator" = ["Win32_System"];
          "Win32_System_Environment" = ["Win32_System"];
          "Win32_System_ErrorReporting" = ["Win32_System"];
          "Win32_System_EventCollector" = ["Win32_System"];
          "Win32_System_EventLog" = ["Win32_System"];
          "Win32_System_EventNotificationService" = ["Win32_System"];
          "Win32_System_GroupPolicy" = ["Win32_System"];
          "Win32_System_HostCompute" = ["Win32_System"];
          "Win32_System_HostComputeNetwork" = ["Win32_System"];
          "Win32_System_HostComputeSystem" = ["Win32_System"];
          "Win32_System_Hypervisor" = ["Win32_System"];
          "Win32_System_IO" = ["Win32_System"];
          "Win32_System_Iis" = ["Win32_System"];
          "Win32_System_Ioctl" = ["Win32_System"];
          "Win32_System_JobObjects" = ["Win32_System"];
          "Win32_System_Js" = ["Win32_System"];
          "Win32_System_Kernel" = ["Win32_System"];
          "Win32_System_LibraryLoader" = ["Win32_System"];
          "Win32_System_Mailslots" = ["Win32_System"];
          "Win32_System_Mapi" = ["Win32_System"];
          "Win32_System_Memory" = ["Win32_System"];
          "Win32_System_Memory_NonVolatile" = ["Win32_System_Memory"];
          "Win32_System_MessageQueuing" = ["Win32_System"];
          "Win32_System_MixedReality" = ["Win32_System"];
          "Win32_System_Ole" = ["Win32_System"];
          "Win32_System_PasswordManagement" = ["Win32_System"];
          "Win32_System_Performance" = ["Win32_System"];
          "Win32_System_Performance_HardwareCounterProfiling" = ["Win32_System_Performance"];
          "Win32_System_Pipes" = ["Win32_System"];
          "Win32_System_Power" = ["Win32_System"];
          "Win32_System_ProcessStatus" = ["Win32_System"];
          "Win32_System_Recovery" = ["Win32_System"];
          "Win32_System_Registry" = ["Win32_System"];
          "Win32_System_RemoteDesktop" = ["Win32_System"];
          "Win32_System_RemoteManagement" = ["Win32_System"];
          "Win32_System_RestartManager" = ["Win32_System"];
          "Win32_System_Restore" = ["Win32_System"];
          "Win32_System_Rpc" = ["Win32_System"];
          "Win32_System_Search" = ["Win32_System"];
          "Win32_System_Search_Common" = ["Win32_System_Search"];
          "Win32_System_SecurityCenter" = ["Win32_System"];
          "Win32_System_Services" = ["Win32_System"];
          "Win32_System_SetupAndMigration" = ["Win32_System"];
          "Win32_System_Shutdown" = ["Win32_System"];
          "Win32_System_StationsAndDesktops" = ["Win32_System"];
          "Win32_System_SubsystemForLinux" = ["Win32_System"];
          "Win32_System_SystemInformation" = ["Win32_System"];
          "Win32_System_SystemServices" = ["Win32_System"];
          "Win32_System_Threading" = ["Win32_System"];
          "Win32_System_Time" = ["Win32_System"];
          "Win32_System_TpmBaseServices" = ["Win32_System"];
          "Win32_System_UserAccessLogging" = ["Win32_System"];
          "Win32_System_Variant" = ["Win32_System"];
          "Win32_System_VirtualDosMachines" = ["Win32_System"];
          "Win32_System_WindowsProgramming" = ["Win32_System"];
          "Win32_System_Wmi" = ["Win32_System"];
          "Win32_UI" = ["Win32"];
          "Win32_UI_Accessibility" = ["Win32_UI"];
          "Win32_UI_ColorSystem" = ["Win32_UI"];
          "Win32_UI_Controls" = ["Win32_UI"];
          "Win32_UI_Controls_Dialogs" = ["Win32_UI_Controls"];
          "Win32_UI_HiDpi" = ["Win32_UI"];
          "Win32_UI_Input" = ["Win32_UI"];
          "Win32_UI_Input_Ime" = ["Win32_UI_Input"];
          "Win32_UI_Input_KeyboardAndMouse" = ["Win32_UI_Input"];
          "Win32_UI_Input_Pointer" = ["Win32_UI_Input"];
          "Win32_UI_Input_Touch" = ["Win32_UI_Input"];
          "Win32_UI_Input_XboxController" = ["Win32_UI_Input"];
          "Win32_UI_InteractionContext" = ["Win32_UI"];
          "Win32_UI_Magnification" = ["Win32_UI"];
          "Win32_UI_Shell" = ["Win32_UI"];
          "Win32_UI_Shell_Common" = ["Win32_UI_Shell"];
          "Win32_UI_Shell_PropertiesSystem" = ["Win32_UI_Shell"];
          "Win32_UI_TabletPC" = ["Win32_UI"];
          "Win32_UI_TextServices" = ["Win32_UI"];
          "Win32_UI_WindowsAndMessaging" = ["Win32_UI"];
          "Win32_Web" = ["Win32"];
          "Win32_Web_InternetExplorer" = ["Win32_Web"];
        };
        resolvedDefaultFeatures = ["Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "default"];
      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];
      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.52.6";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target = {
              target,
              features,
            }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];
      };
      "windows-targets 0.53.3" = rec {
        crateName = "windows-targets";
        version = "0.53.3";
        edition = "2021";
        sha256 = "14fwwm136dhs3i1impqrrip7nvkra3bdxa4nqkblj604qhqn1znm";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: (target."windows_raw_dylib" or false);
          }
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.53.0";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.53.0";
            target = {
              target,
              features,
            }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.53.0";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.53.0";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.53.0";
            target = {
              target,
              features,
            }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.53.0";
            target = {
              target,
              features,
            }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.53.0";
            target = {
              target,
              features,
            }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.53.0";
            target = {
              target,
              features,
            }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];
      };
      "windows-threading" = rec {
        crateName = "windows-threading";
        version = "0.1.0";
        edition = "2021";
        sha256 = "19jpn37zpjj2q7pn07dpq0ay300w65qx7wdp13wbp8qf5snn6r5n";
        libName = "windows_threading";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_gnullvm 0.53.0" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0r77pbpbcf8bq4yfwpz2hpq3vns8m0yacpvs2i5cn6fx1pwxbf46";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];
      };
      "windows_aarch64_msvc 0.53.0" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0v766yqw51pzxxwp203yqy39ijgjamp54hhdbsyqq6x1c8gilrf7";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnu 0.53.0" = rec {
        crateName = "windows_i686_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1hvjc8nv95sx5vdd79fivn8bpm7i517dqyf4yvsqgwrmkmjngp61";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnullvm 0.52.6" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_gnullvm 0.53.0" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "04df1in2k91qyf1wzizvh560bvyzq20yf68k8xa66vdzxnywrrlw";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];
      };
      "windows_i686_msvc 0.53.0" = rec {
        crateName = "windows_i686_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0pcvb25fkvqnp91z25qr5x61wyya12lx8p7nsa137cbb82ayw7sq";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnu 0.53.0" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.53.0";
        edition = "2021";
        sha256 = "1flh84xkssn1n6m1riddipydcksp2pdl45vdf70jygx3ksnbam9f";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_gnullvm 0.53.0" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        sha256 = "0mvc8119xpbi3q2m6mrjcdzl6afx4wffacp13v76g4jrs1fh6vha";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];
      };
      "windows_x86_64_msvc 0.53.0" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.53.0";
        edition = "2021";
        sha256 = "11h4i28hq0zlnjcaqi2xdxr7ibnpa8djfggch9rki1zzb8qi8517";
        authors = [
          "Microsoft"
        ];
      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.7.12";
        edition = "2021";
        sha256 = "159y8inpy86xswmr4yig9hxss0v2fssyqy1kk12504n8jbsfpvgk";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = ["std" "dep:anstream" "dep:anstyle" "dep:is_terminal_polyfill" "dep:terminal_size"];
          "default" = ["std"];
          "simd" = ["dep:memchr"];
          "std" = ["alloc" "memchr?/std"];
          "unstable-doc" = ["alloc" "std" "simd" "unstable-recover"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "std"];
      };
      "winreg" = rec {
        crateName = "winreg";
        version = "0.50.0";
        edition = "2018";
        sha256 = "1cddmp929k882mdh6i9f2as848f13qqna6czwsqzkh1pqnr5fkjj";
        authors = [
          "Igor Shaula <gentoo90@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            features = ["Win32_Foundation" "Win32_System_Time" "Win32_System_Registry" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug"];
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "serde" = ["dep:serde"];
          "serialization-serde" = ["transactions" "serde"];
        };
      };
      "wit-bindgen-rt" = rec {
        crateName = "wit-bindgen-rt";
        version = "0.39.0";
        edition = "2021";
        sha256 = "1hd65pa5hp0nl664m94bg554h4zlhrzmkjsf6lsgsb7yc4734hkg";
        libName = "wit_bindgen_rt";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "async" = ["dep:futures" "dep:once_cell"];
          "bitflags" = ["dep:bitflags"];
        };
        resolvedDefaultFeatures = ["bitflags"];
      };
      "wmi" = rec {
        crateName = "wmi";
        version = "0.17.2";
        edition = "2021";
        crateBin = [];
        sha256 = "0byfph3pyv2mi83w1drbvixa6ijbrrw8xlfmc73cvjz4vivyfg9x";
        authors = [
          "Ohad Ravid <ohad.rv@gmail.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["clock" "std" "serde"];
          }
          {
            name = "futures";
            packageId = "futures";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
          {
            name = "serde";
            packageId = "serde";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["derive"];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
          {
            name = "windows";
            packageId = "windows 0.61.3";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
            features = ["Win32_Foundation" "Win32_Security" "Win32_System_Com" "Win32_System_Ole" "Win32_System_Rpc" "Win32_System_Wmi" "Win32_System_Variant"];
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            target = {
              target,
              features,
            }: ("windows" == target."os" or null);
          }
        ];
        features = {
          "chrono" = ["dep:chrono"];
          "default" = ["chrono"];
          "time" = ["dep:time"];
        };
        resolvedDefaultFeatures = ["chrono" "default"];
      };
      "writeable" = rec {
        crateName = "writeable";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1fx29zncvbrqzgz7li88vzdm8zvgwgwy2r9bnjqxya09pfwi0bza";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "either" = ["dep:either"];
        };
      };
      "ws_stream_wasm" = rec {
        crateName = "ws_stream_wasm";
        version = "0.7.5";
        edition = "2024";
        sha256 = "1g3a1kkkz06kv72kbrslwxpq8f2v25hf6gj02qzyh8mdmha305vc";
        type = ["cdylib" "rlib"];
        authors = [
          "Naja Melan <najamelan@autistici.org>"
        ];
        dependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = ["map_pharos"];
          }
          {
            name = "futures";
            packageId = "futures";
            usesDefaultFeatures = false;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pharos";
            packageId = "pharos";
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = ["BinaryType" "Blob" "console" "MessageEvent" "WebSocket" "CloseEvent" "DomException"];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "async_io_stream";
            packageId = "async_io_stream";
            features = ["tokio_io"];
          }
        ];
        features = {
          "default" = ["not_ci"];
          "tokio_io" = ["async_io_stream/tokio_io"];
        };
        resolvedDefaultFeatures = ["default" "not_ci"];
      };
      "wyz" = rec {
        crateName = "wyz";
        version = "0.5.1";
        edition = "2018";
        sha256 = "1vdrfy7i2bznnzjdl9vvrzljvs4s3qm8bnlgqwln6a941gy61wq5";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        dependencies = [
          {
            name = "tap";
            packageId = "tap";
          }
        ];
        features = {
          "default" = ["std"];
          "garbage" = ["once_cell" "typemap"];
          "once_cell" = ["dep:once_cell"];
          "std" = ["alloc"];
          "typemap" = ["dep:typemap"];
        };
      };
      "x25519-dalek" = rec {
        crateName = "x25519-dalek";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0xyjgqpsa0q6pprakdp58q1hy45rf8wnqqscgzx0gyw13hr6ir67";
        libName = "x25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "DebugSteven <debugsteven@gmail.com>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
            features = ["zeroize_derive"];
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = ["getrandom"];
          }
        ];
        features = {
          "alloc" = ["curve25519-dalek/alloc" "serde?/alloc" "zeroize?/alloc"];
          "default" = ["alloc" "precomputed-tables" "zeroize"];
          "getrandom" = ["rand_core/getrandom"];
          "precomputed-tables" = ["curve25519-dalek/precomputed-tables"];
          "serde" = ["dep:serde" "curve25519-dalek/serde"];
          "zeroize" = ["dep:zeroize" "curve25519-dalek/zeroize"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "precomputed-tables" "static_secrets" "zeroize"];
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.27";
        edition = "2021";
        crateBin = [];
        sha256 = "1irplg223x6w3lvj0yig6czbiwci06495wc9xg3660kh6cvl1n3g";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vmatveev@citrine.cc>"
        ];
      };
      "xmltree" = rec {
        crateName = "xmltree";
        version = "0.10.3";
        edition = "2018";
        sha256 = "1jqzwhr1a5cknflsshhhjlllmd1xi04qdkjsls2bnmv5mxgagn6p";
        authors = [
          "Andrew Chin <achin@eminence32.net>"
        ];
        dependencies = [
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
          "attribute-order" = ["indexmap"];
          "indexmap" = ["dep:indexmap"];
        };
        resolvedDefaultFeatures = ["default"];
      };
      "yoke" = rec {
        crateName = "yoke";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1k4mfr48vgi7wh066y11b7v1ilakghlnlhw9snzz8vi2p00vnhaz";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke-derive";
            packageId = "yoke-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = ["stable_deref_trait/alloc" "serde?/alloc" "zerofrom/alloc"];
          "default" = ["alloc" "zerofrom"];
          "derive" = ["dep:yoke-derive" "zerofrom/derive"];
          "serde" = ["dep:serde"];
          "zerofrom" = ["dep:zerofrom"];
        };
        resolvedDefaultFeatures = ["alloc" "derive" "zerofrom"];
      };
      "yoke-derive" = rec {
        crateName = "yoke-derive";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1dha5jrjz9jaq8kmxq1aag86b98zbnm9lyjrihy5sv716sbkrniq";
        procMacro = true;
        libName = "yoke_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["fold"];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
      };
      "z32" = rec {
        crateName = "z32";
        version = "1.3.0";
        edition = "2021";
        sha256 = "03yykd2wdhl12z0zaqg34cxrl19q8vjsqf8ir7i4xn73v6cffr11";
        authors = [
          "Nuh <nuh@nuh.dev>"
        ];
      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.8.26";
        edition = "2021";
        sha256 = "0bvsj0qzq26zc6nlrm3z10ihvjspyngs7n0jw1fz031i7h6xsf8h";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = {
              target,
              features,
            }:
              false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = ["alloc" "derive" "simd" "std"];
          "derive" = ["zerocopy-derive"];
          "simd-nightly" = ["simd"];
          "std" = ["alloc"];
          "zerocopy-derive" = ["dep:zerocopy-derive"];
        };
        resolvedDefaultFeatures = ["simd"];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.8.26";
        edition = "2021";
        sha256 = "10aiywi5qkha0mpsnb1zjwi44wl2rhdncaf3ykbp4i9nqm65pkwy";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full"];
          }
        ];
      };
      "zerofrom" = rec {
        crateName = "zerofrom";
        version = "0.1.6";
        edition = "2021";
        sha256 = "19dyky67zkjichsb7ykhv0aqws3q0jfvzww76l66c19y6gh45k2h";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "zerofrom-derive";
            packageId = "zerofrom-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = ["alloc"];
          "derive" = ["dep:zerofrom-derive"];
        };
        resolvedDefaultFeatures = ["alloc" "derive"];
      };
      "zerofrom-derive" = rec {
        crateName = "zerofrom-derive";
        version = "0.1.6";
        edition = "2021";
        sha256 = "00l5niw7c1b0lf1vhvajpjmcnbdp2vn96jg4nmkhq2db0rp5s7np";
        procMacro = true;
        libName = "zerofrom_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["fold"];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];
      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = ["alloc"];
          "derive" = ["zeroize_derive"];
          "serde" = ["dep:serde"];
          "std" = ["alloc"];
          "zeroize_derive" = ["dep:zeroize_derive"];
        };
        resolvedDefaultFeatures = ["alloc" "default" "zeroize_derive"];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.4.2";
        edition = "2021";
        sha256 = "0sczjlqjdmrp3wn62g7mw6p438c9j4jgp2f9zamd56991mdycdnf";
        procMacro = true;
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["full" "extra-traits" "visit"];
          }
        ];
      };
      "zerotrie" = rec {
        crateName = "zerotrie";
        version = "0.2.2";
        edition = "2021";
        sha256 = "15gmka7vw5k0d24s0vxgymr2j6zn2iwl12wpmpnpjgsqg3abpw1n";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
            features = ["derive"];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = ["dep:databake" "zerovec?/databake"];
          "litemap" = ["dep:litemap" "alloc"];
          "serde" = ["dep:serde" "dep:litemap" "alloc" "litemap/serde" "zerovec?/serde"];
          "yoke" = ["dep:yoke"];
          "zerofrom" = ["dep:zerofrom"];
          "zerovec" = ["dep:zerovec"];
        };
        resolvedDefaultFeatures = ["yoke" "zerofrom"];
      };
      "zerovec" = rec {
        crateName = "zerovec";
        version = "0.11.4";
        edition = "2021";
        sha256 = "0fz7j1ns8d86m2fqg2a4bzi5gnh5892bxv4kcr9apwc6a3ajpap7";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec-derive";
            packageId = "zerovec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = ["derive"];
          }
        ];
        features = {
          "databake" = ["dep:databake"];
          "derive" = ["dep:zerovec-derive"];
          "hashmap" = ["dep:twox-hash" "alloc"];
          "serde" = ["dep:serde" "alloc"];
          "yoke" = ["dep:yoke"];
        };
        resolvedDefaultFeatures = ["alloc" "derive" "yoke"];
      };
      "zerovec-derive" = rec {
        crateName = "zerovec-derive";
        version = "0.11.1";
        edition = "2021";
        sha256 = "13zms8hj7vzpfswypwggyfr4ckmyc7v3di49pmj8r1qcz9z275jv";
        procMacro = true;
        libName = "zerovec_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = ["extra-traits"];
          }
        ];
      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /*
     Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
    */
    makeDefaultTarget = platform: {
      unix = platform.isUnix;
      windows = platform.isWindows;
      fuchsia = true;
      test = false;

      inherit
        (platform.rust.platform)
        arch
        os
        vendor
        ;
      family = platform.rust.platform.target-family;
      env = "gnu";
      endian =
        if platform.parsed.cpu.significantByte.name == "littleEndian"
        then "little"
        else "big";
      pointer_width = toString platform.parsed.cpu.bits;
      debug_assertions = false;
    };

    /*
     Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
    */
    crateWithTest = {
      crate,
      testCrate,
      testCrateFlags,
      testInputs,
      testPreRun,
      testPostRun,
    }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string"; let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test = let
          drv =
            testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand =
            pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
          pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
            set -e

            export RUST_BACKTRACE=1

            # recreate a file hierarchy as when running tests with cargo

            # the source for test data
            # It's necessary to locate the source in $NIX_BUILD_TOP/source/
            # instead of $NIX_BUILD_TOP/
            # because we compiled those test binaries in the former and not the latter.
            # So all paths will expect source tree to be there and not in the build top directly.
            # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
            # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
            # it's very hard to reason about them.
            # Open a bug if you run into this!
            mkdir -p source/
            cd source/

            ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

            # build outputs
            testRoot=target/debug
            mkdir -p $testRoot

            # executables of the crate
            # we copy to prevent std::env::current_exe() to resolve to a store location
            for i in ${crate}/bin/*; do
              cp "$i" "$testRoot"
            done
            chmod +w -R .

            # test harness executables are suffixed with a hash, like cargo does
            # this allows to prevent name collision with the main
            # executables of the crate
            hash=$(basename $out)
            for file in ${drv}/tests/*; do
              f=$testRoot/$(basename $file)-$hash
              cp $file $f
              ${testCommand}
            done
          '';
      in
        pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru =
            (crate.passthru or {})
            // {
              inherit test;
            };
        }
        (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
            echo tested by ${test}
          ''
          + ''
            ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
          '');

    /*
    A restricted overridable version of builtRustCratesWithFeatures.
    */
    buildRustCrateWithFeatures = {
      packageId,
      features ? rootFeatures,
      crateOverrides ? defaultCrateOverrides,
      buildRustCrateForPkgsFunc ? null,
      runTests ? false,
      testCrateFlags ? [],
      testInputs ? [],
      # Any command to run immediatelly before a test is executed.
      testPreRun ? "",
      # Any command run immediatelly after a test is executed.
      testPostRun ? "",
    }:
      lib.makeOverridable
      (
        {
          features,
          crateOverrides,
          runTests,
          testCrateFlags,
          testInputs,
          testPreRun,
          testPostRun,
        }: let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs:
                    (buildRustCrateForPkgs pkgs).override {
                      defaultCrateOverrides = crateOverrides;
                    }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests
            then
              crateWithTest
              {
                crate = drv;
                testCrate = testDrv;
                inherit testCrateFlags testInputs testPreRun testPostRun;
              }
            else drv;
        in
          derivation
      )
      {inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun;};

    /*
     Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
    */
    builtRustCratesWithFeatures = {
      packageId,
      features,
      crateConfigs ? crates,
      buildRustCrateForPkgsFunc,
      runTests,
      makeTarget ? makeDefaultTarget,
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests); let
        rootPackageId = packageId;
        mergedFeatures =
          mergePackageFeatures
          (
            args
            // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // {test = runTests;};
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs: let
          self = {
            crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
            target = makeTarget stdenv.hostPlatform;
            build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
          };
        in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId: let
          features = mergedFeatures."${packageId}" or [];
          crateConfig' = crateConfigs."${packageId}";
          crateConfig =
            builtins.removeAttrs crateConfig' ["resolvedDefaultFeatures" "devDependencies"];
          devDependencies =
            lib.optionals
            (runTests && packageId == rootPackageId)
            (crateConfig'.devDependencies or []);
          dependencies = dependencyDerivations {
            inherit features;
            inherit (self) target;
            buildByPackageId = depPackageId:
            # proc_macro crates must be compiled for the build architecture
              if crateConfigs.${depPackageId}.procMacro or false
              then self.build.crates.${depPackageId}
              else self.crates.${depPackageId};
            dependencies =
              (crateConfig.dependencies or [])
              ++ devDependencies;
          };
          buildDependencies = dependencyDerivations {
            inherit features;
            inherit (self.build) target;
            buildByPackageId = depPackageId:
              self.build.crates.${depPackageId};
            dependencies = crateConfig.buildDependencies or [];
          };
          dependenciesWithRenames = let
            buildDeps = filterEnabledDependencies {
              inherit features;
              inherit (self) target;
              dependencies = crateConfig.dependencies or [] ++ devDependencies;
            };
            hostDeps = filterEnabledDependencies {
              inherit features;
              inherit (self.build) target;
              dependencies = crateConfig.buildDependencies or [];
            };
          in
            lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
          # Crate renames have the form:
          #
          # {
          #    crate_name = [
          #       { version = "1.2.3"; rename = "crate_name01"; }
          #    ];
          #    # ...
          # }
          crateRenames = let
            grouped =
              lib.groupBy
              (dependency: dependency.name)
              dependenciesWithRenames;
            versionAndRename = dep: let
              package = crateConfigs."${dep.packageId}";
            in {
              inherit (dep) rename;
              inherit (package) version;
            };
          in
            lib.mapAttrs (name: builtins.map versionAndRename) grouped;
        in
          buildRustCrateForPkgsFunc pkgs
          (
            crateConfig
            // {
              src =
                crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 = assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
              extraRustcOpts = lib.lists.optional (targetFeatures != []) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
              inherit features dependencies buildDependencies crateRenames release;
            }
          );
      in
        builtByPackageIdByPkgs;

    /*
    Returns the actual derivations for the given dependencies.
    */
    dependencyDerivations = {
      buildByPackageId,
      features,
      dependencies,
      target,
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target); let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
        map depDerivation enabledDependencies;

    /*
     Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
    */
    sanitizeForJson = val:
      if builtins.isAttrs val
      then lib.mapAttrs (n: sanitizeForJson) val
      else if builtins.isList val
      then builtins.map sanitizeForJson val
      else if builtins.isFunction val
      then "function"
      else val;

    /*
    Returns various tools to debug a crate.
    */
    debugCrate = {
      packageId,
      target ? makeDefaultTarget stdenv.hostPlatform,
    }:
      assert (builtins.isString packageId); let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree =
            sanitizeForJson
            (
              buildRustCrateWithFeatures {
                buildRustCrateForPkgsFunc = _: crate: {
                  "01_crateName" = crate.crateName or false;
                  "02_features" = crate.features or [];
                  "03_dependencies" = crate.dependencies or [];
                };
                inherit packageId;
              }
            );
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in {internal = debug;};

    /*
     Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures = {
      crateConfigs ? crates,
      packageId,
      target,
    }:
      assert (builtins.isAttrs crateConfigs); let
        prefixValues = prefix: lib.mapAttrs (n: v: {"${prefix}" = v;});
        mergedFeatures =
          prefixValues
          "crate2nix"
          (mergePackageFeatures {
            inherit crateConfigs packageId target;
            features = ["default"];
          });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) {} [mergedFeatures configs];
        onlyInCargo =
          builtins.attrNames
          (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
          (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures =
          lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or []) != (v."cargo".resolved_default_features or [])
          )
          combined;
      in
        builtins.toJSON {
          inherit onlyInCargo onlyInCrate2Nix differentFeatures;
        };

    /*
     Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures = {
      crateConfigs ? crates,
      packageId,
      rootPackageId ? packageId,
      features ? rootFeatures,
      dependencyPath ? [crates.${packageId}.crateName],
      featuresByPackageId ? {},
      target,
      # Adds devDependencies to the crate with rootPackageId.
      runTests ? false,
      ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests); let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or {}) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or []) expandedFeatures;
        depWithResolvedFeatures = dependency: let
          inherit (dependency) packageId;
          features = dependencyFeatures enabledFeatures dependency;
        in {inherit packageId features;};
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies); let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
            foldOverCache
            (
              cache: {
                packageId,
                features,
              }: let
                cacheFeatures = cache.${packageId} or [];
                combinedFeatures = sortedUnique (cacheFeatures ++ features);
              in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf = let
          cacheFeatures = featuresByPackageId.${packageId} or [];
          combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
        in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
          (
            crateConfig.dependencies or []
            ++ lib.optionals
            (runTests && packageId == rootPackageId)
            (crateConfig.devDependencies or [])
          );
        cacheWithAll =
          resolveDependencies
          cacheWithDependencies "build"
          (crateConfig.buildDependencies or []);
      in
        cacheWithAll;

    /*
    Returns the enabled dependencies given the enabled features.
    */
    filterEnabledDependencies = {
      dependencies,
      features,
      target,
    }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
        lib.filter
        (
          dep: let
            targetFunc = dep.target or (features: true);
          in
            targetFunc {inherit features target;}
            && (
              !(dep.optional or false)
              || builtins.any (doesFeatureEnableDependency dep) features
            )
        )
        dependencies;

    /*
    Returns whether the given feature should enable the given dependency.
    */
    doesFeatureEnableDependency = dependency: feature: let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
      feature == name || feature == "dep:" + name || startsWithPrefix;

    /*
     Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
    */
    expandFeatures = featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures); let
        expandFeaturesNoCycle = oldSeen: inputFeatures:
          if inputFeatures != []
          then let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // {${feature} = 1;};
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or []);
          in
            [feature] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else [];
        outFeatures = expandFeaturesNoCycle {} inputFeatures;
      in
        sortedUnique outFeatures;

    /*
     This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
    */
    enableFeatures = dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies); let
        additionalFeatures =
          lib.concatMap
          (
            dependency:
              assert (builtins.isAttrs dependency); let
                enabled = builtins.any (doesFeatureEnableDependency dependency) features;
              in
                if (dependency.optional or false) && enabled
                then [(dependency.rename or dependency.name)]
                else []
          )
          dependencies;
      in
        sortedUnique (features ++ additionalFeatures);

    /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
    */
    dependencyFeatures = features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency); let
        defaultOrNil =
          if dependency.usesDefaultFeatures or true
          then ["default"]
          else [];
        explicitFeatures = dependency.features or [];
        additionalDependencyFeatures = let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature:
            lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
          dependencyFeatures;
      in
        defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    /*
    Sorts and removes duplicates from a list of strings.
    */
    sortedUnique = features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features); let
        outFeaturesSet = lib.foldl (set: feature: set // {"${feature}" = 1;}) {} features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
        builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning = message: value:
      if strictDeprecation
      then builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #
  };
}
